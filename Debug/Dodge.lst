SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    // the skeleton of this code was stolen from https://github.com/itisrazza/casio-pong
         Dodge.c     2    
         Dodge.c     3    
         Dodge.c     4    // Import some libraries
         Dodge.c     5    #include "stdio.h"    // Standard IO
         Dodge.c     6    #include <stdlib.h>
         Dodge.c     7    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     8    #include "dispbios.h" // Display BIOS
         Dodge.c     9    #include "timer.h"    // Timer
         Dodge.c    10    
         Dodge.c    11    #define PI 3.1415926f; // i doubt i'll need more digits than this
         Dodge.c    12    
         Dodge.c    13    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    14    
         Dodge.c    15    #define __KEYBIOS_H__
         Dodge.c    16    #define KEY_CHAR_0 71
         Dodge.c    17    #define KEY_CHAR_1 72
         Dodge.c    18    #define KEY_CHAR_2 62
         Dodge.c    19    #define KEY_CHAR_3 52
         Dodge.c    20    #define KEY_CHAR_4 73
         Dodge.c    21    #define KEY_CHAR_5 63
         Dodge.c    22    #define KEY_CHAR_6 53
         Dodge.c    23    #define KEY_CHAR_7 74
         Dodge.c    24    #define KEY_CHAR_8 64
         Dodge.c    25    #define KEY_CHAR_9 54
         Dodge.c    26    #define KEY_CHAR_DP 61
         Dodge.c    27    #define KEY_CHAR_EXP 51
         Dodge.c    28    #define KEY_CHAR_PMINUS 41
         Dodge.c    29    #define KEY_CHAR_PLUS 42
         Dodge.c    30    #define KEY_CHAR_MINUS 32
         Dodge.c    31    #define KEY_CHAR_MULT 43
         Dodge.c    32    #define KEY_CHAR_DIV 33
         Dodge.c    33    #define KEY_CHAR_FRAC 75
         Dodge.c    34    #define KEY_CHAR_LPAR 55
         Dodge.c    35    #define KEY_CHAR_RPAR 45
         Dodge.c    36    #define KEY_CHAR_COMMA 35
         Dodge.c    37    #define KEY_CHAR_STORE 25
         Dodge.c    38    #define KEY_CHAR_LOG 66
         Dodge.c    39    #define KEY_CHAR_LN 56
         Dodge.c    40    #define KEY_CHAR_SIN 46
         Dodge.c    41    #define KEY_CHAR_COS 36
         Dodge.c    42    #define KEY_CHAR_TAN 26
         Dodge.c    43    #define KEY_CHAR_SQUARE 67
         Dodge.c    44    #define KEY_CHAR_POW 57
         Dodge.c    45    #define KEY_CTRL_EXE 31
         Dodge.c    46    #define KEY_CTRL_DEL 44
         Dodge.c    47    #define KEY_CTRL_AC 32
         Dodge.c    48    #define KEY_CTRL_FD 65
         Dodge.c    49    #define KEY_CTRL_EXIT 47
         Dodge.c    50    #define KEY_CTRL_SHIFT 78
         Dodge.c    51    #define KEY_CTRL_ALPHA 77
         Dodge.c    52    #define KEY_CTRL_OPTN 68
         Dodge.c    53    #define KEY_CTRL_VARS 58
         Dodge.c    54    #define KEY_CTRL_UP 28




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_DOWN 37
         Dodge.c    56    #define KEY_CTRL_LEFT 38
         Dodge.c    57    #define KEY_CTRL_RIGHT 27
         Dodge.c    58    #define KEY_CTRL_F1 79
         Dodge.c    59    #define KEY_CTRL_F2 69
         Dodge.c    60    #define KEY_CTRL_F3 59
         Dodge.c    61    #define KEY_CTRL_F4 49
         Dodge.c    62    #define KEY_CTRL_F5 39
         Dodge.c    63    #define KEY_CTRL_F6 29
         Dodge.c    64    #define KEY_CTRL_MENU 48
         Dodge.c    65    #ifndef OS2Change
         Dodge.c    66    #define OS2Change
         Dodge.c    67    #ifndef OS2Change_GetOS2
         Dodge.c    68    #define OS2Change_GetOS2
         Dodge.c    69    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    70    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    71    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    72    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    73    {
         Dodge.c    74    unsigned char mainversion;
         Dodge.c    75    unsigned char minorversion;
         Dodge.c    76    unsigned short release;
         Dodge.c    77    unsigned short build;
         Dodge.c    78    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L766+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    79    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L766+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L766+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    80    }
    00000036 7F10                   ADD         #16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 201B                   OR          R1,R0
         Dodge.c    81    #define isOS2 (OSVersionAsInt() >= 0x02020000)
         Dodge.c    82    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    83    #endif
         Dodge.c    84    #ifndef OS2Change_Keyboard
         Dodge.c    85    #define OS2Change_Keyboard
         Dodge.c    86    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    87    {
         Dodge.c    88    char i;
         Dodge.c    89    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L613:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L613
         Dodge.c    90    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    91    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    92    {
         Dodge.c    93    unsigned char result=0;
         Dodge.c    94    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    95    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    96    char*PORTB=(void*)0xA4000122;
         Dodge.c    97    char*PORTM=(void*)0xA4000138;
         Dodge.c    98    char*PORTA=(void*)0xA4000120;
         Dodge.c    99    short smask;
         Dodge.c   100    char cmask;
         Dodge.c   101    unsigned char column, row;
         Dodge.c   102    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c   103    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   104    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000070 8B01                   BF          L614
    00000072 A005                   BRA         L615
    00000074 C907                   AND         #7,R0
    00000076              L614:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L615:                             
         Dodge.c   105    cmask = ~( 1 << ( row %8) );
         Dodge.c   106    if(row <8)
    00000080 994B                   MOV.W       L766,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L766+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L766+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L766+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L616
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   107    {
         Dodge.c   108      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   109      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   110      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   111      *PORTB = cmask;
    000000AE D221                   MOV.L       L766+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   112      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L758
    000000B8 CB0F                   OR          #15,R0
    000000BA              L616:                             
         Dodge.c   113    }
         Dodge.c   114    else
         Dodge.c   115    {
         Dodge.c   116      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   117      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C2 205A                   XOR         R5,R0
         Dodge.c   118      delay();
    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
         Dodge.c   119      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L766+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   120      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L758:                             
         Dodge.c   121    }
         Dodge.c   122    
         Dodge.c   123    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   124    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L766+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   125    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   126    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   127    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   128    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   129    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L766+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   130    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   131    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   132    
         Dodge.c   133    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   134    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12
    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L766:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   135    
         Dodge.c   136    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   137    {
         Dodge.c   138    unsigned short key[8];
         Dodge.c   139    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L767,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L767+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L619
         Dodge.c   140    if(isOS2)
         Dodge.c   141    {
         Dodge.c   142      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L767+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   143      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L767+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   144     
         Dodge.c   145      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1
    00000174 D24B                   MOV.L       L767+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L621
    000001A4 CA01                   XOR         #1,R0
    000001A6              L619:                             
         Dodge.c   146    }
         Dodge.c   147    else
         Dodge.c   148    {
         Dodge.c   149      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L767+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L767+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   150    }
         Dodge.c   151    }
    000001C2              L621:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   152    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15
    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
         Dodge.c   153    {
         Dodge.c   154    unsigned char x, ret;
         Dodge.c   155    
         Dodge.c   156    ret = GetKey(key);
    000001D4 D334                   MOV.L       L767+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   157    
         Dodge.c   158    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L624:                             
         Dodge.c   159    {
         Dodge.c   160      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L625
         Dodge.c   161      {
         Dodge.c   162       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   163       break;
    000001EE A004                   BRA         L623
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L625:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L624
    000001FA              L623:                             
         Dodge.c   164      }
         Dodge.c   165    }
         Dodge.c   166    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   167    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   168    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   169    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   170    #define GetKey(x) GetKeyMod(x)
         Dodge.c   171    #endif
         Dodge.c   172    #endif
         Dodge.c   173    
         Dodge.c   174    #pragma endregion
         Dodge.c   175    
         Dodge.c   176    #pragma region Constants




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    
         Dodge.c   178    // true/false since it's 2018
         Dodge.c   179    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   180    const char false = 0;
         Dodge.c   181    
         Dodge.c   182    // Display properties
         Dodge.c   183    const char DISPLAY_WIDTH    = 128;
         Dodge.c   184    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   185    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   186    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   187    
         Dodge.c   188    #pragma endregion
         Dodge.c   189    
         Dodge.c   190    struct Projectile {
         Dodge.c   191        char enabled;
         Dodge.c   192        float x;
         Dodge.c   193        float y;
         Dodge.c   194        float xVelocity;
         Dodge.c   195        float yVelocity;
         Dodge.c   196        float xAcceleration;
         Dodge.c   197        float yAcceleration;
         Dodge.c   198        float trackingForce;
         Dodge.c   199    };
         Dodge.c   200    struct Projectile projectiles[128];
         Dodge.c   201    
         Dodge.c   202    #pragma region Variables
         Dodge.c   203    
         Dodge.c   204    int playerHealth = 128;
         Dodge.c   205    int playerX = 64;
         Dodge.c   206    int playerY = 32;
         Dodge.c   207    
         Dodge.c   208    int projectileIndex;
         Dodge.c   209    int maxProjectiles;
         Dodge.c   210    int currentAttack = 0;
         Dodge.c   211    const int attacksTotal = 7;
         Dodge.c   212    
         Dodge.c   213    char paused = 1;
         Dodge.c   214    
         Dodge.c   215    char quit = 0;
         Dodge.c   216    
         Dodge.c   217    int timer = 0;
         Dodge.c   218    
         Dodge.c   219    char flicker = 1;
         Dodge.c   220    char damaged = 0;
         Dodge.c   221    int flickerOffset = 0;
         Dodge.c   222    
         Dodge.c   223    #pragma endregion
         Dodge.c   224    
         Dodge.c   225    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   226        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L628
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L628:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   227        if (x < 0) return -1;
    00000210 4411                   CMP/PZ      R4
    00000212 8901                   BT          L630
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L630:                             
         Dodge.c   228        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   229    }
    0000021A              L629:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   230    float Signf(float x) {
    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   231        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L767+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L631
    0000022C D020                   MOV.L       L767+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L631:                             
         Dodge.c   232        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L767+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L633
    00000240 D01D                   MOV.L       L767+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L633:                             
         Dodge.c   233        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   234    }
    0000024A              L632:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   235    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   236        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L634
         Dodge.c   237            return a;
    00000254 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000256 6043                   MOV         R4,R0
    00000258              L634:                             
         Dodge.c   238        else
         Dodge.c   239            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   240    }
    0000025A              L635:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP
         Dodge.c   241    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   242        if(a < b)
    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L637
         Dodge.c   243            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L637:                             
         Dodge.c   244        else
         Dodge.c   245            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   246    }
    00000268              L638:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   247    
         Dodge.c   248    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   249    {
         Dodge.c   250        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L767+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   251        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   252        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   253        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   254        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   255    
         Dodge.c   256        quit = true;
    00000286 D20E                   MOV.L       L767+44,R2 ; _true
    00000288 D10E                   MOV.L       L767+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   257    
         Dodge.c   258        return;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   259    }
    0000028E 4F26                   LDS.L       @R15+,PR
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L767:                             
    00000294 A44B0000               .DATA.L     H'A44B0000
    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy
    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000
    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   260    
         Dodge.c   261    #pragma region Drawing functions
         Dodge.c   262    
         Dodge.c   263    // draw an image (from array) that covers the whole screen
         Dodge.c   264    // if drawWhite is false, white (0) pixels will be treated as transparent (i.e. not override whatever's be
                         +hind them)
         Dodge.c   265    void DrawImage(char sprite[128][64], char drawWhite) {
    000002C8              _DrawImage:                      ; function: DrawImage
                                                           ; frame size=40
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
         Dodge.c   266        size_t x;
         Dodge.c   267        size_t y;
         Dodge.c   268        for (x = 0; x < 128; x++)
    000002D2 EB00                   MOV         #0,R11
    000002D4 2F96                   MOV.L       R9,@-R15
    000002D6 EA40                   MOV         #64,R10
    000002D8 2F86                   MOV.L       R8,@-R15
    000002DA 6DB3                   MOV         R11,R13
    000002DC D91F                   MOV.L       L768+6,R9  ; _Bdisp_SetPoint_VRAM
    000002DE 4F22                   STS.L       PR,@-R15
    000002E0 9839                   MOV.W       L768,R8    ; H'0080
    000002E2 7FF8                   ADD         #-8,R15
    000002E4 1F41                   MOV.L       R4,@(4,R15)
    000002E6 2F50                   MOV.B       R5,@R15
    000002E8              L641:                             
    000002E8 53F1                   MOV.L       @(4,R15),R3
         Dodge.c   269        {
         Dodge.c   270            for (y = 0; y < 64; y++)
    000002EA 6EB3                   MOV         R11,R14
    000002EC 6CD3                   MOV         R13,R12
    000002EE 4C08                   SHLL2       R12
    000002F0 4C08                   SHLL2       R12
    000002F2 4C08                   SHLL2       R12
    000002F4 3C3C                   ADD         R3,R12
    000002F6              L642:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   271            {
         Dodge.c   272                if(sprite[x][y] > 0 || drawWhite) {
    000002F6 60C3                   MOV         R12,R0
    000002F8 03EC                   MOV.B       @(R0,R14),R3
    000002FA 4315                   CMP/PL      R3
    000002FC 8902                   BT          L644
    000002FE 63F0                   MOV.B       @R15,R3
    00000300 2338                   TST         R3,R3
    00000302 8904                   BT          L643
    00000304              L644:                             
         Dodge.c   273                    Bdisp_SetPoint_VRAM(x, y, sprite[x][y]);
    00000304 60C3                   MOV         R12,R0
    00000306 65E3                   MOV         R14,R5
    00000308 06EC                   MOV.B       @(R0,R14),R6
    0000030A 490B                   JSR         @R9
    0000030C 64D3                   MOV         R13,R4
    0000030E              L643:                             
    0000030E 7E01                   ADD         #1,R14
    00000310 3EA2                   CMP/HS      R10,R14
    00000312 8BF0                   BF          L642
    00000314 7D01                   ADD         #1,R13
    00000316 3D82                   CMP/HS      R8,R13
    00000318 8BE6                   BF          L641
         Dodge.c   274                }
         Dodge.c   275            }
         Dodge.c   276        }
         Dodge.c   277        
         Dodge.c   278    }
    0000031A 7F08                   ADD         #8,R15
    0000031C 4F26                   LDS.L       @R15+,PR
    0000031E 68F6                   MOV.L       @R15+,R8
    00000320 69F6                   MOV.L       @R15+,R9
    00000322 6AF6                   MOV.L       @R15+,R10
    00000324 6BF6                   MOV.L       @R15+,R11
    00000326 6CF6                   MOV.L       @R15+,R12
    00000328 6DF6                   MOV.L       @R15+,R13
    0000032A 000B                   RTS
    0000032C 6EF6                   MOV.L       @R15+,R14
         Dodge.c   279    
         Dodge.c   280    void RenderMainMenu() {
    0000032E              _RenderMainMenu:                 ; function: RenderMainMenu
                                                           ; frame size=8196
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    0000032E 4F22                   STS.L       PR,@-R15
    00000330 9012                   MOV.W       L768+2,R0  ; H'E000
    00000332 3F0C                   ADD         R0,R15
         Dodge.c   281        char mainMenu[128][64] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                         +, 0, 0, 0, },
         Dodge.c   282    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   283    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   284    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   285    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   286    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   287    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   288    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   289    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   290    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   291    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   292    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   293    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   294    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   295    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   296    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   297    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   298    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   299    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   300    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   301    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   302    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   303    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   304    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   305    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   306    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   307    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   308    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   309    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   310    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   311    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   312    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   313    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   314    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   315    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   316    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   317    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   318    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   319    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   320    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   321    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   322    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   323    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   324    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   325    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   326    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   327    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   328    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   329    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   330    {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   331    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   332    {0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   333    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   334    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   335    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   336    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   337    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   338    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   339    {0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   340    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   341    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   342    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   343    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   344    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   345    {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   346    {0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   347    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   348    {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   349    {0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   350    {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   351    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   352    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   353    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   354    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   355    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   356    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   357    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   358    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   359    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   360    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   361    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   362    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   363    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   364    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   365    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   366    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   367    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   368    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   369    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   370    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   371    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   372    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   373    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   374    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   375    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   376    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   377    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   378    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   379    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   380    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   381    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   382    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   383    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   384    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   385    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   386    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   387    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   388    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   389    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   390    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   391    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   392    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   393    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   394    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   395    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   396    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   397    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   398    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   399    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   400    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   401    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   402    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   403    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   404    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   405    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   406    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   407    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   408    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   409    };
    00000334 D20A                   MOV.L       L768+10,R2 ; L445
    00000336 9010                   MOV.W       L768+4,R0  ; H'2000
    00000338 D30A                   MOV.L       L768+14,R3 ; __slow_mvn
    0000033A 430B                   JSR         @R3
    0000033C 61F3                   MOV         R15,R1
         Dodge.c   410        DrawImage(mainMenu, true);
    0000033E D10A                   MOV.L       L768+18,R1 ; _true
    00000340 6510                   MOV.B       @R1,R5
    00000342 BFC1                   BSR         _DrawImage
    00000344 64F3                   MOV         R15,R4
         Dodge.c   411        // Move VRAM to DD
         Dodge.c   412        Bdisp_PutDisp_DD();
    00000346 D209                   MOV.L       L768+22,R2 ; _Bdisp_PutDisp_DD
    00000348 420B                   JSR         @R2
    0000034A 0009                   NOP
         Dodge.c   413    }
    0000034C 9105                   MOV.W       L768+4,R1  ; H'2000
    0000034E 3F1C                   ADD         R1,R15
    00000350 4F26                   LDS.L       @R15+,PR
    00000352 000B                   RTS
    00000354 0009                   NOP
    00000356              L768:                             
    00000356 0080                   .DATA.W     H'0080
    00000358 E000                   .DATA.W     H'E000
    0000035A 2000                   .DATA.W     H'2000
    0000035C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000360 <00000000>             .DATA.L     L445
    00000364 <00000000>             .DATA.L     __slow_mvn
    00000368 <00000000>             .DATA.L     _true
    0000036C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   414    
         Dodge.c   415    /** Draws the projectils */
         Dodge.c   416    void DrawProjectiles()
    00000370              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000370 2FE6                   MOV.L       R14,@-R15
    00000372 2FD6                   MOV.L       R13,@-R15
    00000374 2FC6                   MOV.L       R12,@-R15
    00000376 2FB6                   MOV.L       R11,@-R15
    00000378 2FA6                   MOV.L       R10,@-R15
    0000037A 2F96                   MOV.L       R9,@-R15
    0000037C 2F86                   MOV.L       R8,@-R15
    0000037E 4F22                   STS.L       PR,@-R15
    00000380 D44B                   MOV.L       L769+2,R4  ; _projectiles
    00000382 7FE4                   ADD         #-28,R15
    00000384 DA4B                   MOV.L       L769+6,R10 ; _Bdisp_SetPoint_VRAM
    00000386 6543                   MOV         R4,R5
    00000388 9391                   MOV.W       L769,R3    ; H'1000
    0000038A 6D43                   MOV         R4,R13
    0000038C 6943                   MOV         R4,R9
    0000038E 343C                   ADD         R3,R4
    00000390 1F46                   MOV.L       R4,@(24,R15)
         Dodge.c   417    {   
         Dodge.c   418        float x1;
         Dodge.c   419        float y1;
         Dodge.c   420        float x2;
         Dodge.c   421        float y2;
         Dodge.c   422        float dx;
         Dodge.c   423        float dy;
         Dodge.c   424        int x;
         Dodge.c   425        int y;
         Dodge.c   426        int decide;
         Dodge.c   427        int pk;
         Dodge.c   428        int j;
         Dodge.c   429    
         Dodge.c   430        size_t i;
         Dodge.c   431        for (i = 0; i < 128; i++)
    00000392              L645:                             
         Dodge.c   432        {
         Dodge.c   433            if(projectiles[i].enabled) {
    00000392 6390                   MOV.B       @R9,R3
    00000394 2338                   TST         R3,R3
    00000396 8B01                   BF          L770
    00000398 A0D9                   BRA         L646
    0000039A 0009                   NOP
    0000039C              L770:                             
         Dodge.c   434                x1 = projectiles[i].x;
    0000039C 54D1                   MOV.L       @(4,R13),R4
    0000039E 1F41                   MOV.L       R4,@(4,R15)
         Dodge.c   435                y1 = projectiles[i].y;
    000003A0 55D2                   MOV.L       @(8,R13),R5
         Dodge.c   436                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000003A2 6143                   MOV         R4,R1
    000003A4 D344                   MOV.L       L769+10,R3 ; __adds
    000003A6 2F52                   MOV.L       R5,@R15
    000003A8 430B                   JSR         @R3
    000003AA 50D3                   MOV.L       @(12,R13),R0
         Dodge.c   437                y2 = projectiles[i].y + projectiles[i].yVelocity;
    000003AC D242                   MOV.L       L769+10,R2 ; __adds
    000003AE 6803                   MOV         R0,R8
    000003B0 6153                   MOV         R5,R1
    000003B2 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003B4 50D4                   MOV.L       @(16,R13),R0
         Dodge.c   438                Bdisp_SetPoint_VRAM(x1, y1, 1);
    000003B6 E601                   MOV         #1,R6
    000003B8 D240                   MOV.L       L769+14,R2 ; __stoi
    000003BA 1F02                   MOV.L       R0,@(8,R15)
    000003BC 420B                   JSR         @R2
    000003BE 60F2                   MOV.L       @R15,R0
    000003C0 D33E                   MOV.L       L769+14,R3 ; __stoi
    000003C2 6503                   MOV         R0,R5
    000003C4 430B                   JSR         @R3
    000003C6 50F1                   MOV.L       @(4,R15),R0
    000003C8 4A0B                   JSR         @R10
    000003CA 6403                   MOV         R0,R4
         Dodge.c   439                Bdisp_SetPoint_VRAM(x2, y2, 1);
    000003CC D33B                   MOV.L       L769+14,R3 ; __stoi
    000003CE E601                   MOV         #1,R6
    000003D0 430B                   JSR         @R3
    000003D2 50F2                   MOV.L       @(8,R15),R0
    000003D4 D339                   MOV.L       L769+14,R3 ; __stoi
    000003D6 6503                   MOV         R0,R5
    000003D8 430B                   JSR         @R3
    000003DA 6083                   MOV         R8,R0
    000003DC 4A0B                   JSR         @R10
    000003DE 6403                   MOV         R0,R4
         Dodge.c   440    
         Dodge.c   441                // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.
                         +org/bresenhams-line-generation-algorithm/
         Dodge.c   442                dx = abs(x2 - x1);
    000003E0 D237                   MOV.L       L769+18,R2 ; __subs
    000003E2 6183                   MOV         R8,R1
    000003E4 420B                   JSR         @R2
    000003E6 50F1                   MOV.L       @(4,R15),R0
    000003E8 D334                   MOV.L       L769+14,R3 ; __stoi
    000003EA 430B                   JSR         @R3
    000003EC 0009                   NOP
    000003EE D235                   MOV.L       L769+22,R2 ; _abs
    000003F0 420B                   JSR         @R2
    000003F2 6403                   MOV         R0,R4
    000003F4 D334                   MOV.L       L769+26,R3 ; __itos
    000003F6 430B                   JSR         @R3
    000003F8 0009                   NOP
    000003FA 6B03                   MOV         R0,R11
         Dodge.c   443                dy = abs(y2 - y1);
    000003FC 51F2                   MOV.L       @(8,R15),R1
    000003FE D230                   MOV.L       L769+18,R2 ; __subs
    00000400 420B                   JSR         @R2
    00000402 60F2                   MOV.L       @R15,R0
    00000404 D32D                   MOV.L       L769+14,R3 ; __stoi
    00000406 430B                   JSR         @R3
    00000408 0009                   NOP
    0000040A D22E                   MOV.L       L769+22,R2 ; _abs
    0000040C 420B                   JSR         @R2
    0000040E 6403                   MOV         R0,R4
    00000410 D32D                   MOV.L       L769+26,R3 ; __itos
    00000412 430B                   JSR         @R3
    00000414 0009                   NOP
    00000416 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   444    
         Dodge.c   445                decide = (dx > dy);
    00000418 D22C                   MOV.L       L769+30,R2 ; __gts
    0000041A 420B                   JSR         @R2
    0000041C 61B3                   MOV         R11,R1
    0000041E 1F03                   MOV.L       R0,@(12,R15)
         Dodge.c   446                
         Dodge.c   447                pk = 2 * dy - dx;
    00000420 D02B                   MOV.L       L769+34,R0 ; H'40000000
    00000422 D22C                   MOV.L       L769+38,R2 ; __muls
    00000424 420B                   JSR         @R2
    00000426 6143                   MOV         R4,R1
    00000428 D325                   MOV.L       L769+18,R3 ; __subs
    0000042A 6C03                   MOV         R0,R12
    0000042C 6103                   MOV         R0,R1
    0000042E 430B                   JSR         @R3
    00000430 60B3                   MOV         R11,R0
    00000432 D222                   MOV.L       L769+14,R2 ; __stoi
    00000434 420B                   JSR         @R2
    00000436 0009                   NOP
    00000438 D226                   MOV.L       L769+38,R2 ; __muls
    0000043A 6E03                   MOV         R0,R14
    0000043C D024                   MOV.L       L769+34,R0 ; H'40000000
         Dodge.c   448                for (j = 0; j <= dx; j++) {
    0000043E E300                   MOV         #0,R3
    00000440 1F34                   MOV.L       R3,@(16,R15)
    00000442 420B                   JSR         @R2
    00000444 61B3                   MOV         R11,R1
    00000446 D31E                   MOV.L       L769+18,R3 ; __subs
    00000448 430B                   JSR         @R3
    0000044A 61C3                   MOV         R12,R1
    0000044C 1F05                   MOV.L       R0,@(20,R15)
    0000044E E100                   MOV         #0,R1
    00000450 D321                   MOV.L       L769+42,R3 ; __les
    00000452 430B                   JSR         @R3
    00000454 60B3                   MOV         R11,R0
    00000456 8800                   CMP/EQ      #0,R0
    00000458 8979                   BT          L646
    0000045A              L648:                             
         Dodge.c   449                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    0000045A E601                   MOV         #1,R6
    0000045C D217                   MOV.L       L769+14,R2 ; __stoi
    0000045E 420B                   JSR         @R2
    00000460 60F2                   MOV.L       @R15,R0
    00000462 6503                   MOV         R0,R5
    00000464 D315                   MOV.L       L769+14,R3 ; __stoi
    00000466 430B                   JSR         @R3
    00000468 50F1                   MOV.L       @(4,R15),R0
    0000046A 4A0B                   JSR         @R10
    0000046C 6403                   MOV         R0,R4
         Dodge.c   450                    
         Dodge.c   451                    // checking either to decrement or increment the
         Dodge.c   452                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   453                    x1 < x2 ? x1++ : x1--;
    0000046E 51F1                   MOV.L       @(4,R15),R1
    00000470 D31A                   MOV.L       L769+46,R3 ; __lts
    00000472 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000474 6083                   MOV         R8,R0
    00000476 8800                   CMP/EQ      #0,R0
    00000478 8906                   BT          L649
    0000047A D119                   MOV.L       L769+50,R1 ; H'3F800000
    0000047C D20E                   MOV.L       L769+10,R2 ; __adds
    0000047E 420B                   JSR         @R2
    00000480 50F1                   MOV.L       @(4,R15),R0
    00000482 1F01                   MOV.L       R0,@(4,R15)
    00000484 A006                   BRA         L650
    00000486 0009                   NOP
    00000488              L649:                             
    00000488 51F1                   MOV.L       @(4,R15),R1
    0000048A D015                   MOV.L       L769+50,R0 ; H'3F800000
    0000048C D30C                   MOV.L       L769+18,R3 ; __subs
    0000048E 430B                   JSR         @R3
    00000490 0009                   NOP
    00000492 1F01                   MOV.L       R0,@(4,R15)
    00000494              L650:                             
         Dodge.c   454                    if (pk < 0) {
    00000494 4E11                   CMP/PZ      R14
    00000496 8930                   BT          L651
         Dodge.c   455                        // decision value will decide to plot
         Dodge.c   456                        // either  x1 or y1 in x's position
         Dodge.c   457                        if (decide == 0) {
    00000498 52F3                   MOV.L       @(12,R15),R2
    0000049A 2228                   TST         R2,R2
    0000049C 8B22                   BF          L652
         Dodge.c   458                            // putpixel(x1, y1, RED);
         Dodge.c   459                            pk = pk + 2 * dy;
    0000049E D30A                   MOV.L       L769+26,R3 ; __itos
    000004A0 430B                   JSR         @R3
    000004A2 60E3                   MOV         R14,R0
    000004A4 D204                   MOV.L       L769+10,R2 ; __adds
    000004A6 420B                   JSR         @R2
    000004A8 61C3                   MOV         R12,R1
    000004AA A021                   BRA         L759
    000004AC 0009                   NOP
    000004AE              L769:                             
    000004AE 1000                   .DATA.W     H'1000
    000004B0 <00000000>             .DATA.L     _projectiles
    000004B4 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000004B8 <00000000>             .DATA.L     __adds
    000004BC <00000000>             .DATA.L     __stoi
    000004C0 <00000000>             .DATA.L     __subs
    000004C4 <00000000>             .DATA.L     _abs
    000004C8 <00000000>             .DATA.L     __itos
    000004CC <00000000>             .DATA.L     __gts
    000004D0 40000000               .DATA.L     H'40000000
    000004D4 <00000000>             .DATA.L     __muls
    000004D8 <00000000>             .DATA.L     __les
    000004DC <00000000>             .DATA.L     __lts
    000004E0 3F800000               .DATA.L     H'3F800000
    000004E4              L652:                             
         Dodge.c   460                        }
         Dodge.c   461                        else {
         Dodge.c   462                            //(y1,x1) is passed in xt
         Dodge.c   463                            // putpixel(y1, x1, YELLOW);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   464                            pk = pk + 2 * dy;
    000004E4 D357                   MOV.L       L771,R3    ; __itos
    000004E6 430B                   JSR         @R3
    000004E8 60E3                   MOV         R14,R0
    000004EA D257                   MOV.L       L771+4,R2  ; __adds
    000004EC 420B                   JSR         @R2
    000004EE 61C3                   MOV         R12,R1
    000004F0              L759:                             
    000004F0 D356                   MOV.L       L771+8,R3  ; __stoi
    000004F2 430B                   JSR         @R3
    000004F4 0009                   NOP
    000004F6 A01F                   BRA         L654
    000004F8 6E03                   MOV         R0,R14
    000004FA              L651:                             
         Dodge.c   465                        }
         Dodge.c   466                    }
         Dodge.c   467                    else {
         Dodge.c   468                        y1 < y2 ? y1++ : y1--;
    000004FA 61F2                   MOV.L       @R15,R1
    000004FC D354                   MOV.L       L771+12,R3 ; __lts
    000004FE 430B                   JSR         @R3
    00000500 50F2                   MOV.L       @(8,R15),R0
    00000502 8800                   CMP/EQ      #0,R0
    00000504 8906                   BT          L655
    00000506 D153                   MOV.L       L771+16,R1 ; H'3F800000
    00000508 D24F                   MOV.L       L771+4,R2  ; __adds
    0000050A 420B                   JSR         @R2
    0000050C 60F2                   MOV.L       @R15,R0
    0000050E 2F02                   MOV.L       R0,@R15
    00000510 A006                   BRA         L656
    00000512 0009                   NOP
    00000514              L655:                             
    00000514 61F2                   MOV.L       @R15,R1
    00000516 D04F                   MOV.L       L771+16,R0 ; H'3F800000
    00000518 D34F                   MOV.L       L771+20,R3 ; __subs
    0000051A 430B                   JSR         @R3
    0000051C 0009                   NOP
    0000051E 2F02                   MOV.L       R0,@R15
    00000520              L656:                             
         Dodge.c   469                        if (decide == 0) {
    00000520 53F3                   MOV.L       @(12,R15),R3
    00000522 2338                   TST         R3,R3
         Dodge.c   470            
         Dodge.c   471                            // putpixel(x1, y1, RED);
         Dodge.c   472                        }
         Dodge.c   473                        else {
         Dodge.c   474                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   475                        }
         Dodge.c   476                        pk = pk + 2 * dy - 2 * dx;
    00000524 D347                   MOV.L       L771,R3    ; __itos
    00000526 430B                   JSR         @R3
    00000528 60E3                   MOV         R14,R0
    0000052A D247                   MOV.L       L771+4,R2  ; __adds
    0000052C 420B                   JSR         @R2
    0000052E 51F5                   MOV.L       @(20,R15),R1
    00000530 D346                   MOV.L       L771+8,R3  ; __stoi
    00000532 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000534 0009                   NOP
    00000536 6E03                   MOV         R0,R14
    00000538              L654:                             
    00000538 52F4                   MOV.L       @(16,R15),R2
    0000053A 7201                   ADD         #1,R2
    0000053C 1F24                   MOV.L       R2,@(16,R15)
    0000053E D341                   MOV.L       L771,R3    ; __itos
    00000540 430B                   JSR         @R3
    00000542 6023                   MOV         R2,R0
    00000544 D345                   MOV.L       L771+24,R3 ; __ges
    00000546 430B                   JSR         @R3
    00000548 61B3                   MOV         R11,R1
    0000054A 8800                   CMP/EQ      #0,R0
    0000054C 8B85                   BF          L648
    0000054E              L646:                             
    0000054E 7920                   ADD         #32,R9
    00000550 52F6                   MOV.L       @(24,R15),R2
    00000552 3922                   CMP/HS      R2,R9
    00000554 8D02                   BT/S        L772
    00000556 7D20                   ADD         #32,R13
    00000558 AF1B                   BRA         L645
    0000055A 0009                   NOP
    0000055C              L772:                             
         Dodge.c   477                    }
         Dodge.c   478                }
         Dodge.c   479            }
         Dodge.c   480        }
         Dodge.c   481    }
    0000055C 7F1C                   ADD         #28,R15
    0000055E 4F26                   LDS.L       @R15+,PR
    00000560 68F6                   MOV.L       @R15+,R8
    00000562 69F6                   MOV.L       @R15+,R9
    00000564 6AF6                   MOV.L       @R15+,R10
    00000566 6BF6                   MOV.L       @R15+,R11
    00000568 6CF6                   MOV.L       @R15+,R12
    0000056A 6DF6                   MOV.L       @R15+,R13
    0000056C 000B                   RTS
    0000056E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   482    
         Dodge.c   483    /** Draws the player */
         Dodge.c   484    void DrawPlayer()
    00000570              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __modls
    00000570 2FE6                   MOV.L       R14,@-R15
    00000572 2FD6                   MOV.L       R13,@-R15
    00000574 2FC6                   MOV.L       R12,@-R15
    00000576 2FB6                   MOV.L       R11,@-R15
    00000578 4F22                   STS.L       PR,@-R15
         Dodge.c   485    {   
         Dodge.c   486        if(damaged) {
    0000057A DB39                   MOV.L       L771+28,R11; _flicker
    0000057C D239                   MOV.L       L771+32,R2 ; _damaged
    0000057E 6320                   MOV.B       @R2,R3
    00000580 2338                   TST         R3,R3
    00000582 890E                   BT          L659




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   487            if((timer - flickerOffset) % 10 == 0) { // damage flash animation
    00000584 D038                   MOV.L       L771+36,R0 ; _flickerOffset
    00000586 6302                   MOV.L       @R0,R3
    00000588 D238                   MOV.L       L771+40,R2 ; _timer
    0000058A 6122                   MOV.L       @R2,R1
    0000058C D238                   MOV.L       L771+44,R2 ; __modls
    0000058E 3138                   SUB         R3,R1
    00000590 420B                   JSR         @R2
    00000592 E00A                   MOV         #10,R0
    00000594 2008                   TST         R0,R0
    00000596 8B06                   BF          L662
         Dodge.c   488                flicker = !flicker;
    00000598 60B0                   MOV.B       @R11,R0
    0000059A 2008                   TST         R0,R0
    0000059C 0029                   MOVT        R0
    0000059E A002                   BRA         L662
    000005A0 2B00                   MOV.B       R0,@R11
    000005A2              L659:                             
         Dodge.c   489            }
         Dodge.c   490        }
         Dodge.c   491        else
         Dodge.c   492            flicker = 1;
    000005A2 E101                   MOV         #1,R1
    000005A4 2B10                   MOV.B       R1,@R11
    000005A6              L662:                             
         Dodge.c   493        Bdisp_SetPoint_VRAM(playerX, playerY, flicker); // middle
    000005A6 DC33                   MOV.L       L771+48,R12; _playerY
    000005A8 DD33                   MOV.L       L771+52,R13; _Bdisp_SetPoint_VRAM
    000005AA DE34                   MOV.L       L771+56,R14; _playerX
    000005AC 66B0                   MOV.B       @R11,R6
    000005AE 65C2                   MOV.L       @R12,R5
    000005B0 4D0B                   JSR         @R13
    000005B2 64E2                   MOV.L       @R14,R4
         Dodge.c   494        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    000005B4 65C2                   MOV.L       @R12,R5
    000005B6 E601                   MOV         #1,R6
    000005B8 64E2                   MOV.L       @R14,R4
    000005BA 4D0B                   JSR         @R13
    000005BC 7401                   ADD         #1,R4
         Dodge.c   495        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    000005BE E601                   MOV         #1,R6
    000005C0 65C2                   MOV.L       @R12,R5
    000005C2 64E2                   MOV.L       @R14,R4
    000005C4 4D0B                   JSR         @R13
    000005C6 74FF                   ADD         #-1,R4
         Dodge.c   496        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    000005C8 65C2                   MOV.L       @R12,R5
    000005CA E601                   MOV         #1,R6
    000005CC 7501                   ADD         #1,R5
    000005CE 4D0B                   JSR         @R13
    000005D0 64E2                   MOV.L       @R14,R4
         Dodge.c   497        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000005D2 E601                   MOV         #1,R6
    000005D4 65C2                   MOV.L       @R12,R5
    000005D6 75FF                   ADD         #-1,R5
    000005D8 4D0B                   JSR         @R13
    000005DA 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   498    }
    000005DC 4F26                   LDS.L       @R15+,PR
    000005DE 6BF6                   MOV.L       @R15+,R11
    000005E0 6CF6                   MOV.L       @R15+,R12
    000005E2 6DF6                   MOV.L       @R15+,R13
    000005E4 000B                   RTS
    000005E6 6EF6                   MOV.L       @R15+,R14
         Dodge.c   499    void NotDamaged() {
    000005E8              _NotDamaged:                     ; function: NotDamaged
                                                           ; frame size=0
         Dodge.c   500        damaged = false;
    000005E8 D225                   MOV.L       L771+60,R2 ; _false
    000005EA 6320                   MOV.B       @R2,R3
    000005EC D11D                   MOV.L       L771+32,R1 ; _damaged
    000005EE 2130                   MOV.B       R3,@R1
         Dodge.c   501        KillTimer(ID_USER_TIMER4);
    000005F0 D324                   MOV.L       L771+64,R3 ; _KillTimer
    000005F2 432B                   JMP         @R3
    000005F4 E404                   MOV         #4,R4
         Dodge.c   502        // if the player is damaged multiple times within one second, the animation will only play for 2 secon
                         +ds from the
         Dodge.c   503        // first hit. i can't really be bothered fixing this
         Dodge.c   504    }
         Dodge.c   505    
         Dodge.c   506    void DrawHealthBar() {
    000005F6              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __modls
    000005F6 2FE6                   MOV.L       R14,@-R15
    000005F8 2FD6                   MOV.L       R13,@-R15
    000005FA 2FC6                   MOV.L       R12,@-R15
    000005FC 2FB6                   MOV.L       R11,@-R15
    000005FE 4F22                   STS.L       PR,@-R15
         Dodge.c   507        size_t i;
         Dodge.c   508        for (i = 0; i < playerHealth; i++) // health bar
    00000600 DC21                   MOV.L       L771+68,R12; _playerHealth
    00000602 DD1D                   MOV.L       L771+52,R13; _Bdisp_SetPoint_VRAM
    00000604 A005                   BRA         L663
    00000606 EE00                   MOV         #0,R14
    00000608              L664:                             
         Dodge.c   509            Bdisp_SetPoint_VRAM(i, 63, 1);
    00000608 E601                   MOV         #1,R6
    0000060A E53F                   MOV         #63,R5
    0000060C 4D0B                   JSR         @R13
    0000060E 64E3                   MOV         R14,R4
    00000610 7E01                   ADD         #1,R14
    00000612              L663:                             
    00000612 62C2                   MOV.L       @R12,R2
    00000614 3E22                   CMP/HS      R2,R14
    00000616 8BF7                   BF          L664
         Dodge.c   510        for (i = 0; i < (timer % 100); i++) // bar until next attack
    00000618 DB14                   MOV.L       L771+40,R11; _timer
    0000061A EC64                   MOV         #100,R12
    0000061C A006                   BRA         L665
    0000061E EE00                   MOV         #0,R14
    00000620              L666:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   511            Bdisp_SetPoint_VRAM(14 + i, 1, 1); // + 14 so that it's centered (half of 28) (128-100=28) (screen
                         + is 128 wide)
    00000620 E601                   MOV         #1,R6
    00000622 6563                   MOV         R6,R5
    00000624 64E3                   MOV         R14,R4
    00000626 4D0B                   JSR         @R13
    00000628 740E                   ADD         #14,R4
    0000062A 7E01                   ADD         #1,R14
    0000062C              L665:                             
    0000062C 61B2                   MOV.L       @R11,R1
    0000062E D310                   MOV.L       L771+44,R3 ; __modls
    00000630 430B                   JSR         @R3
    00000632 60C3                   MOV         R12,R0
    00000634 3E02                   CMP/HS      R0,R14
    00000636 8BF3                   BF          L666
         Dodge.c   512    }
    00000638 4F26                   LDS.L       @R15+,PR
    0000063A 6BF6                   MOV.L       @R15+,R11
    0000063C 6CF6                   MOV.L       @R15+,R12
    0000063E 6DF6                   MOV.L       @R15+,R13
    00000640 000B                   RTS
    00000642 6EF6                   MOV.L       @R15+,R14
    00000644              L771:                             
    00000644 <00000000>             .DATA.L     __itos
    00000648 <00000000>             .DATA.L     __adds
    0000064C <00000000>             .DATA.L     __stoi
    00000650 <00000000>             .DATA.L     __lts
    00000654 3F800000               .DATA.L     H'3F800000
    00000658 <00000000>             .DATA.L     __subs
    0000065C <00000000>             .DATA.L     __ges
    00000660 <00000000>             .DATA.L     _flicker
    00000664 <00000000>             .DATA.L     _damaged
    00000668 <00000000>             .DATA.L     _flickerOffset
    0000066C <00000000>             .DATA.L     _timer
    00000670 <00000000>             .DATA.L     __modls
    00000674 <00000000>             .DATA.L     _playerY
    00000678 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    0000067C <00000000>             .DATA.L     _playerX
    00000680 <00000000>             .DATA.L     _false
    00000684 <00000000>             .DATA.L     _KillTimer
    00000688 <00000000>             .DATA.L     _playerHealth
         Dodge.c   513    
         Dodge.c   514    #pragma endregion
         Dodge.c   515    
         Dodge.c   516    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   517    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration, float trackingForce) {
    0000068C              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=20
    0000068C 2FE6                   MOV.L       R14,@-R15
    0000068E 2FD6                   MOV.L       R13,@-R15
    00000690 2FB6                   MOV.L       R11,@-R15
    00000692 7FF8                   ADD         #-8,R15
    00000694 DE2B                   MOV.L       L773+4,R14 ; _projectiles
    00000696 2FE2                   MOV.L       R14,@R15
    00000698 1FE1                   MOV.L       R14,@(4,R15)
    0000069A 6DE3                   MOV         R14,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000069C 9350                   MOV.W       L773,R3    ; H'1000
    0000069E 61F2                   MOV.L       @R15,R1
         Dodge.c   518        size_t i;
         Dodge.c   519        for (i = 0; i < 128; i++)
    000006A0 DB29                   MOV.L       L773+8,R11 ; _true
    000006A2 313C                   ADD         R3,R1
    000006A4 3D12                   CMP/HS      R1,R13
    000006A6 8913                   BT          L670
    000006A8              L668:                             
         Dodge.c   520        {
         Dodge.c   521            if(!projectiles[i].enabled) { // found a free spot in the array
    000006A8 63D0                   MOV.B       @R13,R3
    000006AA 2338                   TST         R3,R3
    000006AC 8B0C                   BF          L669
         Dodge.c   522                // set up the projectile
         Dodge.c   523                projectiles[i].x = x;
    000006AE 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   524                projectiles[i].y = y;
    000006B0 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   525                projectiles[i].xVelocity = xVelocity;
    000006B2 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   526                projectiles[i].yVelocity = yVelocity;
    000006B4 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   527                projectiles[i].xAcceleration = xAcceleration;
    000006B6 53F5                   MOV.L       @(20,R15),R3
    000006B8 1E35                   MOV.L       R3,@(20,R14)
         Dodge.c   528                projectiles[i].yAcceleration = yAcceleration;
    000006BA 52F6                   MOV.L       @(24,R15),R2
    000006BC 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   529                projectiles[i].trackingForce = trackingForce;
    000006BE 53F7                   MOV.L       @(28,R15),R3
    000006C0 1E37                   MOV.L       R3,@(28,R14)
         Dodge.c   530                // enable it
         Dodge.c   531                projectiles[i].enabled = true;
    000006C2 62B0                   MOV.B       @R11,R2
         Dodge.c   532                // stop the loop, we're done
         Dodge.c   533                return;
    000006C4 A004                   BRA         L670
    000006C6 2E20                   MOV.B       R2,@R14
    000006C8              L669:                             
    000006C8 7D20                   ADD         #32,R13
    000006CA 3D12                   CMP/HS      R1,R13
    000006CC 8FEC                   BF/S        L668
    000006CE 7E20                   ADD         #32,R14
    000006D0              L670:                             
         Dodge.c   534            }
         Dodge.c   535        }
         Dodge.c   536        
         Dodge.c   537    }
    000006D0 7F08                   ADD         #8,R15
    000006D2 6BF6                   MOV.L       @R15+,R11
    000006D4 6DF6                   MOV.L       @R15+,R13
    000006D6 000B                   RTS
    000006D8 6EF6                   MOV.L       @R15+,R14
         Dodge.c   538    
         Dodge.c   539    int IsCollidingWithPlayer(int x, int y) {
    000006DA              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=12
    000006DA 4F22                   STS.L       PR,@-R15
         Dodge.c   540        return (abs(x - playerX) < 2 && abs(y - playerY) < 2);
    000006DC D21B                   MOV.L       L773+12,R2 ; _playerX
    000006DE 7FF8                   ADD         #-8,R15
    000006E0 D11B                   MOV.L       L773+16,R1 ; _abs
    000006E2 1F41                   MOV.L       R4,@(4,R15)
    000006E4 2F52                   MOV.L       R5,@R15
    000006E6 6322                   MOV.L       @R2,R3
    000006E8 54F1                   MOV.L       @(4,R15),R4
    000006EA 410B                   JSR         @R1
    000006EC 3438                   SUB         R3,R4
    000006EE E302                   MOV         #2,R3
    000006F0 3033                   CMP/GE      R3,R0
    000006F2 890C                   BT          L671
    000006F4 D117                   MOV.L       L773+20,R1 ; _playerY
    000006F6 6212                   MOV.L       @R1,R2
    000006F8 64F2                   MOV.L       @R15,R4
    000006FA D315                   MOV.L       L773+16,R3 ; _abs
    000006FC 430B                   JSR         @R3
    000006FE 3428                   SUB         R2,R4
    00000700 E202                   MOV         #2,R2
    00000702 3023                   CMP/GE      R2,R0
    00000704 8903                   BT          L671
    00000706 7F08                   ADD         #8,R15
    00000708 4F26                   LDS.L       @R15+,PR
    0000070A 000B                   RTS
    0000070C E001                   MOV         #1,R0
    0000070E              L671:                             
    0000070E E000                   MOV         #0,R0
         Dodge.c   541    }
    00000710              L673:                             
    00000710 7F08                   ADD         #8,R15
    00000712 4F26                   LDS.L       @R15+,PR
    00000714 000B                   RTS
    00000716 0009                   NOP
         Dodge.c   542    
         Dodge.c   543    #pragma region Timer functions
         Dodge.c   544    
         Dodge.c   545    /** Timer #2: Renders screen */
         Dodge.c   546    void RenderScreen()
    00000718              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4
    00000718 4F22                   STS.L       PR,@-R15
         Dodge.c   547    {
         Dodge.c   548        if(!quit) {
    0000071A D10F                   MOV.L       L773+24,R1 ; _quit
    0000071C 6310                   MOV.B       @R1,R3
    0000071E 2338                   TST         R3,R3
    00000720 8B0B                   BF          L674
         Dodge.c   549            // Clear current screen
         Dodge.c   550            Bdisp_AllClr_VRAM();
    00000722 D30E                   MOV.L       L773+28,R3 ; _Bdisp_AllClr_VRAM
    00000724 430B                   JSR         @R3
    00000726 0009                   NOP
         Dodge.c   551                
         Dodge.c   552            // Draw the different parts of the screen




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   553            DrawProjectiles();
    00000728 BE22                   BSR         _DrawProjectiles
    0000072A 0009                   NOP
         Dodge.c   554            DrawPlayer();
    0000072C BF20                   BSR         _DrawPlayer
    0000072E 0009                   NOP
         Dodge.c   555            DrawHealthBar();
    00000730 BF61                   BSR         _DrawHealthBar
    00000732 0009                   NOP
         Dodge.c   556    
         Dodge.c   557            // Move VRAM to DD
         Dodge.c   558            Bdisp_PutDisp_DD();
    00000734 D30A                   MOV.L       L773+32,R3 ; _Bdisp_PutDisp_DD
    00000736 432B                   JMP         @R3
    00000738 4F26                   LDS.L       @R15+,PR
    0000073A              L674:                             
         Dodge.c   559        }
         Dodge.c   560    }
    0000073A 4F26                   LDS.L       @R15+,PR
    0000073C 000B                   RTS
    0000073E 0009                   NOP
    00000740              L773:                             
    00000740 1000                   .DATA.W     H'1000
    00000742 0000                   .DATA.W     0
    00000744 <00000000>             .DATA.L     _projectiles
    00000748 <00000000>             .DATA.L     _true
    0000074C <00000000>             .DATA.L     _playerX
    00000750 <00000000>             .DATA.L     _abs
    00000754 <00000000>             .DATA.L     _playerY
    00000758 <00000000>             .DATA.L     _quit
    0000075C <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000760 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   561    
         Dodge.c   562    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    00000764              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __modls, __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, _
                        +                                  _les
    00000764 2FE6                   MOV.L       R14,@-R15
         Dodge.c   563        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   564        float dx;
         Dodge.c   565        float dy;
         Dodge.c   566        int decide;
         Dodge.c   567        int pk;
         Dodge.c   568        int j;
         Dodge.c   569    
         Dodge.c   570        dx = abs(x2 - x1);
    00000766 6173                   MOV         R7,R1
    00000768 D342                   MOV.L       L774+2,R3  ; __subs
    0000076A 2FD6                   MOV.L       R13,@-R15
    0000076C 2FC6                   MOV.L       R12,@-R15
    0000076E 2FB6                   MOV.L       R11,@-R15
    00000770 2FA6                   MOV.L       R10,@-R15
    00000772 2F96                   MOV.L       R9,@-R15
    00000774 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000776 4F22                   STS.L       PR,@-R15
    00000778 7FE8                   ADD         #-24,R15
    0000077A 1F43                   MOV.L       R4,@(12,R15)
    0000077C 1F51                   MOV.L       R5,@(4,R15)
    0000077E 2F62                   MOV.L       R6,@R15
    00000780 1F72                   MOV.L       R7,@(8,R15)
    00000782 430B                   JSR         @R3
    00000784 50F1                   MOV.L       @(4,R15),R0
    00000786 D23C                   MOV.L       L774+6,R2  ; __stoi
    00000788 420B                   JSR         @R2
    0000078A 0009                   NOP
    0000078C D33B                   MOV.L       L774+10,R3 ; _abs
    0000078E 430B                   JSR         @R3
    00000790 6403                   MOV         R0,R4
    00000792 D23B                   MOV.L       L774+14,R2 ; __itos
    00000794 420B                   JSR         @R2
    00000796 0009                   NOP
         Dodge.c   571        dy = abs(y2 - y1);
    00000798 51FE                   MOV.L       @(56,R15),R1
    0000079A 6D03                   MOV         R0,R13
    0000079C D335                   MOV.L       L774+2,R3  ; __subs
    0000079E 430B                   JSR         @R3
    000007A0 60F2                   MOV.L       @R15,R0
    000007A2 D235                   MOV.L       L774+6,R2  ; __stoi
    000007A4 420B                   JSR         @R2
    000007A6 0009                   NOP
    000007A8 D334                   MOV.L       L774+10,R3 ; _abs
    000007AA 430B                   JSR         @R3
    000007AC 6403                   MOV         R0,R4
    000007AE D234                   MOV.L       L774+14,R2 ; __itos
    000007B0 420B                   JSR         @R2
    000007B2 0009                   NOP
         Dodge.c   572    
         Dodge.c   573        decide = (dx > dy);
    000007B4 D333                   MOV.L       L774+18,R3 ; __gts
    000007B6 6403                   MOV         R0,R4
    000007B8 430B                   JSR         @R3
    000007BA 61D3                   MOV         R13,R1
         Dodge.c   574        
         Dodge.c   575        pk = 2 * dy - dx;
    000007BC D233                   MOV.L       L774+26,R2 ; __muls
    000007BE 6903                   MOV         R0,R9
    000007C0 D031                   MOV.L       L774+22,R0 ; H'40000000
    000007C2 420B                   JSR         @R2
    000007C4 6143                   MOV         R4,R1
    000007C6 6A03                   MOV         R0,R10
    000007C8 D32A                   MOV.L       L774+2,R3  ; __subs
    000007CA 6103                   MOV         R0,R1
    000007CC 430B                   JSR         @R3
    000007CE 60D3                   MOV         R13,R0
    000007D0 D229                   MOV.L       L774+6,R2  ; __stoi
    000007D2 420B                   JSR         @R2
    000007D4 0009                   NOP
    000007D6 6E03                   MOV         R0,R14
    000007D8 53F3                   MOV.L       @(12,R15),R3
         Dodge.c   576        for (j = 0; j <= dx; j++) {
    000007DA E800                   MOV         #0,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007DC D22C                   MOV.L       L774+30,R2 ; _projectiles
    000007DE 4308                   SHLL2       R3
    000007E0 D029                   MOV.L       L774+22,R0 ; H'40000000
    000007E2 4308                   SHLL2       R3
    000007E4 4300                   SHLL        R3
    000007E6 1F35                   MOV.L       R3,@(20,R15)
    000007E8 332C                   ADD         R2,R3
    000007EA 1F33                   MOV.L       R3,@(12,R15)
    000007EC D227                   MOV.L       L774+26,R2 ; __muls
    000007EE 420B                   JSR         @R2
    000007F0 61D3                   MOV         R13,R1
    000007F2 D220                   MOV.L       L774+2,R2  ; __subs
    000007F4 420B                   JSR         @R2
    000007F6 61A3                   MOV         R10,R1
    000007F8 1F04                   MOV.L       R0,@(16,R15)
    000007FA 6183                   MOV         R8,R1
    000007FC D225                   MOV.L       L774+34,R2 ; __les
    000007FE 420B                   JSR         @R2
    00000800 60D3                   MOV         R13,R0
    00000802 8800                   CMP/EQ      #0,R0
    00000804 8B01                   BF          L775
    00000806 A0A8                   BRA         L675
    00000808 0009                   NOP
    0000080A              L775:                             
    0000080A DB23                   MOV.L       L774+38,R11; _false
    0000080C DC23                   MOV.L       L774+42,R12; _playerHealth
    0000080E              L676:                             
         Dodge.c   577            // check for collision
         Dodge.c   578            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    0000080E D31A                   MOV.L       L774+6,R3  ; __stoi
    00000810 430B                   JSR         @R3
    00000812 60F2                   MOV.L       @R15,R0
    00000814 D318                   MOV.L       L774+6,R3  ; __stoi
    00000816 6503                   MOV         R0,R5
    00000818 430B                   JSR         @R3
    0000081A 50F1                   MOV.L       @(4,R15),R0
    0000081C BF5D                   BSR         _IsCollidingWithPlayer
    0000081E 6403                   MOV         R0,R4
    00000820 2008                   TST         R0,R0
    00000822 8919                   BT          L677
         Dodge.c   579                // damage player
         Dodge.c   580                playerHealth -= 1;
    00000824 63C2                   MOV.L       @R12,R3
    00000826 73FF                   ADD         #-1,R3
    00000828 2C32                   MOV.L       R3,@R12
         Dodge.c   581                damaged = true;
    0000082A D11D                   MOV.L       L774+46,R1 ; _true
    0000082C D01D                   MOV.L       L774+50,R0 ; _damaged
    0000082E 6210                   MOV.B       @R1,R2
    00000830 2020                   MOV.B       R2,@R0
         Dodge.c   582                flicker = false;
    00000832 63B0                   MOV.B       @R11,R3
    00000834 D21C                   MOV.L       L774+54,R2 ; _flicker
    00000836 2230                   MOV.B       R3,@R2
         Dodge.c   583                flickerOffset = timer % 10;
    00000838 D31C                   MOV.L       L774+58,R3 ; _timer
    0000083A 6132                   MOV.L       @R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000083C D31C                   MOV.L       L774+62,R3 ; __modls
    0000083E 430B                   JSR         @R3
    00000840 E00A                   MOV         #10,R0
    00000842 D21C                   MOV.L       L774+66,R2 ; _flickerOffset
         Dodge.c   584                SetTimer(ID_USER_TIMER4, 2000, NotDamaged); // animate flicker for 2 second
    00000844 D61C                   MOV.L       L774+70,R6 ; _NotDamaged
    00000846 2202                   MOV.L       R0,@R2
    00000848 9513                   MOV.W       L774,R5    ; H'07D0
    0000084A D31C                   MOV.L       L774+74,R3 ; _SetTimer
    0000084C 430B                   JSR         @R3
    0000084E E404                   MOV         #4,R4
         Dodge.c   585                // destroy projectile
         Dodge.c   586                projectiles[arrayIndex].enabled = false;
    00000850 52F3                   MOV.L       @(12,R15),R2
    00000852 63B0                   MOV.B       @R11,R3
         Dodge.c   587                return;
    00000854 A088                   BRA         L678
    00000856 2230                   MOV.B       R3,@R2
    00000858              L677:                             
         Dodge.c   588            }
         Dodge.c   589            
         Dodge.c   590            // checking either to decrement or increment the
         Dodge.c   591            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   592            x1 < x2 ? x1++ : x1--;
    00000858 51F1                   MOV.L       @(4,R15),R1
    0000085A D219                   MOV.L       L774+78,R2 ; __lts
    0000085C 420B                   JSR         @R2
    0000085E 50F2                   MOV.L       @(8,R15),R0
    00000860 8800                   CMP/EQ      #0,R0
    00000862 8933                   BT          L679
    00000864 D117                   MOV.L       L774+82,R1 ; H'3F800000
    00000866 D318                   MOV.L       L774+86,R3 ; __adds
    00000868 430B                   JSR         @R3
    0000086A 50F1                   MOV.L       @(4,R15),R0
    0000086C 1F01                   MOV.L       R0,@(4,R15)
    0000086E A033                   BRA         L680
    00000870 0009                   NOP
    00000872              L774:                             
    00000872 07D0                   .DATA.W     H'07D0
    00000874 <00000000>             .DATA.L     __subs
    00000878 <00000000>             .DATA.L     __stoi
    0000087C <00000000>             .DATA.L     _abs
    00000880 <00000000>             .DATA.L     __itos
    00000884 <00000000>             .DATA.L     __gts
    00000888 40000000               .DATA.L     H'40000000
    0000088C <00000000>             .DATA.L     __muls
    00000890 <00000000>             .DATA.L     _projectiles
    00000894 <00000000>             .DATA.L     __les
    00000898 <00000000>             .DATA.L     _false
    0000089C <00000000>             .DATA.L     _playerHealth
    000008A0 <00000000>             .DATA.L     _true
    000008A4 <00000000>             .DATA.L     _damaged
    000008A8 <00000000>             .DATA.L     _flicker
    000008AC <00000000>             .DATA.L     _timer
    000008B0 <00000000>             .DATA.L     __modls
    000008B4 <00000000>             .DATA.L     _flickerOffset
    000008B8 <00000000>             .DATA.L     _NotDamaged




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008BC <00000000>             .DATA.L     _SetTimer
    000008C0 <00000000>             .DATA.L     __lts
    000008C4 3F800000               .DATA.L     H'3F800000
    000008C8 <00000000>             .DATA.L     __adds
    000008CC              L679:                             
    000008CC 51F1                   MOV.L       @(4,R15),R1
    000008CE D034                   MOV.L       L776+4,R0  ; H'3F800000
    000008D0 D234                   MOV.L       L776+8,R2  ; __subs
    000008D2 420B                   JSR         @R2
    000008D4 0009                   NOP
    000008D6 1F01                   MOV.L       R0,@(4,R15)
    000008D8              L680:                             
    000008D8 D333                   MOV.L       L776+12,R3 ; __itos
    000008DA 430B                   JSR         @R3
    000008DC 60E3                   MOV         R14,R0
    000008DE 4E11                   CMP/PZ      R14
    000008E0 8D14                   BT/S        L681
    000008E2 6403                   MOV         R0,R4
         Dodge.c   593            if (pk < 0) {
         Dodge.c   594                // decision value will decide to plot
         Dodge.c   595                // either  x1 or y1 in x's position
         Dodge.c   596                if (decide == 0) {
    000008E4 2998                   TST         R9,R9
    000008E6 8B08                   BF          L682
         Dodge.c   597                    // putpixel(x1, y1, RED);
         Dodge.c   598                    pk = pk + 2 * dy;
    000008E8 D230                   MOV.L       L776+16,R2 ; __adds
    000008EA 6143                   MOV         R4,R1
    000008EC 420B                   JSR         @R2
    000008EE 60A3                   MOV         R10,R0
    000008F0 D32F                   MOV.L       L776+20,R3 ; __stoi
    000008F2 430B                   JSR         @R3
    000008F4 0009                   NOP
    000008F6 A007                   BRA         L760
    000008F8 0009                   NOP
    000008FA              L682:                             
         Dodge.c   599                }
         Dodge.c   600                else {
         Dodge.c   601                    //(y1,x1) is passed in xt
         Dodge.c   602                    // putpixel(y1, x1, YELLOW);
         Dodge.c   603                    pk = pk + 2 * dy;
    000008FA 6143                   MOV         R4,R1
    000008FC D32B                   MOV.L       L776+16,R3 ; __adds
    000008FE 430B                   JSR         @R3
    00000900 60A3                   MOV         R10,R0
    00000902 D22B                   MOV.L       L776+20,R2 ; __stoi
    00000904 420B                   JSR         @R2
    00000906 0009                   NOP
    00000908              L760:                             
    00000908 A01C                   BRA         L684
    0000090A 6E03                   MOV         R0,R14
    0000090C              L681:                             
         Dodge.c   604                }
         Dodge.c   605            }
         Dodge.c   606            else {
         Dodge.c   607                y1 < y2 ? y1++ : y1--;
    0000090C 61F2                   MOV.L       @R15,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000090E D229                   MOV.L       L776+24,R2 ; __lts
    00000910 420B                   JSR         @R2
    00000912 50FE                   MOV.L       @(56,R15),R0
    00000914 8800                   CMP/EQ      #0,R0
    00000916 8906                   BT          L685
    00000918 D121                   MOV.L       L776+4,R1  ; H'3F800000
    0000091A D324                   MOV.L       L776+16,R3 ; __adds
    0000091C 430B                   JSR         @R3
    0000091E 60F2                   MOV.L       @R15,R0
    00000920 2F02                   MOV.L       R0,@R15
    00000922 A006                   BRA         L686
    00000924 0009                   NOP
    00000926              L685:                             
    00000926 61F2                   MOV.L       @R15,R1
    00000928 D01D                   MOV.L       L776+4,R0  ; H'3F800000
    0000092A D21E                   MOV.L       L776+8,R2  ; __subs
    0000092C 420B                   JSR         @R2
    0000092E 0009                   NOP
    00000930 2F02                   MOV.L       R0,@R15
    00000932              L686:                             
         Dodge.c   608                if (decide == 0) {
    00000932 2998                   TST         R9,R9
         Dodge.c   609    
         Dodge.c   610                    // putpixel(x1, y1, RED);
         Dodge.c   611                }
         Dodge.c   612                else {
         Dodge.c   613                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   614                }
         Dodge.c   615                pk = pk + 2 * dy - 2 * dx;
    00000934 D31D                   MOV.L       L776+16,R3 ; __adds
    00000936 6143                   MOV         R4,R1
    00000938 430B                   JSR         @R3
    0000093A 50F4                   MOV.L       @(16,R15),R0
    0000093C D21C                   MOV.L       L776+20,R2 ; __stoi
    0000093E 420B                   JSR         @R2
    00000940 0009                   NOP
    00000942 6E03                   MOV         R0,R14
    00000944              L684:                             
    00000944 D318                   MOV.L       L776+12,R3 ; __itos
    00000946 7801                   ADD         #1,R8
    00000948 430B                   JSR         @R3
    0000094A 6083                   MOV         R8,R0
    0000094C D21A                   MOV.L       L776+28,R2 ; __ges
    0000094E 420B                   JSR         @R2
    00000950 61D3                   MOV         R13,R1
    00000952 8800                   CMP/EQ      #0,R0
    00000954 8901                   BT          L777
    00000956 AF5A                   BRA         L676
    00000958 0009                   NOP
    0000095A              L777:                             
    0000095A              L675:                             
         Dodge.c   616            }
         Dodge.c   617        }
         Dodge.c   618    
         Dodge.c   619        projectiles[arrayIndex].x = x2;
    0000095A D318                   MOV.L       L776+32,R3 ; _projectiles
    0000095C 54F5                   MOV.L       @(20,R15),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000095E 343C                   ADD         R3,R4
    00000960 52F2                   MOV.L       @(8,R15),R2
    00000962 1421                   MOV.L       R2,@(4,R4)
         Dodge.c   620        projectiles[arrayIndex].y = y2;
    00000964 51FE                   MOV.L       @(56,R15),R1
    00000966 1412                   MOV.L       R1,@(8,R4)
         Dodge.c   621    }
    00000968              L678:                             
    00000968 7F18                   ADD         #24,R15
    0000096A 4F26                   LDS.L       @R15+,PR
    0000096C 68F6                   MOV.L       @R15+,R8
    0000096E 69F6                   MOV.L       @R15+,R9
    00000970 6AF6                   MOV.L       @R15+,R10
    00000972 6BF6                   MOV.L       @R15+,R11
    00000974 6CF6                   MOV.L       @R15+,R12
    00000976 6DF6                   MOV.L       @R15+,R13
    00000978 000B                   RTS
    0000097A 6EF6                   MOV.L       @R15+,R14
         Dodge.c   622    
         Dodge.c   623    void Physics()
    0000097C              _Physics:                        ; function: Physics
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __itos, __gts, __lts
    0000097C 2FE6                   MOV.L       R14,@-R15
    0000097E 2FD6                   MOV.L       R13,@-R15
    00000980 2FC6                   MOV.L       R12,@-R15
    00000982 2FB6                   MOV.L       R11,@-R15
    00000984 2FA6                   MOV.L       R10,@-R15
    00000986 2F96                   MOV.L       R9,@-R15
    00000988 2F86                   MOV.L       R8,@-R15
    0000098A 4F22                   STS.L       PR,@-R15
         Dodge.c   624    {
         Dodge.c   625        size_t i;
         Dodge.c   626        for (i = 0; i < 128; i++)
    0000098C D80C                   MOV.L       L776+36,R8 ; _false
    0000098E 7FF8                   ADD         #-8,R15
    00000990 9904                   MOV.W       L776,R9    ; H'0080
    00000992 DA0C                   MOV.L       L776+40,R10; _playerX
    00000994 DB0C                   MOV.L       L776+44,R11; _playerY
    00000996 DC09                   MOV.L       L776+32,R12; _projectiles
    00000998 A08D                   BRA         L689
    0000099A ED00                   MOV         #0,R13
    0000099C              L776:                             
    0000099C 0080                   .DATA.W     H'0080
    0000099E 0000                   .DATA.W     0
    000009A0 3F800000               .DATA.L     H'3F800000
    000009A4 <00000000>             .DATA.L     __subs
    000009A8 <00000000>             .DATA.L     __itos
    000009AC <00000000>             .DATA.L     __adds
    000009B0 <00000000>             .DATA.L     __stoi
    000009B4 <00000000>             .DATA.L     __lts
    000009B8 <00000000>             .DATA.L     __ges
    000009BC <00000000>             .DATA.L     _projectiles
    000009C0 <00000000>             .DATA.L     _false
    000009C4 <00000000>             .DATA.L     _playerX
    000009C8 <00000000>             .DATA.L     _playerY




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009CC              L690:                             
    000009CC 6ED3                   MOV         R13,R14
    000009CE 4E08                   SHLL2       R14
    000009D0 4E08                   SHLL2       R14
    000009D2 4E00                   SHLL        R14
    000009D4 3ECC                   ADD         R12,R14
    000009D6 63E0                   MOV.B       @R14,R3
    000009D8 2338                   TST         R3,R3
    000009DA 896B                   BT          L694
         Dodge.c   627        {
         Dodge.c   628            if(projectiles[i].enabled) {
         Dodge.c   629                // collision with edge of map
         Dodge.c   630                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    000009DC 54E1                   MOV.L       @(4,R14),R4
    000009DE 6143                   MOV         R4,R1
    000009E0 D389                   MOV.L       L778+2,R3  ; __lts
    000009E2 430B                   JSR         @R3
    000009E4 E000                   MOV         #0,R0
    000009E6 8800                   CMP/EQ      #0,R0
    000009E8 8B11                   BF          L693
    000009EA D088                   MOV.L       L778+6,R0  ; H'43000000
    000009EC D288                   MOV.L       L778+10,R2 ; __gts
    000009EE 420B                   JSR         @R2
    000009F0 6143                   MOV         R4,R1
    000009F2 8800                   CMP/EQ      #0,R0
    000009F4 8B0B                   BF          L693
    000009F6 51E2                   MOV.L       @(8,R14),R1
    000009F8 D383                   MOV.L       L778+2,R3  ; __lts
    000009FA 430B                   JSR         @R3
    000009FC E000                   MOV         #0,R0
    000009FE 8800                   CMP/EQ      #0,R0
    00000A00 8B05                   BF          L693
    00000A02 D084                   MOV.L       L778+14,R0 ; H'42800000
    00000A04 D282                   MOV.L       L778+10,R2 ; __gts
    00000A06 420B                   JSR         @R2
    00000A08 51E2                   MOV.L       @(8,R14),R1
    00000A0A 8800                   CMP/EQ      #0,R0
    00000A0C 8902                   BT          L692
    00000A0E              L693:                             
         Dodge.c   631                    // destroy projectile
         Dodge.c   632                    projectiles[i].enabled = false;
    00000A0E 6380                   MOV.B       @R8,R3
         Dodge.c   633                    continue;
    00000A10 A050                   BRA         L694
    00000A12 2E30                   MOV.B       R3,@R14
    00000A14              L692:                             
         Dodge.c   634                }
         Dodge.c   635                // move + detect player collisions
         Dodge.c   636                MoveProjectile(i,
         Dodge.c   637                    projectiles[i].x,
         Dodge.c   638                    projectiles[i].y,
         Dodge.c   639                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   640                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   641                );
    00000A14 51E2                   MOV.L       @(8,R14),R1
    00000A16 2F12                   MOV.L       R1,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A18 D37F                   MOV.L       L778+18,R3 ; __adds
    00000A1A 430B                   JSR         @R3
    00000A1C 50E4                   MOV.L       @(16,R14),R0
    00000A1E 2F06                   MOV.L       R0,@-R15
    00000A20 51E1                   MOV.L       @(4,R14),R1
    00000A22 1F12                   MOV.L       R1,@(8,R15)
    00000A24 D37C                   MOV.L       L778+18,R3 ; __adds
    00000A26 430B                   JSR         @R3
    00000A28 50E3                   MOV.L       @(12,R14),R0
    00000A2A 6703                   MOV         R0,R7
    00000A2C 56F1                   MOV.L       @(4,R15),R6
    00000A2E 55F2                   MOV.L       @(8,R15),R5
    00000A30 BE98                   BSR         _MoveProjectile
    00000A32 64D3                   MOV         R13,R4
         Dodge.c   642                // update acceleration if this is a tracking projectile
         Dodge.c   643                if(projectiles[i].trackingForce > 0) { // maybe != 0 is better but I don't see why I'd have a 
                         +projectile go away from the player
    00000A34 D276                   MOV.L       L778+10,R2 ; __gts
    00000A36 7F04                   ADD         #4,R15
    00000A38 51E7                   MOV.L       @(28,R14),R1
    00000A3A 420B                   JSR         @R2
    00000A3C E000                   MOV         #0,R0
    00000A3E 8800                   CMP/EQ      #0,R0
    00000A40 8929                   BT          L695
         Dodge.c   644                    float xDif = (float)playerX - projectiles[i].x;
    00000A42 D376                   MOV.L       L778+22,R3 ; __itos
    00000A44 430B                   JSR         @R3
    00000A46 60A2                   MOV.L       @R10,R0
    00000A48 D375                   MOV.L       L778+26,R3 ; __subs
    00000A4A 64D3                   MOV         R13,R4
    00000A4C 4408                   SHLL2       R4
    00000A4E 4408                   SHLL2       R4
    00000A50 4400                   SHLL        R4
    00000A52 34CC                   ADD         R12,R4
    00000A54 6103                   MOV         R0,R1
    00000A56 430B                   JSR         @R3
    00000A58 5041                   MOV.L       @(4,R4),R0
    00000A5A 6503                   MOV         R0,R5
         Dodge.c   645                    float yDif = (float)playerY - projectiles[i].y;
    00000A5C D26F                   MOV.L       L778+22,R2 ; __itos
    00000A5E 420B                   JSR         @R2
    00000A60 60B2                   MOV.L       @R11,R0
    00000A62 6103                   MOV         R0,R1
    00000A64 D36E                   MOV.L       L778+26,R3 ; __subs
    00000A66 430B                   JSR         @R3
    00000A68 5042                   MOV.L       @(8,R4),R0
    00000A6A 6703                   MOV         R0,R7
         Dodge.c   646                    xDif = xDif * 0.01f * projectiles[i].trackingForce;
    00000A6C 5647                   MOV.L       @(28,R4),R6
    00000A6E 6153                   MOV         R5,R1
    00000A70 D26C                   MOV.L       L778+30,R2 ; __muls
    00000A72 420B                   JSR         @R2
    00000A74 6063                   MOV         R6,R0
    00000A76 D16C                   MOV.L       L778+34,R1 ; H'3C23D70A
    00000A78 D36A                   MOV.L       L778+30,R3 ; __muls
    00000A7A 430B                   JSR         @R3
    00000A7C 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A7E 6503                   MOV         R0,R5
         Dodge.c   647                    yDif = yDif * 0.01f * projectiles[i].trackingForce;
    00000A80 D268                   MOV.L       L778+30,R2 ; __muls
    00000A82 6173                   MOV         R7,R1
    00000A84 420B                   JSR         @R2
    00000A86 6063                   MOV         R6,R0
    00000A88 D167                   MOV.L       L778+34,R1 ; H'3C23D70A
    00000A8A D366                   MOV.L       L778+30,R3 ; __muls
    00000A8C 430B                   JSR         @R3
    00000A8E 0009                   NOP
         Dodge.c   648                    projectiles[i].xAcceleration = xDif;
    00000A90 1455                   MOV.L       R5,@(20,R4)
    00000A92 6603                   MOV         R0,R6
         Dodge.c   649                    projectiles[i].yAcceleration = yDif;
    00000A94 1466                   MOV.L       R6,@(24,R4)
    00000A96              L695:                             
         Dodge.c   650                }
         Dodge.c   651                // update velocity
         Dodge.c   652                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    00000A96 64D3                   MOV         R13,R4
    00000A98 D35F                   MOV.L       L778+18,R3 ; __adds
    00000A9A 4408                   SHLL2       R4
    00000A9C 4408                   SHLL2       R4
    00000A9E 4400                   SHLL        R4
    00000AA0 34CC                   ADD         R12,R4
    00000AA2 5045                   MOV.L       @(20,R4),R0
    00000AA4 430B                   JSR         @R3
    00000AA6 5143                   MOV.L       @(12,R4),R1
    00000AA8 1403                   MOV.L       R0,@(12,R4)
         Dodge.c   653                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    00000AAA 5046                   MOV.L       @(24,R4),R0
    00000AAC D25A                   MOV.L       L778+18,R2 ; __adds
    00000AAE 420B                   JSR         @R2
    00000AB0 5144                   MOV.L       @(16,R4),R1
    00000AB2 1404                   MOV.L       R0,@(16,R4)
    00000AB4              L694:                             
    00000AB4 7D01                   ADD         #1,R13
    00000AB6              L689:                             
    00000AB6 3D92                   CMP/HS      R9,R13
    00000AB8 8B88                   BF          L690
         Dodge.c   654            }
         Dodge.c   655        }
         Dodge.c   656    
         Dodge.c   657        // stop player from leaving map
         Dodge.c   658            if(playerX < 1)
    00000ABA E401                   MOV         #1,R4
    00000ABC 62A2                   MOV.L       @R10,R2
    00000ABE 3243                   CMP/GE      R4,R2
    00000AC0 8900                   BT          L696
         Dodge.c   659                playerX = 1;
    00000AC2 2A42                   MOV.L       R4,@R10
    00000AC4              L696:                             
         Dodge.c   660            if(playerX > 127)
    00000AC4 62A2                   MOV.L       @R10,R2
    00000AC6 E47F                   MOV         #127,R4
    00000AC8 3247                   CMP/GT      R4,R2
    00000ACA 8B00                   BF          L697




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   661                playerX = 127;
    00000ACC 2A42                   MOV.L       R4,@R10
    00000ACE              L697:                             
         Dodge.c   662            if(playerY < 2)
    00000ACE E402                   MOV         #2,R4
    00000AD0 62B2                   MOV.L       @R11,R2
    00000AD2 3243                   CMP/GE      R4,R2
    00000AD4 8900                   BT          L698
         Dodge.c   663                playerY = 2;
    00000AD6 2B42                   MOV.L       R4,@R11
    00000AD8              L698:                             
         Dodge.c   664            if(playerY > 62)
    00000AD8 62B2                   MOV.L       @R11,R2
    00000ADA E43E                   MOV         #62,R4
    00000ADC 3247                   CMP/GT      R4,R2
    00000ADE 8B00                   BF          L699
         Dodge.c   665                playerY = 62;
    00000AE0 2B42                   MOV.L       R4,@R11
    00000AE2              L699:                             
         Dodge.c   666    }
    00000AE2 7F08                   ADD         #8,R15
    00000AE4 4F26                   LDS.L       @R15+,PR
    00000AE6 68F6                   MOV.L       @R15+,R8
    00000AE8 69F6                   MOV.L       @R15+,R9
    00000AEA 6AF6                   MOV.L       @R15+,R10
    00000AEC 6BF6                   MOV.L       @R15+,R11
    00000AEE 6CF6                   MOV.L       @R15+,R12
    00000AF0 6DF6                   MOV.L       @R15+,R13
    00000AF2 000B                   RTS
    00000AF4 6EF6                   MOV.L       @R15+,R14
         Dodge.c   667    
         Dodge.c   668    void Controls()
    00000AF6              _Controls:                       ; function: Controls
                                                           ; frame size=8
    00000AF6 2FE6                   MOV.L       R14,@-R15
    00000AF8 4F22                   STS.L       PR,@-R15
         Dodge.c   669    {
         Dodge.c   670        if(!quit) {
    00000AFA D24C                   MOV.L       L778+38,R2 ; _quit
    00000AFC 6320                   MOV.B       @R2,R3
    00000AFE 2338                   TST         R3,R3
    00000B00 8B23                   BF          L700
         Dodge.c   671            if(IsKeyDown(KEY_CTRL_LEFT)) {
    00000B02 DE4B                   MOV.L       L778+42,R14; _playerX
    00000B04 BB1A                   BSR         _KeyDown
    00000B06 E426                   MOV         #38,R4
    00000B08 600C                   EXTU.B      R0,R0
    00000B0A 2008                   TST         R0,R0
    00000B0C 8D03                   BT/S        L701
         Dodge.c   672                playerX--;
         Dodge.c   673            }
         Dodge.c   674            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    00000B0E E41B                   MOV         #27,R4
    00000B10 63E2                   MOV.L       @R14,R3
    00000B12 73FF                   ADD         #-1,R3
    00000B14 2E32                   MOV.L       R3,@R14
    00000B16              L701:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B16 BB11                   BSR         _KeyDown
    00000B18 0009                   NOP
    00000B1A 600C                   EXTU.B      R0,R0
    00000B1C 2008                   TST         R0,R0
    00000B1E 8902                   BT          L702
         Dodge.c   675                playerX++;
    00000B20 62E2                   MOV.L       @R14,R2
    00000B22 7201                   ADD         #1,R2
    00000B24 2E22                   MOV.L       R2,@R14
    00000B26              L702:                             
         Dodge.c   676            }
         Dodge.c   677            if(IsKeyDown(KEY_CTRL_UP)) {
    00000B26 DE43                   MOV.L       L778+46,R14; _playerY
    00000B28 BB08                   BSR         _KeyDown
    00000B2A E41C                   MOV         #28,R4
    00000B2C 600C                   EXTU.B      R0,R0
    00000B2E 2008                   TST         R0,R0
    00000B30 8D03                   BT/S        L703
         Dodge.c   678                playerY--;
         Dodge.c   679            }
         Dodge.c   680            if(IsKeyDown(KEY_CTRL_DOWN)) {
    00000B32 E425                   MOV         #37,R4
    00000B34 63E2                   MOV.L       @R14,R3
    00000B36 73FF                   ADD         #-1,R3
    00000B38 2E32                   MOV.L       R3,@R14
    00000B3A              L703:                             
    00000B3A BAFF                   BSR         _KeyDown
    00000B3C 0009                   NOP
    00000B3E 600C                   EXTU.B      R0,R0
    00000B40 2008                   TST         R0,R0
    00000B42 8902                   BT          L700
         Dodge.c   681                playerY++;
    00000B44 62E2                   MOV.L       @R14,R2
    00000B46 7201                   ADD         #1,R2
    00000B48 2E22                   MOV.L       R2,@R14
    00000B4A              L700:                             
         Dodge.c   682            }
         Dodge.c   683        }
         Dodge.c   684        
         Dodge.c   685    }
    00000B4A 4F26                   LDS.L       @R15+,PR
    00000B4C 000B                   RTS
    00000B4E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   686    
         Dodge.c   687    int randomInt(int max) {
    00000B50              _randomInt:                      ; function: randomInt
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __muld, __divdr, __dtoi, __itod
    00000B50 4F22                   STS.L       PR,@-R15
    00000B52 7FF4                   ADD         #-12,R15
         Dodge.c   688        double normalized = (double)rand() / (double)RAND_MAX;
    00000B54 D338                   MOV.L       L778+50,R3 ; _rand
    00000B56 430B                   JSR         @R3
    00000B58 2F42                   MOV.L       R4,@R15
    00000B5A 7FF8                   ADD         #-8,R15
    00000B5C D237                   MOV.L       L778+54,R2 ; __itod




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B5E 420B                   JSR         @R2
    00000B60 2FF6                   MOV.L       R15,@-R15
    00000B62 E300                   MOV         #0,R3
    00000B64 D237                   MOV.L       L778+62,R2 ; __divdr
    00000B66 2F36                   MOV.L       R3,@-R15
    00000B68 D335                   MOV.L       L778+58,R3 ; H'40DFFFC0
    00000B6A 2F36                   MOV.L       R3,@-R15
    00000B6C 61F3                   MOV         R15,R1
    00000B6E 7114                   ADD         #20,R1
    00000B70 420B                   JSR         @R2
    00000B72 2F16                   MOV.L       R1,@-R15
         Dodge.c   689        return (int)(normalized * (double)max);
    00000B74 D331                   MOV.L       L778+54,R3 ; __itod
    00000B76 7FF8                   ADD         #-8,R15
    00000B78 50F2                   MOV.L       @(8,R15),R0
    00000B7A 7FF8                   ADD         #-8,R15
    00000B7C 430B                   JSR         @R3
    00000B7E 2FF6                   MOV.L       R15,@-R15
    00000B80 52F6                   MOV.L       @(24,R15),R2
    00000B82 2F26                   MOV.L       R2,@-R15
    00000B84 52F6                   MOV.L       @(24,R15),R2
    00000B86 2F26                   MOV.L       R2,@-R15
    00000B88 D12F                   MOV.L       L778+66,R1 ; __muld
    00000B8A 63F3                   MOV         R15,R3
    00000B8C 7310                   ADD         #16,R3
    00000B8E 410B                   JSR         @R1
    00000B90 2F36                   MOV.L       R3,@-R15
    00000B92 D22E                   MOV.L       L778+70,R2 ; __dtoi
    00000B94 420B                   JSR         @R2
    00000B96 0009                   NOP
         Dodge.c   690    }
    00000B98 7F0C                   ADD         #12,R15
    00000B9A 4F26                   LDS.L       @R15+,PR
    00000B9C 000B                   RTS
    00000B9E 0009                   NOP
         Dodge.c   691    
         Dodge.c   692    #pragma region attacks
         Dodge.c   693    
         Dodge.c   694    // next projectile in this attack
         Dodge.c   695    void SpawnNext() {
    00000BA0              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __modls, __adds, __subs, __muls, __negs, __itos
    00000BA0 2FE6                   MOV.L       R14,@-R15
    00000BA2 E505                   MOV         #5,R5
    00000BA4 2FD6                   MOV.L       R13,@-R15
    00000BA6 E40A                   MOV         #10,R4
    00000BA8 2FC6                   MOV.L       R12,@-R15
    00000BAA EE10                   MOV         #16,R14
    00000BAC 2FB6                   MOV.L       R11,@-R15
    00000BAE 6C53                   MOV         R5,R12
    00000BB0 2FA6                   MOV.L       R10,@-R15
    00000BB2 EB00                   MOV         #0,R11
    00000BB4 2F96                   MOV.L       R9,@-R15
    00000BB6 7C7B                   ADD         #123,R12
    00000BB8 DA26                   MOV.L       L778+78,R10; _currentAttack




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BBA 2F86                   MOV.L       R8,@-R15
    00000BBC 4F22                   STS.L       PR,@-R15
    00000BBE 7FFC                   ADD         #-4,R15
    00000BC0 D823                   MOV.L       L778+74,R8 ; _projectileIndex
    00000BC2 D91B                   MOV.L       L778+42,R9 ; _playerX
    00000BC4 60A2                   MOV.L       @R10,R0
    00000BC6 8800                   CMP/EQ      #0,R0
    00000BC8 8D18                   BT/S        L594
    00000BCA 6D82                   MOV.L       @R8,R13
    00000BCC 8801                   CMP/EQ      #1,R0
    00000BCE 8954                   BT          L595
    00000BD0 8802                   CMP/EQ      #2,R0
    00000BD2 8B01                   BF          L779
    00000BD4 A085                   BRA         L596
    00000BD6 0009                   NOP
    00000BD8              L779:                             
    00000BD8 8803                   CMP/EQ      #3,R0
    00000BDA 8B01                   BF          L780
    00000BDC A0BB                   BRA         L597
    00000BDE 0009                   NOP
    00000BE0              L780:                             
    00000BE0 8804                   CMP/EQ      #4,R0
    00000BE2 8B01                   BF          L781
    00000BE4 A0EE                   BRA         L598
    00000BE6 0009                   NOP
    00000BE8              L781:                             
    00000BE8 8805                   CMP/EQ      #5,R0
    00000BEA 8B01                   BF          L782
    00000BEC A108                   BRA         L599
    00000BEE 0009                   NOP
    00000BF0              L782:                             
    00000BF0 8806                   CMP/EQ      #6,R0
    00000BF2 8B01                   BF          L783
    00000BF4 A13C                   BRA         L600
    00000BF6 0009                   NOP
    00000BF8              L783:                             
    00000BF8 A18E                   BRA         L601
    00000BFA 0009                   NOP
    00000BFC              L594:                            ; case label 
         Dodge.c   696        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   697        #pragma region a whole bunch of variable declarations
         Dodge.c   698        int mod;
         Dodge.c   699        int mod2;
         Dodge.c   700        int xPos;
         Dodge.c   701        int yPos;
         Dodge.c   702        int direction;
         Dodge.c   703        float directionX;
         Dodge.c   704        float directionY;
         Dodge.c   705        int i;
         Dodge.c   706        int j;
         Dodge.c   707        int xToCenter;
         Dodge.c   708        int yToCenter;
         Dodge.c   709        int radius;
         Dodge.c   710        #pragma endregion
         Dodge.c   711        switch (currentAttack)
         Dodge.c   712        {
         Dodge.c   713            case 0: // horizontally from either side, accelerating




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   714                mod = projectileIndex % 2;
    00000BFC 60D3                   MOV         R13,R0
    00000BFE 4011                   CMP/PZ      R0
    00000C00 8B2A                   BF          L707
    00000C02 A02E                   BRA         L708
    00000C04 C901                   AND         #1,R0
    00000C06              L778:                             
    00000C06 0000                   .DATA.W     0
    00000C08 <00000000>             .DATA.L     __lts
    00000C0C 43000000               .DATA.L     H'43000000
    00000C10 <00000000>             .DATA.L     __gts
    00000C14 42800000               .DATA.L     H'42800000
    00000C18 <00000000>             .DATA.L     __adds
    00000C1C <00000000>             .DATA.L     __itos
    00000C20 <00000000>             .DATA.L     __subs
    00000C24 <00000000>             .DATA.L     __muls
    00000C28 3C23D70A               .DATA.L     H'3C23D70A
    00000C2C <00000000>             .DATA.L     _quit
    00000C30 <00000000>             .DATA.L     _playerX
    00000C34 <00000000>             .DATA.L     _playerY
    00000C38 <00000000>             .DATA.L     _rand
    00000C3C <00000000>             .DATA.L     __itod
    00000C40 40DFFFC0               .DATA.L     H'40DFFFC0
    00000C44 <00000000>             .DATA.L     __divdr
    00000C48 <00000000>             .DATA.L     __muld
    00000C4C <00000000>             .DATA.L     __dtoi
    00000C50 <00000000>             .DATA.L     _projectileIndex
    00000C54 <00000000>             .DATA.L     _currentAttack
    00000C58              L707:                             
    00000C58 6007                   NOT         R0,R0
    00000C5A 7001                   ADD         #1,R0
    00000C5C C901                   AND         #1,R0
    00000C5E 6007                   NOT         R0,R0
    00000C60 7001                   ADD         #1,R0
    00000C62              L708:                             
    00000C62 6403                   MOV         R0,R4
         Dodge.c   715                xPos = mod == 0 ? 1 : 128 - 1;
    00000C64 2448                   TST         R4,R4
    00000C66 8B01                   BF          L709
    00000C68 A001                   BRA         L710
    00000C6A EC01                   MOV         #1,R12
    00000C6C              L709:                             
    00000C6C EC7F                   MOV         #127,R12
    00000C6E              L710:                             
         Dodge.c   716                direction = mod == 0 ? 1 : -1;
    00000C6E 2448                   TST         R4,R4
    00000C70 8B01                   BF          L784
    00000C72 A163                   BRA         L761
    00000C74 0009                   NOP
    00000C76              L784:                             
    00000C76 A164                   BRA         L591
    00000C78 EEFF                   MOV         #-1,R14
    00000C7A              L595:                            ; case label 
         Dodge.c   717                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, direction * 0.1f, 0, 0);
         Dodge.c   718                break;
         Dodge.c   719            case 1: // circle, constant speed
         Dodge.c   720                directionX = (((projectileIndex + 8) % 16) - 8);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C7A 60D3                   MOV         R13,R0
    00000C7C 7008                   ADD         #8,R0
    00000C7E 4011                   CMP/PZ      R0
    00000C80 8B01                   BF          L713
    00000C82 A005                   BRA         L714
    00000C84 C90F                   AND         #15,R0
    00000C86              L713:                             
    00000C86 6007                   NOT         R0,R0
    00000C88 7001                   ADD         #1,R0
    00000C8A C90F                   AND         #15,R0
    00000C8C 6007                   NOT         R0,R0
    00000C8E 7001                   ADD         #1,R0
    00000C90              L714:                             
    00000C90 D27C                   MOV.L       L785+2,R2  ; __itos
    00000C92 420B                   JSR         @R2
    00000C94 70F8                   ADD         #-8,R0
    00000C96 6C03                   MOV         R0,R12
         Dodge.c   721                directionY = ((projectileIndex % 16) - 8);
    00000C98 60D3                   MOV         R13,R0
    00000C9A 4011                   CMP/PZ      R0
    00000C9C 8B01                   BF          L715
    00000C9E A005                   BRA         L716
    00000CA0 C90F                   AND         #15,R0
    00000CA2              L715:                             
    00000CA2 6007                   NOT         R0,R0
    00000CA4 7001                   ADD         #1,R0
    00000CA6 C90F                   AND         #15,R0
    00000CA8 6007                   NOT         R0,R0
    00000CAA 7001                   ADD         #1,R0
    00000CAC              L716:                             
    00000CAC D275                   MOV.L       L785+2,R2  ; __itos
    00000CAE 420B                   JSR         @R2
    00000CB0 70F8                   ADD         #-8,R0
    00000CB2 6E03                   MOV         R0,R14
         Dodge.c   722                SpawnProjectile(64, 32, directionX, directionY, 0, 0, 0);
    00000CB4 D574                   MOV.L       L785+6,R5  ; H'42000000
    00000CB6 E300                   MOV         #0,R3
    00000CB8 D474                   MOV.L       L785+10,R4 ; H'42800000
    00000CBA 67E3                   MOV         R14,R7
    00000CBC 2F36                   MOV.L       R3,@-R15
    00000CBE 2F36                   MOV.L       R3,@-R15
    00000CC0 2F36                   MOV.L       R3,@-R15
    00000CC2 BCE3                   BSR         _SpawnProjectile
    00000CC4 66C3                   MOV         R12,R6
         Dodge.c   723                SpawnProjectile(64, 32, -directionX, directionY, 0, 0, 0);
    00000CC6 E300                   MOV         #0,R3
    00000CC8 D271                   MOV.L       L785+14,R2 ; __negs
    00000CCA 67E3                   MOV         R14,R7
    00000CCC 2F36                   MOV.L       R3,@-R15
    00000CCE 2F36                   MOV.L       R3,@-R15
    00000CD0 2F36                   MOV.L       R3,@-R15
    00000CD2 420B                   JSR         @R2
    00000CD4 60C3                   MOV         R12,R0
    00000CD6 D56C                   MOV.L       L785+6,R5  ; H'42000000
    00000CD8 D46C                   MOV.L       L785+10,R4 ; H'42800000
    00000CDA BCD7                   BSR         _SpawnProjectile
    00000CDC 6603                   MOV         R0,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   724                break;
    00000CDE A149                   BRA         L706
    00000CE0 7F18                   ADD         #24,R15
    00000CE2              L596:                            ; case label 
         Dodge.c   725            case 2: // vertically from either side, constant speed
         Dodge.c   726                if(projectileIndex % 5 == 0) {
    00000CE2 61D3                   MOV         R13,R1
    00000CE4 D26B                   MOV.L       L785+18,R2 ; __modls
    00000CE6 420B                   JSR         @R2
    00000CE8 6053                   MOV         R5,R0
    00000CEA 2008                   TST         R0,R0
    00000CEC 8901                   BT          L786
    00000CEE A141                   BRA         L706
    00000CF0 0009                   NOP
    00000CF2              L786:                             
         Dodge.c   727                    if(projectileIndex % 10 == 0) {
    00000CF2 61D3                   MOV         R13,R1
    00000CF4 D367                   MOV.L       L785+18,R3 ; __modls
    00000CF6 430B                   JSR         @R3
    00000CF8 6043                   MOV         R4,R0
    00000CFA 2008                   TST         R0,R0
    00000CFC 8B15                   BF          L718
         Dodge.c   728                        for (i = 0; i < 16; i++)
    00000CFE 6CB3                   MOV         R11,R12
    00000D00 A00F                   BRA         L719
    00000D02 6DB3                   MOV         R11,R13
    00000D04              L720:                             
         Dodge.c   729                        {
         Dodge.c   730                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0, 0);
    00000D04 D764                   MOV.L       L785+22,R7 ; H'40000000
    00000D06 E200                   MOV         #0,R2
    00000D08 D35E                   MOV.L       L785+2,R3  ; __itos
    00000D0A 6623                   MOV         R2,R6
    00000D0C 2F26                   MOV.L       R2,@-R15
    00000D0E 6523                   MOV         R2,R5
    00000D10 2F26                   MOV.L       R2,@-R15
    00000D12 2F26                   MOV.L       R2,@-R15
    00000D14 430B                   JSR         @R3
    00000D16 60D3                   MOV         R13,R0
    00000D18 BCB8                   BSR         _SpawnProjectile
    00000D1A 6403                   MOV         R0,R4
    00000D1C 7F0C                   ADD         #12,R15
    00000D1E 7C01                   ADD         #1,R12
    00000D20 7D08                   ADD         #8,R13
    00000D22              L719:                             
    00000D22 3CE3                   CMP/GE      R14,R12
    00000D24 8BEE                   BF          L720
    00000D26 A125                   BRA         L706
    00000D28 0009                   NOP
    00000D2A              L718:                             
         Dodge.c   731                        }
         Dodge.c   732                    }
         Dodge.c   733                    else {
         Dodge.c   734                        for (i = 0; i < 16; i++)
    00000D2A 6CB3                   MOV         R11,R12
    00000D2C A00F                   BRA         L722
    00000D2E ED04                   MOV         #4,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D30              L723:                             
         Dodge.c   735                        {
         Dodge.c   736                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0, 0);
    00000D30 D75A                   MOV.L       L785+26,R7 ; H'C0000000
    00000D32 E200                   MOV         #0,R2
    00000D34 D555                   MOV.L       L785+10,R5 ; H'42800000
    00000D36 6623                   MOV         R2,R6
    00000D38 D352                   MOV.L       L785+2,R3  ; __itos
    00000D3A 2F26                   MOV.L       R2,@-R15
    00000D3C 2F26                   MOV.L       R2,@-R15
    00000D3E 2F26                   MOV.L       R2,@-R15
    00000D40 430B                   JSR         @R3
    00000D42 60D3                   MOV         R13,R0
    00000D44 BCA2                   BSR         _SpawnProjectile
    00000D46 6403                   MOV         R0,R4
    00000D48 7F0C                   ADD         #12,R15
    00000D4A 7C01                   ADD         #1,R12
    00000D4C 7D08                   ADD         #8,R13
    00000D4E              L722:                             
    00000D4E 3CE3                   CMP/GE      R14,R12
    00000D50 8BEE                   BF          L723
         Dodge.c   737                        }
         Dodge.c   738                    }
         Dodge.c   739                    
         Dodge.c   740                }
         Dodge.c   741                break;
    00000D52 A10F                   BRA         L706
    00000D54 0009                   NOP
    00000D56              L597:                            ; case label 
         Dodge.c   742            case 3: // random directions, accelerate back to center
         Dodge.c   743                for (i = 0; i < 24; i++)
    00000D56 A031                   BRA         L724
    00000D58 E918                   MOV         #24,R9
    00000D5A              L725:                             
         Dodge.c   744                {
         Dodge.c   745                    xPos = randomInt(128);
    00000D5A BEF9                   BSR         _randomInt
    00000D5C 64C3                   MOV         R12,R4
    00000D5E 6E03                   MOV         R0,R14
         Dodge.c   746                    yPos = randomInt(64);
    00000D60 BEF6                   BSR         _randomInt
    00000D62 E440                   MOV         #64,R4
         Dodge.c   747                    directionX = (xPos - 64) * 0.01f  * 8;
    00000D64 D347                   MOV.L       L785+2,R3  ; __itos
    00000D66 6403                   MOV         R0,R4
    00000D68 60E3                   MOV         R14,R0
    00000D6A 430B                   JSR         @R3
    00000D6C 70C0                   ADD         #-64,R0
    00000D6E D14C                   MOV.L       L785+30,R1 ; H'3DA3D70A
    00000D70 D24C                   MOV.L       L785+34,R2 ; __muls
    00000D72 420B                   JSR         @R2
    00000D74 0009                   NOP
    00000D76 6E03                   MOV         R0,R14
         Dodge.c   748                    directionY = (yPos - 32) * 0.02f * 8;
    00000D78 D342                   MOV.L       L785+2,R3  ; __itos
    00000D7A 6043                   MOV         R4,R0
    00000D7C 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D7E 70E0                   ADD         #-32,R0
    00000D80 D149                   MOV.L       L785+38,R1 ; H'3E23D70A
    00000D82 D248                   MOV.L       L785+34,R2 ; __muls
    00000D84 420B                   JSR         @R2
    00000D86 0009                   NOP
         Dodge.c   749                    SpawnProjectile(64, 32, directionX, directionY, -directionX * 0.04f, -directionY * 0.04f, 
                         +0);
    00000D88 D246                   MOV.L       L785+34,R2 ; __muls
    00000D8A 6D03                   MOV         R0,R13
    00000D8C D047                   MOV.L       L785+42,R0 ; H'3D23D70A
    00000D8E E300                   MOV         #0,R3
    00000D90 2F36                   MOV.L       R3,@-R15
    00000D92 420B                   JSR         @R2
    00000D94 61D3                   MOV         R13,R1
    00000D96 D23E                   MOV.L       L785+14,R2 ; __negs
    00000D98 420B                   JSR         @R2
    00000D9A 0009                   NOP
    00000D9C 2F06                   MOV.L       R0,@-R15
    00000D9E D043                   MOV.L       L785+42,R0 ; H'3D23D70A
    00000DA0 D240                   MOV.L       L785+34,R2 ; __muls
    00000DA2 420B                   JSR         @R2
    00000DA4 61E3                   MOV         R14,R1
    00000DA6 D23A                   MOV.L       L785+14,R2 ; __negs
    00000DA8 420B                   JSR         @R2
    00000DAA 0009                   NOP
    00000DAC 2F06                   MOV.L       R0,@-R15
    00000DAE 67D3                   MOV         R13,R7
    00000DB0 D535                   MOV.L       L785+6,R5  ; H'42000000
    00000DB2 D436                   MOV.L       L785+10,R4 ; H'42800000
    00000DB4 BC6A                   BSR         _SpawnProjectile
    00000DB6 66E3                   MOV         R14,R6
    00000DB8 7F0C                   ADD         #12,R15
    00000DBA 79FF                   ADD         #-1,R9
    00000DBC              L724:                             
    00000DBC 2998                   TST         R9,R9
    00000DBE 8BCC                   BF          L725
         Dodge.c   750                }
         Dodge.c   751                
         Dodge.c   752                break;
    00000DC0 A0D8                   BRA         L706
    00000DC2 0009                   NOP
    00000DC4              L598:                            ; case label 
         Dodge.c   753            case 4: // spawn a bunch of tracking projectiles around the screen
         Dodge.c   754                for (i = 0; i < 8; i++)
    00000DC4 A018                   BRA         L726
    00000DC6 EE08                   MOV         #8,R14
    00000DC8              L727:                             
         Dodge.c   755                {
         Dodge.c   756                    xPos = randomInt(128);
    00000DC8 BEC2                   BSR         _randomInt
    00000DCA 64C3                   MOV         R12,R4
    00000DCC 6D03                   MOV         R0,R13
         Dodge.c   757                    yPos = randomInt(64);
    00000DCE BEBF                   BSR         _randomInt
    00000DD0 E440                   MOV         #64,R4
    00000DD2 6903                   MOV         R0,R9
         Dodge.c   758                    SpawnProjectile(xPos, yPos, 0, 0, 0, 0, 0.3);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DD4 D236                   MOV.L       L785+46,R2 ; H'3E99999A
    00000DD6 E300                   MOV         #0,R3
    00000DD8 D12A                   MOV.L       L785+2,R1  ; __itos
    00000DDA 6733                   MOV         R3,R7
    00000DDC 2F26                   MOV.L       R2,@-R15
    00000DDE 6633                   MOV         R3,R6
    00000DE0 2F36                   MOV.L       R3,@-R15
    00000DE2 2F36                   MOV.L       R3,@-R15
    00000DE4 410B                   JSR         @R1
    00000DE6 6093                   MOV         R9,R0
    00000DE8 D126                   MOV.L       L785+2,R1  ; __itos
    00000DEA 6503                   MOV         R0,R5
    00000DEC 410B                   JSR         @R1
    00000DEE 60D3                   MOV         R13,R0
    00000DF0 BC4C                   BSR         _SpawnProjectile
    00000DF2 6403                   MOV         R0,R4
    00000DF4 7F0C                   ADD         #12,R15
    00000DF6 7EFF                   ADD         #-1,R14
    00000DF8              L726:                             
    00000DF8 2EE8                   TST         R14,R14
    00000DFA 8BE5                   BF          L727
         Dodge.c   759                }
         Dodge.c   760                
         Dodge.c   761                break;
    00000DFC A0BA                   BRA         L706
    00000DFE 0009                   NOP
    00000E00              L599:                            ; case label 
         Dodge.c   762            case 5: // continuously spawn projectiles with an initial direction towards the player
         Dodge.c   763                if(projectileIndex % 5 == 0)
    00000E00 D324                   MOV.L       L785+18,R3 ; __modls
    00000E02 61D3                   MOV         R13,R1
    00000E04 430B                   JSR         @R3
    00000E06 6053                   MOV         R5,R0
    00000E08 2008                   TST         R0,R0
    00000E0A 8901                   BT          L787
    00000E0C A0B2                   BRA         L706
    00000E0E 0009                   NOP
    00000E10              L787:                             
         Dodge.c   764                {
         Dodge.c   765                    xPos = randomInt(128);
    00000E10 BE9E                   BSR         _randomInt
    00000E12 64C3                   MOV         R12,R4
    00000E14 2F02                   MOV.L       R0,@R15
         Dodge.c   766                    yPos = randomInt(64);
    00000E16 BE9B                   BSR         _randomInt
    00000E18 E440                   MOV         #64,R4
    00000E1A 6603                   MOV         R0,R6
         Dodge.c   767                    directionX = ((float)playerX - xPos) * 0.01f;
    00000E1C D219                   MOV.L       L785+2,R2  ; __itos
    00000E1E 420B                   JSR         @R2
    00000E20 6092                   MOV.L       @R9,R0
    00000E22 6203                   MOV         R0,R2
    00000E24 D317                   MOV.L       L785+2,R3  ; __itos
    00000E26 430B                   JSR         @R3
    00000E28 60F2                   MOV.L       @R15,R0
    00000E2A 6403                   MOV         R0,R4
    00000E2C D321                   MOV.L       L785+50,R3 ; __subs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E2E 430B                   JSR         @R3
    00000E30 6123                   MOV         R2,R1
    00000E32 D121                   MOV.L       L785+54,R1 ; H'3C23D70A
    00000E34 D21B                   MOV.L       L785+34,R2 ; __muls
    00000E36 420B                   JSR         @R2
    00000E38 0009                   NOP
    00000E3A 6703                   MOV         R0,R7
         Dodge.c   768                    directionY = ((float)playerY - yPos) * 0.01f;
    00000E3C D21F                   MOV.L       L785+58,R2 ; _playerY
    00000E3E D311                   MOV.L       L785+2,R3  ; __itos
    00000E40 430B                   JSR         @R3
    00000E42 6022                   MOV.L       @R2,R0
    00000E44 D10F                   MOV.L       L785+2,R1  ; __itos
    00000E46 6303                   MOV         R0,R3
    00000E48 410B                   JSR         @R1
    00000E4A 6063                   MOV         R6,R0
    00000E4C 6133                   MOV         R3,R1
    00000E4E D319                   MOV.L       L785+50,R3 ; __subs
    00000E50 430B                   JSR         @R3
    00000E52 6503                   MOV         R0,R5
    00000E54 D118                   MOV.L       L785+54,R1 ; H'3C23D70A
    00000E56 D313                   MOV.L       L785+34,R3 ; __muls
    00000E58 430B                   JSR         @R3
    00000E5A 0009                   NOP
    00000E5C 6603                   MOV         R0,R6
         Dodge.c   769                    SpawnProjectile(xPos, yPos, 0, 0, directionX, directionY, 0);
    00000E5E E100                   MOV         #0,R1
    00000E60 2F16                   MOV.L       R1,@-R15
    00000E62 2F66                   MOV.L       R6,@-R15
    00000E64 2F76                   MOV.L       R7,@-R15
    00000E66 6713                   MOV         R1,R7
    00000E68 BC10                   BSR         _SpawnProjectile
    00000E6A 6613                   MOV         R1,R6
         Dodge.c   770                }
         Dodge.c   771                
         Dodge.c   772                break;
    00000E6C A082                   BRA         L706
    00000E6E 7F0C                   ADD         #12,R15
    00000E70              L600:                            ; case label 
         Dodge.c   773            case 6: // continuously spawn projectiles with an initial direction towards the player
         Dodge.c   774                if(projectileIndex % 10 == 0) {
    00000E70 D308                   MOV.L       L785+18,R3 ; __modls
    00000E72 61D3                   MOV         R13,R1
    00000E74 430B                   JSR         @R3
    00000E76 6043                   MOV         R4,R0
    00000E78 2008                   TST         R0,R0
    00000E7A 8B7B                   BF          L706
         Dodge.c   775                    for (i = 0; i < 16; i++)
    00000E7C 6CB3                   MOV         R11,R12
    00000E7E A047                   BRA         L730
    00000E80 6DB3                   MOV         R11,R13
    00000E82              L785:                             
    00000E82 0000                   .DATA.W     0
    00000E84 <00000000>             .DATA.L     __itos
    00000E88 42000000               .DATA.L     H'42000000
    00000E8C 42800000               .DATA.L     H'42800000
    00000E90 <00000000>             .DATA.L     __negs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E94 <00000000>             .DATA.L     __modls
    00000E98 40000000               .DATA.L     H'40000000
    00000E9C C0000000               .DATA.L     H'C0000000
    00000EA0 3DA3D70A               .DATA.L     H'3DA3D70A
    00000EA4 <00000000>             .DATA.L     __muls
    00000EA8 3E23D70A               .DATA.L     H'3E23D70A
    00000EAC 3D23D70A               .DATA.L     H'3D23D70A
    00000EB0 3E99999A               .DATA.L     H'3E99999A
    00000EB4 <00000000>             .DATA.L     __subs
    00000EB8 3C23D70A               .DATA.L     H'3C23D70A
    00000EBC <00000000>             .DATA.L     _playerY
    00000EC0              L731:                             
         Dodge.c   776                    {
         Dodge.c   777                        xPos = i * 8;
         Dodge.c   778                        yPos = 1;
         Dodge.c   779                        directionX = ((float)playerX - xPos) * 0.005f;
    00000EC0 D23B                   MOV.L       L788,R2    ; __itos
    00000EC2 65D3                   MOV         R13,R5
    00000EC4 420B                   JSR         @R2
    00000EC6 6092                   MOV.L       @R9,R0
    00000EC8 D339                   MOV.L       L788,R3    ; __itos
    00000ECA 6103                   MOV         R0,R1
    00000ECC 430B                   JSR         @R3
    00000ECE 6053                   MOV         R5,R0
    00000ED0 D338                   MOV.L       L788+4,R3  ; __subs
    00000ED2 430B                   JSR         @R3
    00000ED4 6403                   MOV         R0,R4
    00000ED6 D138                   MOV.L       L788+8,R1  ; H'3BA3D70A
    00000ED8 D238                   MOV.L       L788+12,R2 ; __muls
    00000EDA 420B                   JSR         @R2
    00000EDC 0009                   NOP
    00000EDE 6603                   MOV         R0,R6
         Dodge.c   780                        directionY = ((float)playerY - yPos) * 0.005f;
    00000EE0 D237                   MOV.L       L788+16,R2 ; _playerY
    00000EE2 D333                   MOV.L       L788,R3    ; __itos
    00000EE4 430B                   JSR         @R3
    00000EE6 6022                   MOV.L       @R2,R0
    00000EE8 D136                   MOV.L       L788+20,R1 ; H'BF800000
    00000EEA D337                   MOV.L       L788+24,R3 ; __adds
    00000EEC 430B                   JSR         @R3
    00000EEE 0009                   NOP
    00000EF0 D131                   MOV.L       L788+8,R1  ; H'3BA3D70A
    00000EF2 D332                   MOV.L       L788+12,R3 ; __muls
    00000EF4 430B                   JSR         @R3
    00000EF6 0009                   NOP
    00000EF8 6503                   MOV         R0,R5
         Dodge.c   781                        SpawnProjectile(xPos, yPos, 0, 0, directionX, directionY, 0);
    00000EFA E100                   MOV         #0,R1
    00000EFC 2F16                   MOV.L       R1,@-R15
    00000EFE 6713                   MOV         R1,R7
    00000F00 2F56                   MOV.L       R5,@-R15
    00000F02 2F66                   MOV.L       R6,@-R15
    00000F04 D531                   MOV.L       L788+28,R5 ; H'3F800000
    00000F06 BBC1                   BSR         _SpawnProjectile
    00000F08 6613                   MOV         R1,R6
    00000F0A 7F0C                   ADD         #12,R15
    00000F0C 7C01                   ADD         #1,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F0E 7D08                   ADD         #8,R13
    00000F10              L730:                             
    00000F10 3CE3                   CMP/GE      R14,R12
    00000F12 8BD5                   BF          L731
         Dodge.c   782                    }
         Dodge.c   783                    
         Dodge.c   784                }
         Dodge.c   785                
         Dodge.c   786                break;
    00000F14 A02E                   BRA         L706
    00000F16 0009                   NOP
    00000F18              L601:                            ; default label 
         Dodge.c   787            default:
         Dodge.c   788                mod2 = projectileIndex % 2;
    00000F18 60D3                   MOV         R13,R0
    00000F1A 4011                   CMP/PZ      R0
    00000F1C 8B01                   BF          L732
    00000F1E A005                   BRA         L733
    00000F20 C901                   AND         #1,R0
    00000F22              L732:                             
    00000F22 6007                   NOT         R0,R0
    00000F24 7001                   ADD         #1,R0
    00000F26 C901                   AND         #1,R0
    00000F28 6007                   NOT         R0,R0
    00000F2A 7001                   ADD         #1,R0
    00000F2C              L733:                             
    00000F2C 6403                   MOV         R0,R4
         Dodge.c   789                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000F2E 2448                   TST         R4,R4
    00000F30 8B01                   BF          L734
    00000F32 A001                   BRA         L735
    00000F34 EC01                   MOV         #1,R12
    00000F36              L734:                             
    00000F36 EC7F                   MOV         #127,R12
    00000F38              L735:                             
         Dodge.c   790                direction = mod2 == 0 ? 1 : -1;
    00000F38 2448                   TST         R4,R4
    00000F3A 8B01                   BF          L736
    00000F3C              L761:                             
    00000F3C A001                   BRA         L591
    00000F3E EE01                   MOV         #1,R14
    00000F40              L736:                             
    00000F40 EEFF                   MOV         #-1,R14
    00000F42              L591:
         Dodge.c   791                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0, 0);
    00000F42 E300                   MOV         #0,R3
    00000F44 D21A                   MOV.L       L788,R2    ; __itos
    00000F46 2F36                   MOV.L       R3,@-R15
    00000F48 2F36                   MOV.L       R3,@-R15
    00000F4A 420B                   JSR         @R2
    00000F4C 60E3                   MOV         R14,R0
    00000F4E D120                   MOV.L       L788+32,R1 ; H'3DCCCCCD
    00000F50 D21A                   MOV.L       L788+12,R2 ; __muls
    00000F52 420B                   JSR         @R2
    00000F54 0009                   NOP
    00000F56 6733                   MOV         R3,R7
    00000F58 D215                   MOV.L       L788,R2    ; __itos




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F5A 6633                   MOV         R3,R6
    00000F5C 2F06                   MOV.L       R0,@-R15
    00000F5E 60D3                   MOV         R13,R0
    00000F60 7001                   ADD         #1,R0
    00000F62 420B                   JSR         @R2
    00000F64 4008                   SHLL2       R0
    00000F66 6503                   MOV         R0,R5
    00000F68 D111                   MOV.L       L788,R1    ; __itos
    00000F6A 410B                   JSR         @R1
    00000F6C 60C3                   MOV         R12,R0
    00000F6E BB8D                   BSR         _SpawnProjectile
    00000F70 6403                   MOV         R0,R4
    00000F72 7F0C                   ADD         #12,R15
         Dodge.c   792                break;
    00000F74              L706:                             
         Dodge.c   793        }
         Dodge.c   794    
         Dodge.c   795        projectileIndex++;
    00000F74 6282                   MOV.L       @R8,R2
    00000F76 7201                   ADD         #1,R2
    00000F78 2822                   MOV.L       R2,@R8
         Dodge.c   796        if(projectileIndex > maxProjectiles) {
    00000F7A 6123                   MOV         R2,R1
    00000F7C D015                   MOV.L       L788+36,R0 ; _maxProjectiles
    00000F7E 6302                   MOV.L       @R0,R3
    00000F80 3137                   CMP/GT      R3,R1
    00000F82 8B0B                   BF          L738
         Dodge.c   797            KillTimer(ID_USER_TIMER3); // stop this attack
    00000F84 D114                   MOV.L       L788+40,R1 ; _KillTimer
    00000F86 410B                   JSR         @R1
    00000F88 E403                   MOV         #3,R4
         Dodge.c   798            currentAttack++;
    00000F8A 63A2                   MOV.L       @R10,R3
         Dodge.c   799            if(currentAttack >= attacksTotal)
    00000F8C D013                   MOV.L       L788+44,R0 ; _attacksTotal
    00000F8E 7301                   ADD         #1,R3
    00000F90 2A32                   MOV.L       R3,@R10
    00000F92 6133                   MOV         R3,R1
    00000F94 6202                   MOV.L       @R0,R2
    00000F96 3123                   CMP/GE      R2,R1
    00000F98 8B00                   BF          L738
         Dodge.c   800                currentAttack = 0;
    00000F9A 2AB2                   MOV.L       R11,@R10
    00000F9C              L738:                             
         Dodge.c   801        }
         Dodge.c   802    }
    00000F9C 7F04                   ADD         #4,R15
    00000F9E 4F26                   LDS.L       @R15+,PR
    00000FA0 68F6                   MOV.L       @R15+,R8
    00000FA2 69F6                   MOV.L       @R15+,R9
    00000FA4 6AF6                   MOV.L       @R15+,R10
    00000FA6 6BF6                   MOV.L       @R15+,R11
    00000FA8 6CF6                   MOV.L       @R15+,R12
    00000FAA 6DF6                   MOV.L       @R15+,R13
    00000FAC 000B                   RTS
    00000FAE 6EF6                   MOV.L       @R15+,R14
    00000FB0              L788:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FB0 <00000000>             .DATA.L     __itos
    00000FB4 <00000000>             .DATA.L     __subs
    00000FB8 3BA3D70A               .DATA.L     H'3BA3D70A
    00000FBC <00000000>             .DATA.L     __muls
    00000FC0 <00000000>             .DATA.L     _playerY
    00000FC4 BF800000               .DATA.L     H'BF800000
    00000FC8 <00000000>             .DATA.L     __adds
    00000FCC 3F800000               .DATA.L     H'3F800000
    00000FD0 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000FD4 <00000000>             .DATA.L     _maxProjectiles
    00000FD8 <00000000>             .DATA.L     _KillTimer
    00000FDC <00000000>             .DATA.L     _attacksTotal
         Dodge.c   803    // the next "attack"
         Dodge.c   804    void NextProjectiles() {
    00000FE0              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   805        size_t i;
         Dodge.c   806            currentAttack = 6; // debug only, remove
    00000FE0 D232                   MOV.L       L789+4,R2  ; _currentAttack
         Dodge.c   807        projectileIndex = 0;
    00000FE2 E100                   MOV         #0,R1
    00000FE4 D032                   MOV.L       L789+8,R0  ; _projectileIndex
    00000FE6 E306                   MOV         #6,R3
    00000FE8 D732                   MOV.L       L789+12,R7 ; _projectiles
    00000FEA 2232                   MOV.L       R3,@R2
    00000FEC 2012                   MOV.L       R1,@R0
    00000FEE 6473                   MOV         R7,R4
    00000FF0 D531                   MOV.L       L789+16,R5 ; _false
    00000FF2 9659                   MOV.W       L789,R6    ; H'1000
    00000FF4 367C                   ADD         R7,R6
         Dodge.c   808    
         Dodge.c   809        for (i = 0; i < 128; i++)
    00000FF6              L740:                             
         Dodge.c   810        {
         Dodge.c   811            projectiles[i].enabled = false;
    00000FF6 6350                   MOV.B       @R5,R3
    00000FF8 2430                   MOV.B       R3,@R4
    00000FFA 7420                   ADD         #32,R4
    00000FFC 3462                   CMP/HS      R6,R4
    00000FFE 8BFA                   BF          L740
         Dodge.c   812        }
         Dodge.c   813        
         Dodge.c   814    
         Dodge.c   815        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues
         Dodge.c   816        switch (currentAttack)
    00001000 D42E                   MOV.L       L789+20,R4 ; _maxProjectiles
    00001002 E610                   MOV         #16,R6
    00001004 D329                   MOV.L       L789+4,R3  ; _currentAttack
    00001006 6032                   MOV.L       @R3,R0
    00001008 8800                   CMP/EQ      #0,R0
    0000100A 8D1A                   BT/S        L765
    0000100C E501                   MOV         #1,R5
    0000100E 8801                   CMP/EQ      #1,R0
    00001010 890B                   BT          L603
    00001012 8802                   CMP/EQ      #2,R0
    00001014 890B                   BT          L604
    00001016 8803                   CMP/EQ      #3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001018 890B                   BT          L762
    0000101A 8804                   CMP/EQ      #4,R0
    0000101C 8909                   BT          L606
    0000101E 8805                   CMP/EQ      #5,R0
    00001020 8909                   BT          L607
    00001022 8806                   CMP/EQ      #6,R0
    00001024 890A                   BT          L608
    00001026 A00C                   BRA         L765
    00001028 0009                   NOP
    0000102A              L603:                            ; case label 
         Dodge.c   817        {
         Dodge.c   818            case 0:
         Dodge.c   819                maxProjectiles = 16;
         Dodge.c   820                break;
         Dodge.c   821            case 1:
         Dodge.c   822                maxProjectiles = 32;
         Dodge.c   823                break;
    0000102A A005                   BRA         L763
    0000102C E120                   MOV         #32,R1
    0000102E              L604:                            ; case label 
         Dodge.c   824            case 2:
         Dodge.c   825                maxProjectiles = 15;
         Dodge.c   826                break;
    0000102E A006                   BRA         L764
    00001030 E00F                   MOV         #15,R0
    00001032              L606:                            ; case label 
         Dodge.c   827            case 3:
         Dodge.c   828                maxProjectiles = 1;
         Dodge.c   829                break;
         Dodge.c   830            case 4:
         Dodge.c   831                maxProjectiles = 1;
         Dodge.c   832                break;
    00001032              L762:                             
    00001032 A007                   BRA         L741
    00001034 2452                   MOV.L       R5,@R4
    00001036              L607:                            ; case label 
         Dodge.c   833            case 5:
         Dodge.c   834                maxProjectiles = 35;
    00001036 E123                   MOV         #35,R1
         Dodge.c   835                break;
    00001038              L763:                             
    00001038 A004                   BRA         L741
    0000103A 2412                   MOV.L       R1,@R4
    0000103C              L608:                            ; case label 
         Dodge.c   836            case 6:
         Dodge.c   837                maxProjectiles = 30;
    0000103C E01E                   MOV         #30,R0
         Dodge.c   838                break;
    0000103E              L764:                             
    0000103E A001                   BRA         L741
    00001040 2402                   MOV.L       R0,@R4
    00001042              L765:                             
         Dodge.c   839            default:
         Dodge.c   840                maxProjectiles = 16;
    00001042 2462                   MOV.L       R6,@R4
    00001044              L741:                             
         Dodge.c   841                break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   842        }
         Dodge.c   843    
         Dodge.c   844        SetTimer(ID_USER_TIMER3, 100, SpawnNext);
    00001044 D61E                   MOV.L       L789+24,R6 ; _SpawnNext
    00001046 E564                   MOV         #100,R5
    00001048 D31E                   MOV.L       L789+28,R3 ; _SetTimer
    0000104A 432B                   JMP         @R3
    0000104C E403                   MOV         #3,R4
         Dodge.c   845    }
         Dodge.c   846    
         Dodge.c   847    #pragma endregion
         Dodge.c   848    
         Dodge.c   849    #pragma endregion
         Dodge.c   850    
         Dodge.c   851    void GameFrame() {
    0000104E              _GameFrame:                      ; function: GameFrame
                                                           ; frame size=4
    0000104E 4F22                   STS.L       PR,@-R15
         Dodge.c   852        // increment frame count
         Dodge.c   853        timer++;
    00001050 D41D                   MOV.L       L789+32,R4 ; _timer
    00001052 6342                   MOV.L       @R4,R3
    00001054 7301                   ADD         #1,R3
         Dodge.c   854        RenderScreen();
    00001056 BB5F                   BSR         _RenderScreen
    00001058 2432                   MOV.L       R3,@R4
         Dodge.c   855        Controls();
    0000105A BD4C                   BSR         _Controls
    0000105C 0009                   NOP
         Dodge.c   856        Physics();
    0000105E AC8D                   BRA         _Physics
    00001060 4F26                   LDS.L       @R15+,PR
         Dodge.c   857    }
         Dodge.c   858    
         Dodge.c   859    /** Add-in entry point
         Dodge.c   860     * 
         Dodge.c   861     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   862     *             strip_no - Strip number from eActivity
         Dodge.c   863     * 
         Dodge.c   864     * Returns:    NOT error
         Dodge.c   865     */
         Dodge.c   866    // Start function
         Dodge.c   867    int AddIn_main(int app_mode, unsigned short strip_no)
    00001062              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=20
    00001062 2FE6                   MOV.L       R14,@-R15
    00001064 2FD6                   MOV.L       R13,@-R15
    00001066 4F22                   STS.L       PR,@-R15
    00001068 DD18                   MOV.L       L789+36,R13; _true
    0000106A 7FF8                   ADD         #-8,R15
         Dodge.c   868    {
         Dodge.c   869        unsigned int i, j; // Iteration variables
         Dodge.c   870        unsigned char str[3];
         Dodge.c   871        unsigned int key;  // Keyboard input
         Dodge.c   872    
         Dodge.c   873        // Clear out the display
         Dodge.c   874        Bdisp_AllClr_DDVRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000106C D318                   MOV.L       L789+40,R3 ; _Bdisp_AllClr_DDVRAM
    0000106E 430B                   JSR         @R3
    00001070 0009                   NOP
         Dodge.c   875        RenderMainMenu();
    00001072 B95C                   BSR         _RenderMainMenu
    00001074 0009                   NOP
    00001076 DE14                   MOV.L       L789+32,R14; _timer
         Dodge.c   876        
         Dodge.c   877        while(true) { // menu
    00001078 A02C                   BRA         L742
    0000107A 0009                   NOP
    0000107C              L743:                             
         Dodge.c   878            timer++; // we will use number of cycles until the player starts as our random seed, as it is high
                         +ly unlikely to be the same
    0000107C 62E2                   MOV.L       @R14,R2
    0000107E 7201                   ADD         #1,R2
    00001080 2E22                   MOV.L       R2,@R14
         Dodge.c   879            if(IsKeyDown(KEY_CTRL_EXE)) {
    00001082 B85B                   BSR         _KeyDown
    00001084 E41F                   MOV         #31,R4
    00001086 600C                   EXTU.B      R0,R0
    00001088 2008                   TST         R0,R0
    0000108A 8B26                   BF          L745
         Dodge.c   880                break;
         Dodge.c   881            }
         Dodge.c   882            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    0000108C B856                   BSR         _KeyDown
    0000108E E430                   MOV         #48,R4
    00001090 600C                   EXTU.B      R0,R0
    00001092 2008                   TST         R0,R0
    00001094 8B04                   BF          L747
    00001096 B851                   BSR         _KeyDown
    00001098 E42F                   MOV         #47,R4
    0000109A 600C                   EXTU.B      R0,R0
    0000109C 2008                   TST         R0,R0
    0000109E 8919                   BT          L742
    000010A0              L747:                             
         Dodge.c   883            {
         Dodge.c   884                AppQuit();
    000010A0 B8E4                   BSR         _AppQuit
    000010A2 0009                   NOP
         Dodge.c   885                break;
    000010A4 A019                   BRA         L745
    000010A6 0009                   NOP
    000010A8              L789:                             
    000010A8 1000                   .DATA.W     H'1000
    000010AA 0000                   .DATA.W     0
    000010AC <00000000>             .DATA.L     _currentAttack
    000010B0 <00000000>             .DATA.L     _projectileIndex
    000010B4 <00000000>             .DATA.L     _projectiles
    000010B8 <00000000>             .DATA.L     _false
    000010BC <00000000>             .DATA.L     _maxProjectiles
    000010C0 <00000000>             .DATA.L     _SpawnNext
    000010C4 <00000000>             .DATA.L     _SetTimer
    000010C8 <00000000>             .DATA.L     _timer
    000010CC <00000000>             .DATA.L     _true
    000010D0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010D4              L742:                             
    000010D4 62D0                   MOV.B       @R13,R2
    000010D6 2228                   TST         R2,R2
    000010D8 8BD0                   BF          L743
    000010DA              L745:                             
         Dodge.c   886            }
         Dodge.c   887        }
         Dodge.c   888        srand(timer);
    000010DA D321                   MOV.L       L790+2,R3  ; _srand
    000010DC 430B                   JSR         @R3
    000010DE 64E2                   MOV.L       @R14,R4
         Dodge.c   889        timer = 0;
         Dodge.c   890    
         Dodge.c   891        Bdisp_AllClr_DDVRAM();
    000010E0 D320                   MOV.L       L790+6,R3  ; _Bdisp_AllClr_DDVRAM
    000010E2 E200                   MOV         #0,R2
    000010E4 430B                   JSR         @R3
    000010E6 2E22                   MOV.L       R2,@R14
         Dodge.c   892    
         Dodge.c   893        // Set up timers for game loop and attacks
         Dodge.c   894        SetTimer(ID_USER_TIMER1, 50, GameFrame);
    000010E8 D61F                   MOV.L       L790+10,R6 ; _GameFrame
    000010EA E532                   MOV         #50,R5
    000010EC D21F                   MOV.L       L790+14,R2 ; _SetTimer
    000010EE 420B                   JSR         @R2
    000010F0 E401                   MOV         #1,R4
         Dodge.c   895        SetTimer(ID_USER_TIMER2, 5000, NextProjectiles); // should be 5000, shortened for testing
    000010F2 D61F                   MOV.L       L790+18,R6 ; _NextProjectiles
    000010F4 9533                   MOV.W       L790,R5    ; H'1388
    000010F6 D31D                   MOV.L       L790+14,R3 ; _SetTimer
    000010F8 430B                   JSR         @R3
    000010FA E402                   MOV         #2,R4
         Dodge.c   896    
         Dodge.c   897        // Set quit handler
         Dodge.c   898        SetQuitHandler(AppQuit);
    000010FC D41D                   MOV.L       L790+22,R4 ; _AppQuit
    000010FE D21E                   MOV.L       L790+26,R2 ; _SetQuitHandler
    00001100 420B                   JSR         @R2
    00001102 0009                   NOP
         Dodge.c   899    
         Dodge.c   900        // The main thread manages the keys
         Dodge.c   901        while (IsKeyUp(KEY_CTRL_MENU))
    00001104 A01D                   BRA         L748
    00001106 0009                   NOP
    00001108              L749:                             
         Dodge.c   902        {
         Dodge.c   903            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00001108 DE1C                   MOV.L       L790+30,R14; _GetKeyWait
    0000110A 67F3                   MOV         R15,R7
    0000110C E600                   MOV         #0,R6
    0000110E 6563                   MOV         R6,R5
    00001110 4E0B                   JSR         @R14
    00001112 6463                   MOV         R6,R4
         Dodge.c   904        
         Dodge.c   905            if (keyResp == KEYREP_KEYEVENT)
    00001114 8801                   CMP/EQ      #1,R0
    00001116 8F06                   BF/S        L750




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001118 6403                   MOV         R0,R4
         Dodge.c   906            {
         Dodge.c   907                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    0000111A 60F2                   MOV.L       @R15,R0
    0000111C 8830                   CMP/EQ      #48,R0
    0000111E 890C                   BT          L592
    00001120 60F2                   MOV.L       @R15,R0
    00001122 882F                   CMP/EQ      #47,R0
    00001124 8909                   BT          L592
    00001126              L750:                             
         Dodge.c   908                {
         Dodge.c   909                    AppQuit();
         Dodge.c   910                    break;
         Dodge.c   911                }
         Dodge.c   912            }
         Dodge.c   913    
         Dodge.c   914            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00001126 B809                   BSR         _KeyDown
    00001128 E430                   MOV         #48,R4
    0000112A 600C                   EXTU.B      R0,R0
    0000112C 2008                   TST         R0,R0
    0000112E 8B04                   BF          L592
    00001130 B804                   BSR         _KeyDown
    00001132 E42F                   MOV         #47,R4
    00001134 600C                   EXTU.B      R0,R0
    00001136 2008                   TST         R0,R0
    00001138 8903                   BT          L748
    0000113A              L592:
         Dodge.c   915            {
         Dodge.c   916                AppQuit();
    0000113A B897                   BSR         _AppQuit
    0000113C 0009                   NOP
         Dodge.c   917                break;
    0000113E A006                   BRA         L753
    00001140 0009                   NOP
    00001142              L748:                             
    00001142 D20F                   MOV.L       L790+34,R2 ; _KeyDown
    00001144 420B                   JSR         @R2
    00001146 E430                   MOV         #48,R4
    00001148 600C                   EXTU.B      R0,R0
    0000114A 2008                   TST         R0,R0
    0000114C 89DC                   BT          L749
    0000114E              L753:                             
         Dodge.c   918            }
         Dodge.c   919        }
         Dodge.c   920    
         Dodge.c   921        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   922        AppQuit();
    0000114E B88D                   BSR         _AppQuit
    00001150 0009                   NOP
         Dodge.c   923    
         Dodge.c   924        // At the end, return application status
         Dodge.c   925        return true;
    00001152 60D0                   MOV.B       @R13,R0
         Dodge.c   926    }
    00001154 7F08                   ADD         #8,R15
    00001156 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001158 6DF6                   MOV.L       @R15+,R13
    0000115A 000B                   RTS
    0000115C 6EF6                   MOV.L       @R15+,R14
    0000115E              L790:                             
    0000115E 1388                   .DATA.W     H'1388
    00001160 <00000000>             .DATA.L     _srand
    00001164 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001168 <00000000>             .DATA.L     _GameFrame
    0000116C <00000000>             .DATA.L     _SetTimer
    00001170 <00000000>             .DATA.L     _NextProjectiles
    00001174 <00000000>             .DATA.L     _AppQuit
    00001178 <00000000>             .DATA.L     _SetQuitHandler
    0000117C <00000000>             .DATA.L     _GetKeyWait
    00001180 <00000000>             .DATA.L     _KeyDown
         Dodge.c   927    
         Dodge.c   928    #pragma region Do not touch
         Dodge.c   929    
         Dodge.c   930    // Source code from here down should not be changed according to the
         Dodge.c   931    // CASIO SDK sample project.
         Dodge.c   932    
         Dodge.c   933    #pragma section _BR_Size
         Dodge.c   934    unsigned long BR_Size;
         Dodge.c   935    #pragma section
         Dodge.c   936    
         Dodge.c   937    #pragma section _TOP
         Dodge.c   938    
         Dodge.c   939    //****************************************************************************
         Dodge.c   940    //  InitializeSystem
         Dodge.c   941    //
         Dodge.c   942    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   943    //              OptionNum : Option Number (only eActivity)
         Dodge.c   944    //
         Dodge.c   945    //  retval  :   1 = No error / 0 = Error
         Dodge.c   946    //
         Dodge.c   947    //****************************************************************************
         Dodge.c   948    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   949    {
         Dodge.c   950        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L791+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L791:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   951    }
         Dodge.c   952    
         Dodge.c   953    #pragma section
         Dodge.c   954    
         Dodge.c   955    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _true:                           ; static: true




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000007               .DATA.L     H'00000007
    0000001C              L445:
    0000001C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000         
    000000F0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000001C4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000298 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    0000036C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000         
    00000440 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101010101   
             0101010101   
             0101         
    00000514 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000101   
             0101010101   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100010000   
             0001000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000005E8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010001 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000100   
             0000010000   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000006BC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0001000100   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000001   
             0000000100   
             0100         
    00000790 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000101 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,
             0001000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0001000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000864 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0000010100   
             0000000000   
             0100000000   
             0000000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000938 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0000000000   
             0100010101   
             0101010101   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0100         
    00000A0C 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'00,H'00,H'00
             0001000000   
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000001   
             0000000000   
             0000000000   
             0000         
    00000AE0 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000         
    00000BB4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0101010101   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000010000   
             0000000000   
             0000000000   
             0000         
    00000C88 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0100000001 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0001010100   
             0000000100   
             0100010000   
             0001000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000010101   
             0101010101   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000         
    00000D5C 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010101 +                       H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000101 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0101010101 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,
             0100000000 +                       H'00,H'00,H'00,H'01
             0100000001   
             0000000100   
             0000000100   
             0000010000   
             0000000100   
             0000000000   
             0100000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000001   
             0000000001   
             0000000100   
             0000010000   
             0000010000   
             0001000000   
             0000010000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100   
             0000000001   
             0101000000   
             0001000000   
             0001         
    00000E30 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000001   
             0101010101   
             0000000000   
             0000000000   
             0000000101   
             0101010100   
             0000000000   
             0000000001   
             0000000001   
             0101010100   
             0000000001   
             0101000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000100   
             0000000000   
             0000000100   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000F04 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000010000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000FD8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0100000001   
             0001000100   
             0000000001   
             0100000000   
             0100000000   
             0000010101   
             0101010101   
             0100000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0101010000   
             0000000000   
             0000000001   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000         
    000010AC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0100010000   
             0000000000   
             0000000100   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000010000   
             0000000000   
             0000000000   
             0100010001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0100000000   
             0000         
    00001180 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000100 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0001000000   
             0100000100   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000010000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0001010101   
             0101010000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    00001254 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0101000000   
             0000010100   
             0000000000   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010101   
             0100000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001328 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000010101   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    000013FC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000101 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000000000   
             0101010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0100         
    000014D0 0100000000             .DATA.B     H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0000000000   
             0000000000   
             0000000000   
             0101000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000015A4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0101010101   
             0101010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001678 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00
             0000000001   
             0000000000   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000100   
             0000000000   
             0000000100   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000010000   
             0000010000   
             0000000000   
             0000         
    0000174C 0100000100             .DATA.B     H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001820 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000018F4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000019C8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001A9C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001B70 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001C44 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001D18 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001DEC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001EC0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001F94 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             00           
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040
    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _paused:                         ; static: paused
    00000010 01                     .DATA.B     H'01
    00000011              _quit:                           ; static: quit
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              _timer:                          ; static: timer
    00000014 00000000               .DATA.L     H'00000000
    00000018              _flicker:                        ; static: flicker
    00000018 01                     .DATA.B     H'01
    00000019              _damaged:                        ; static: damaged
    00000019 00                     .DATA.B     H'00
    0000001A 00000002               .RES.W      1
    0000001C              _flickerOffset:                  ; static: flickerOffset
    0000001C 00000000               .DATA.L     H'00000000
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00001000               .RES.L      1024
    00001000              _projectileIndex:                ; static: projectileIndex
    00001000 00000004               .RES.L      1
    00001004              _maxProjectiles:                 ; static: maxProjectiles
    00001004 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1







SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 15:29:26  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        58




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      955



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001184 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000201C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000020 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00001008 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000041D8 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           31
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          50
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           237






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmkD672.tmp 

