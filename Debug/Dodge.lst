SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    
         Dodge.c     2    // Import some libraries
         Dodge.c     3    #include "stdio.h"    // Standard IO
         Dodge.c     4    #include <stdlib.h>
         Dodge.c     5    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     6    #include "dispbios.h" // Display BIOS
         Dodge.c     7    #include "timer.h"    // Timer
         Dodge.c     8    
         Dodge.c     9    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    10    
         Dodge.c    11    #define __KEYBIOS_H__
         Dodge.c    12    #define KEY_CHAR_0 71
         Dodge.c    13    #define KEY_CHAR_1 72
         Dodge.c    14    #define KEY_CHAR_2 62
         Dodge.c    15    #define KEY_CHAR_3 52
         Dodge.c    16    #define KEY_CHAR_4 73
         Dodge.c    17    #define KEY_CHAR_5 63
         Dodge.c    18    #define KEY_CHAR_6 53
         Dodge.c    19    #define KEY_CHAR_7 74
         Dodge.c    20    #define KEY_CHAR_8 64
         Dodge.c    21    #define KEY_CHAR_9 54
         Dodge.c    22    #define KEY_CHAR_DP 61
         Dodge.c    23    #define KEY_CHAR_EXP 51
         Dodge.c    24    #define KEY_CHAR_PMINUS 41
         Dodge.c    25    #define KEY_CHAR_PLUS 42
         Dodge.c    26    #define KEY_CHAR_MINUS 32
         Dodge.c    27    #define KEY_CHAR_MULT 43
         Dodge.c    28    #define KEY_CHAR_DIV 33
         Dodge.c    29    #define KEY_CHAR_FRAC 75
         Dodge.c    30    #define KEY_CHAR_LPAR 55
         Dodge.c    31    #define KEY_CHAR_RPAR 45
         Dodge.c    32    #define KEY_CHAR_COMMA 35
         Dodge.c    33    #define KEY_CHAR_STORE 25
         Dodge.c    34    #define KEY_CHAR_LOG 66
         Dodge.c    35    #define KEY_CHAR_LN 56
         Dodge.c    36    #define KEY_CHAR_SIN 46
         Dodge.c    37    #define KEY_CHAR_COS 36
         Dodge.c    38    #define KEY_CHAR_TAN 26
         Dodge.c    39    #define KEY_CHAR_SQUARE 67
         Dodge.c    40    #define KEY_CHAR_POW 57
         Dodge.c    41    #define KEY_CTRL_EXE 31
         Dodge.c    42    #define KEY_CTRL_DEL 44
         Dodge.c    43    #define KEY_CTRL_AC 32
         Dodge.c    44    #define KEY_CTRL_FD 65
         Dodge.c    45    #define KEY_CTRL_EXIT 47
         Dodge.c    46    #define KEY_CTRL_SHIFT 78
         Dodge.c    47    #define KEY_CTRL_ALPHA 77
         Dodge.c    48    #define KEY_CTRL_OPTN 68
         Dodge.c    49    #define KEY_CTRL_VARS 58
         Dodge.c    50    #define KEY_CTRL_UP 28
         Dodge.c    51    #define KEY_CTRL_DOWN 37
         Dodge.c    52    #define KEY_CTRL_LEFT 38
         Dodge.c    53    #define KEY_CTRL_RIGHT 27
         Dodge.c    54    #define KEY_CTRL_F1 79




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_F2 69
         Dodge.c    56    #define KEY_CTRL_F3 59
         Dodge.c    57    #define KEY_CTRL_F4 49
         Dodge.c    58    #define KEY_CTRL_F5 39
         Dodge.c    59    #define KEY_CTRL_F6 29
         Dodge.c    60    #define KEY_CTRL_MENU 48
         Dodge.c    61    #ifndef OS2Change
         Dodge.c    62    #define OS2Change
         Dodge.c    63    #ifndef OS2Change_GetOS2
         Dodge.c    64    #define OS2Change_GetOS2
         Dodge.c    65    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    66    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    67    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    68    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    69    {
         Dodge.c    70    unsigned char mainversion;
         Dodge.c    71    unsigned char minorversion;
         Dodge.c    72    unsigned short release;
         Dodge.c    73    unsigned short build;
         Dodge.c    74    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L736+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    75    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L736+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L736+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    76    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 201B                   OR          R1,R0
         Dodge.c    77    #define isOS2 (OSVersionAsInt() >= 0x02020000)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    78    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    79    #endif
         Dodge.c    80    #ifndef OS2Change_Keyboard
         Dodge.c    81    #define OS2Change_Keyboard
         Dodge.c    82    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    83    {
         Dodge.c    84    char i;
         Dodge.c    85    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L603:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L603
         Dodge.c    86    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    87    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    88    {
         Dodge.c    89    unsigned char result=0;
         Dodge.c    90    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    91    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    92    char*PORTB=(void*)0xA4000122;
         Dodge.c    93    char*PORTM=(void*)0xA4000138;
         Dodge.c    94    char*PORTA=(void*)0xA4000120;
         Dodge.c    95    short smask;
         Dodge.c    96    char cmask;
         Dodge.c    97    unsigned char column, row;
         Dodge.c    98    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c    99    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   100    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L604
    00000072 A005                   BRA         L605
    00000074 C907                   AND         #7,R0
    00000076              L604:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L605:                             
         Dodge.c   101    cmask = ~( 1 << ( row %8) );
         Dodge.c   102    if(row <8)
    00000080 994B                   MOV.W       L736,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L736+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L736+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L736+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L606
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   103    {
         Dodge.c   104      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   105      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   106      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   107      *PORTB = cmask;
    000000AE D221                   MOV.L       L736+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   108      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L730
    000000B8 CB0F                   OR          #15,R0
    000000BA              L606:                             
         Dodge.c   109    }
         Dodge.c   110    else
         Dodge.c   111    {
         Dodge.c   112      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   113      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
         Dodge.c   114      delay();
    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   115      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L736+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   116      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L730:                             
         Dodge.c   117    }
         Dodge.c   118    
         Dodge.c   119    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   120    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L736+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   121    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   122    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   123    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   124    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   125    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L736+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   126    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   127    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   128    
         Dodge.c   129    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   130    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12
    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L736:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   131    
         Dodge.c   132    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   133    {
         Dodge.c   134    unsigned short key[8];
         Dodge.c   135    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L737,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L737+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L609
         Dodge.c   136    if(isOS2)
         Dodge.c   137    {
         Dodge.c   138      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L737+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   139      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L737+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   140     
         Dodge.c   141      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1
    00000174 D24B                   MOV.L       L737+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L611
    000001A4 CA01                   XOR         #1,R0
    000001A6              L609:                             
         Dodge.c   142    }
         Dodge.c   143    else
         Dodge.c   144    {
         Dodge.c   145      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L737+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L737+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   146    }
         Dodge.c   147    }
    000001C2              L611:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   148    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15
    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   149    {
         Dodge.c   150    unsigned char x, ret;
         Dodge.c   151    
         Dodge.c   152    ret = GetKey(key);
    000001D4 D334                   MOV.L       L737+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   153    
         Dodge.c   154    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L614:                             
         Dodge.c   155    {
         Dodge.c   156      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L615
         Dodge.c   157      {
         Dodge.c   158       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   159       break;
    000001EE A004                   BRA         L613
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L615:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L614
    000001FA              L613:                             
         Dodge.c   160      }
         Dodge.c   161    }
         Dodge.c   162    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   163    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   164    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   165    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   166    #define GetKey(x) GetKeyMod(x)
         Dodge.c   167    #endif
         Dodge.c   168    #endif
         Dodge.c   169    
         Dodge.c   170    #pragma endregion
         Dodge.c   171    
         Dodge.c   172    #pragma region Constants
         Dodge.c   173    
         Dodge.c   174    // true/false since it's 2018
         Dodge.c   175    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   176    const char false = 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    
         Dodge.c   178    // Display properties
         Dodge.c   179    const char DISPLAY_WIDTH    = 128;
         Dodge.c   180    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   181    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   182    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   183    
         Dodge.c   184    #pragma endregion
         Dodge.c   185    
         Dodge.c   186    struct Projectile {
         Dodge.c   187        char enabled;
         Dodge.c   188        float x;
         Dodge.c   189        float y;
         Dodge.c   190        float xVelocity;
         Dodge.c   191        float yVelocity;
         Dodge.c   192        float xAcceleration;
         Dodge.c   193        float yAcceleration;
         Dodge.c   194    };
         Dodge.c   195    struct Projectile projectiles[128];
         Dodge.c   196    
         Dodge.c   197    #pragma region Variables
         Dodge.c   198    
         Dodge.c   199    int playerHealth = 128;
         Dodge.c   200    int playerX = 64;
         Dodge.c   201    int playerY = 32;
         Dodge.c   202    
         Dodge.c   203    int projectileIndex;
         Dodge.c   204    int maxProjectiles;
         Dodge.c   205    int currentAttack = 0;
         Dodge.c   206    const int attacksTotal = 3;
         Dodge.c   207    
         Dodge.c   208    char quit = 0;
         Dodge.c   209    
         Dodge.c   210    #pragma endregion
         Dodge.c   211    
         Dodge.c   212    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   213        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L618
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L618:                             
         Dodge.c   214        if (x < 0) return -1;
    00000210 4411                   CMP/PZ      R4
    00000212 8901                   BT          L620
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L620:                             
         Dodge.c   215        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   216    }
    0000021A              L619:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   217    float Signf(float x) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   218        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L737+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L621
    0000022C D020                   MOV.L       L737+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L621:                             
         Dodge.c   219        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L737+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L623
    00000240 D01D                   MOV.L       L737+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L623:                             
         Dodge.c   220        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   221    }
    0000024A              L622:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   222    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   223        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L624
         Dodge.c   224            return a;
    00000254 000B                   RTS
    00000256 6043                   MOV         R4,R0
    00000258              L624:                             
         Dodge.c   225        else
         Dodge.c   226            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   227    }
    0000025A              L625:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP
         Dodge.c   228    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   229        if(a < b)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L627
         Dodge.c   230            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L627:                             
         Dodge.c   231        else
         Dodge.c   232            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   233    }
    00000268              L628:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   234    
         Dodge.c   235    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   236    {
         Dodge.c   237        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L737+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   238        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   239        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   240        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   241        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   242    
         Dodge.c   243        quit = true;
    00000286 D20E                   MOV.L       L737+44,R2 ; _true
    00000288 D10E                   MOV.L       L737+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   244    
         Dodge.c   245        return;
         Dodge.c   246    }
    0000028E 4F26                   LDS.L       @R15+,PR
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L737:                             
    00000294 A44B0000               .DATA.L     H'A44B0000
    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy
    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   247    
         Dodge.c   248    #pragma region Drawing functions
         Dodge.c   249    
         Dodge.c   250    /** Draws the projectils */
         Dodge.c   251    void DrawProjectiles()
    000002C8              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
    000002D2 2F96                   MOV.L       R9,@-R15
    000002D4 2F86                   MOV.L       R8,@-R15
    000002D6 4F22                   STS.L       PR,@-R15
    000002D8 D44B                   MOV.L       L738+2,R4  ; _projectiles
    000002DA 7FE4                   ADD         #-28,R15
    000002DC DA4B                   MOV.L       L738+6,R10 ; _Bdisp_SetPoint_VRAM
    000002DE 6543                   MOV         R4,R5
    000002E0 9391                   MOV.W       L738,R3    ; H'0E00
    000002E2 6D43                   MOV         R4,R13
    000002E4 6943                   MOV         R4,R9
    000002E6 343C                   ADD         R3,R4
    000002E8 1F46                   MOV.L       R4,@(24,R15)
         Dodge.c   252    {   
         Dodge.c   253        float x1;
         Dodge.c   254        float y1;
         Dodge.c   255        float x2;
         Dodge.c   256        float y2;
         Dodge.c   257        float dx;
         Dodge.c   258        float dy;
         Dodge.c   259        int x;
         Dodge.c   260        int y;
         Dodge.c   261        int decide;
         Dodge.c   262        int pk;
         Dodge.c   263        int j;
         Dodge.c   264    
         Dodge.c   265        size_t i;
         Dodge.c   266        for (i = 0; i < 128; i++)
    000002EA              L631:                             
         Dodge.c   267        {
         Dodge.c   268            if(projectiles[i].enabled) {
    000002EA 6390                   MOV.B       @R9,R3
    000002EC 2338                   TST         R3,R3
    000002EE 8B01                   BF          L739
    000002F0 A0D9                   BRA         L632
    000002F2 0009                   NOP
    000002F4              L739:                             
         Dodge.c   269                x1 = projectiles[i].x;
    000002F4 54D1                   MOV.L       @(4,R13),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F6 1F41                   MOV.L       R4,@(4,R15)
         Dodge.c   270                y1 = projectiles[i].y;
    000002F8 55D2                   MOV.L       @(8,R13),R5
         Dodge.c   271                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000002FA 6143                   MOV         R4,R1
    000002FC D344                   MOV.L       L738+10,R3 ; __adds
    000002FE 2F52                   MOV.L       R5,@R15
    00000300 430B                   JSR         @R3
    00000302 50D3                   MOV.L       @(12,R13),R0
         Dodge.c   272                y2 = projectiles[i].y + projectiles[i].yVelocity;
    00000304 D242                   MOV.L       L738+10,R2 ; __adds
    00000306 6803                   MOV         R0,R8
    00000308 6153                   MOV         R5,R1
    0000030A 420B                   JSR         @R2
    0000030C 50D4                   MOV.L       @(16,R13),R0
         Dodge.c   273                Bdisp_SetPoint_VRAM(x1, y1, 1);
    0000030E E601                   MOV         #1,R6
    00000310 D240                   MOV.L       L738+14,R2 ; __stoi
    00000312 1F02                   MOV.L       R0,@(8,R15)
    00000314 420B                   JSR         @R2
    00000316 60F2                   MOV.L       @R15,R0
    00000318 D33E                   MOV.L       L738+14,R3 ; __stoi
    0000031A 6503                   MOV         R0,R5
    0000031C 430B                   JSR         @R3
    0000031E 50F1                   MOV.L       @(4,R15),R0
    00000320 4A0B                   JSR         @R10
    00000322 6403                   MOV         R0,R4
         Dodge.c   274                Bdisp_SetPoint_VRAM(x2, y2, 1);
    00000324 D33B                   MOV.L       L738+14,R3 ; __stoi
    00000326 E601                   MOV         #1,R6
    00000328 430B                   JSR         @R3
    0000032A 50F2                   MOV.L       @(8,R15),R0
    0000032C D339                   MOV.L       L738+14,R3 ; __stoi
    0000032E 6503                   MOV         R0,R5
    00000330 430B                   JSR         @R3
    00000332 6083                   MOV         R8,R0
    00000334 4A0B                   JSR         @R10
    00000336 6403                   MOV         R0,R4
         Dodge.c   275    
         Dodge.c   276                dx = abs(x2 - x1);
    00000338 D237                   MOV.L       L738+18,R2 ; __subs
    0000033A 6183                   MOV         R8,R1
    0000033C 420B                   JSR         @R2
    0000033E 50F1                   MOV.L       @(4,R15),R0
    00000340 D334                   MOV.L       L738+14,R3 ; __stoi
    00000342 430B                   JSR         @R3
    00000344 0009                   NOP
    00000346 D235                   MOV.L       L738+22,R2 ; _abs
    00000348 420B                   JSR         @R2
    0000034A 6403                   MOV         R0,R4
    0000034C D334                   MOV.L       L738+26,R3 ; __itos
    0000034E 430B                   JSR         @R3
    00000350 0009                   NOP
    00000352 6B03                   MOV         R0,R11
         Dodge.c   277                dy = abs(y2 - y1);
    00000354 51F2                   MOV.L       @(8,R15),R1
    00000356 D230                   MOV.L       L738+18,R2 ; __subs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000358 420B                   JSR         @R2
    0000035A 60F2                   MOV.L       @R15,R0
    0000035C D32D                   MOV.L       L738+14,R3 ; __stoi
    0000035E 430B                   JSR         @R3
    00000360 0009                   NOP
    00000362 D22E                   MOV.L       L738+22,R2 ; _abs
    00000364 420B                   JSR         @R2
    00000366 6403                   MOV         R0,R4
    00000368 D32D                   MOV.L       L738+26,R3 ; __itos
    0000036A 430B                   JSR         @R3
    0000036C 0009                   NOP
    0000036E 6403                   MOV         R0,R4
         Dodge.c   278    
         Dodge.c   279                decide = (dx > dy);
    00000370 D22C                   MOV.L       L738+30,R2 ; __gts
    00000372 420B                   JSR         @R2
    00000374 61B3                   MOV         R11,R1
    00000376 1F03                   MOV.L       R0,@(12,R15)
         Dodge.c   280                
         Dodge.c   281                pk = 2 * dy - dx;
    00000378 D02B                   MOV.L       L738+34,R0 ; H'40000000
    0000037A D22C                   MOV.L       L738+38,R2 ; __muls
    0000037C 420B                   JSR         @R2
    0000037E 6143                   MOV         R4,R1
    00000380 D325                   MOV.L       L738+18,R3 ; __subs
    00000382 6C03                   MOV         R0,R12
    00000384 6103                   MOV         R0,R1
    00000386 430B                   JSR         @R3
    00000388 60B3                   MOV         R11,R0
    0000038A D222                   MOV.L       L738+14,R2 ; __stoi
    0000038C 420B                   JSR         @R2
    0000038E 0009                   NOP
    00000390 D226                   MOV.L       L738+38,R2 ; __muls
    00000392 6E03                   MOV         R0,R14
    00000394 D024                   MOV.L       L738+34,R0 ; H'40000000
         Dodge.c   282                for (j = 0; j <= dx; j++) {
    00000396 E300                   MOV         #0,R3
    00000398 1F34                   MOV.L       R3,@(16,R15)
    0000039A 420B                   JSR         @R2
    0000039C 61B3                   MOV         R11,R1
    0000039E D31E                   MOV.L       L738+18,R3 ; __subs
    000003A0 430B                   JSR         @R3
    000003A2 61C3                   MOV         R12,R1
    000003A4 1F05                   MOV.L       R0,@(20,R15)
    000003A6 E100                   MOV         #0,R1
    000003A8 D321                   MOV.L       L738+42,R3 ; __les
    000003AA 430B                   JSR         @R3
    000003AC 60B3                   MOV         R11,R0
    000003AE 8800                   CMP/EQ      #0,R0
    000003B0 8979                   BT          L632
    000003B2              L634:                             
         Dodge.c   283                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    000003B2 E601                   MOV         #1,R6
    000003B4 D217                   MOV.L       L738+14,R2 ; __stoi
    000003B6 420B                   JSR         @R2
    000003B8 60F2                   MOV.L       @R15,R0
    000003BA 6503                   MOV         R0,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003BC D315                   MOV.L       L738+14,R3 ; __stoi
    000003BE 430B                   JSR         @R3
    000003C0 50F1                   MOV.L       @(4,R15),R0
    000003C2 4A0B                   JSR         @R10
    000003C4 6403                   MOV         R0,R4
         Dodge.c   284                    
         Dodge.c   285                    // checking either to decrement or increment the
         Dodge.c   286                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   287                    x1 < x2 ? x1++ : x1--;
    000003C6 51F1                   MOV.L       @(4,R15),R1
    000003C8 D31A                   MOV.L       L738+46,R3 ; __lts
    000003CA 430B                   JSR         @R3
    000003CC 6083                   MOV         R8,R0
    000003CE 8800                   CMP/EQ      #0,R0
    000003D0 8906                   BT          L635
    000003D2 D119                   MOV.L       L738+50,R1 ; H'3F800000
    000003D4 D20E                   MOV.L       L738+10,R2 ; __adds
    000003D6 420B                   JSR         @R2
    000003D8 50F1                   MOV.L       @(4,R15),R0
    000003DA 1F01                   MOV.L       R0,@(4,R15)
    000003DC A006                   BRA         L636
    000003DE 0009                   NOP
    000003E0              L635:                             
    000003E0 51F1                   MOV.L       @(4,R15),R1
    000003E2 D015                   MOV.L       L738+50,R0 ; H'3F800000
    000003E4 D30C                   MOV.L       L738+18,R3 ; __subs
    000003E6 430B                   JSR         @R3
    000003E8 0009                   NOP
    000003EA 1F01                   MOV.L       R0,@(4,R15)
    000003EC              L636:                             
         Dodge.c   288                    if (pk < 0) {
    000003EC 4E11                   CMP/PZ      R14
    000003EE 8930                   BT          L637
         Dodge.c   289                        // decision value will decide to plot
         Dodge.c   290                        // either  x1 or y1 in x's position
         Dodge.c   291                        if (decide == 0) {
    000003F0 52F3                   MOV.L       @(12,R15),R2
    000003F2 2228                   TST         R2,R2
    000003F4 8B22                   BF          L638
         Dodge.c   292                            // putpixel(x1, y1, RED);
         Dodge.c   293                            pk = pk + 2 * dy;
    000003F6 D30A                   MOV.L       L738+26,R3 ; __itos
    000003F8 430B                   JSR         @R3
    000003FA 60E3                   MOV         R14,R0
    000003FC D204                   MOV.L       L738+10,R2 ; __adds
    000003FE 420B                   JSR         @R2
    00000400 61C3                   MOV         R12,R1
    00000402 A021                   BRA         L731
    00000404 0009                   NOP
    00000406              L738:                             
    00000406 0E00                   .DATA.W     H'0E00
    00000408 <00000000>             .DATA.L     _projectiles
    0000040C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000410 <00000000>             .DATA.L     __adds
    00000414 <00000000>             .DATA.L     __stoi
    00000418 <00000000>             .DATA.L     __subs
    0000041C <00000000>             .DATA.L     _abs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000420 <00000000>             .DATA.L     __itos
    00000424 <00000000>             .DATA.L     __gts
    00000428 40000000               .DATA.L     H'40000000
    0000042C <00000000>             .DATA.L     __muls
    00000430 <00000000>             .DATA.L     __les
    00000434 <00000000>             .DATA.L     __lts
    00000438 3F800000               .DATA.L     H'3F800000
    0000043C              L638:                             
         Dodge.c   294                        }
         Dodge.c   295                        else {
         Dodge.c   296                            //(y1,x1) is passed in xt
         Dodge.c   297                            // putpixel(y1, x1, YELLOW);
         Dodge.c   298                            pk = pk + 2 * dy;
    0000043C D33F                   MOV.L       L740+2,R3  ; __itos
    0000043E 430B                   JSR         @R3
    00000440 60E3                   MOV         R14,R0
    00000442 D23F                   MOV.L       L740+6,R2  ; __adds
    00000444 420B                   JSR         @R2
    00000446 61C3                   MOV         R12,R1
    00000448              L731:                             
    00000448 D33E                   MOV.L       L740+10,R3 ; __stoi
    0000044A 430B                   JSR         @R3
    0000044C 0009                   NOP
    0000044E A01F                   BRA         L640
    00000450 6E03                   MOV         R0,R14
    00000452              L637:                             
         Dodge.c   299                        }
         Dodge.c   300                    }
         Dodge.c   301                    else {
         Dodge.c   302                        y1 < y2 ? y1++ : y1--;
    00000452 61F2                   MOV.L       @R15,R1
    00000454 D33C                   MOV.L       L740+14,R3 ; __lts
    00000456 430B                   JSR         @R3
    00000458 50F2                   MOV.L       @(8,R15),R0
    0000045A 8800                   CMP/EQ      #0,R0
    0000045C 8906                   BT          L641
    0000045E D13B                   MOV.L       L740+18,R1 ; H'3F800000
    00000460 D237                   MOV.L       L740+6,R2  ; __adds
    00000462 420B                   JSR         @R2
    00000464 60F2                   MOV.L       @R15,R0
    00000466 2F02                   MOV.L       R0,@R15
    00000468 A006                   BRA         L642
    0000046A 0009                   NOP
    0000046C              L641:                             
    0000046C 61F2                   MOV.L       @R15,R1
    0000046E D037                   MOV.L       L740+18,R0 ; H'3F800000
    00000470 D337                   MOV.L       L740+22,R3 ; __subs
    00000472 430B                   JSR         @R3
    00000474 0009                   NOP
    00000476 2F02                   MOV.L       R0,@R15
    00000478              L642:                             
         Dodge.c   303                        if (decide == 0) {
    00000478 53F3                   MOV.L       @(12,R15),R3
    0000047A 2338                   TST         R3,R3
         Dodge.c   304            
         Dodge.c   305                            // putpixel(x1, y1, RED);
         Dodge.c   306                        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   307                        else {
         Dodge.c   308                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   309                        }
         Dodge.c   310                        pk = pk + 2 * dy - 2 * dx;
    0000047C D32F                   MOV.L       L740+2,R3  ; __itos
    0000047E 430B                   JSR         @R3
    00000480 60E3                   MOV         R14,R0
    00000482 D22F                   MOV.L       L740+6,R2  ; __adds
    00000484 420B                   JSR         @R2
    00000486 51F5                   MOV.L       @(20,R15),R1
    00000488 D32E                   MOV.L       L740+10,R3 ; __stoi
    0000048A 430B                   JSR         @R3
    0000048C 0009                   NOP
    0000048E 6E03                   MOV         R0,R14
    00000490              L640:                             
    00000490 52F4                   MOV.L       @(16,R15),R2
    00000492 7201                   ADD         #1,R2
    00000494 1F24                   MOV.L       R2,@(16,R15)
    00000496 D329                   MOV.L       L740+2,R3  ; __itos
    00000498 430B                   JSR         @R3
    0000049A 6023                   MOV         R2,R0
    0000049C D32D                   MOV.L       L740+26,R3 ; __ges
    0000049E 430B                   JSR         @R3
    000004A0 61B3                   MOV         R11,R1
    000004A2 8800                   CMP/EQ      #0,R0
    000004A4 8B85                   BF          L634
    000004A6              L632:                             
    000004A6 791C                   ADD         #28,R9
    000004A8 52F6                   MOV.L       @(24,R15),R2
    000004AA 3922                   CMP/HS      R2,R9
    000004AC 8D02                   BT/S        L741
    000004AE 7D1C                   ADD         #28,R13
    000004B0 AF1B                   BRA         L631
    000004B2 0009                   NOP
    000004B4              L741:                             
         Dodge.c   311                    }
         Dodge.c   312                }
         Dodge.c   313            }
         Dodge.c   314        }
         Dodge.c   315    }
    000004B4 7F1C                   ADD         #28,R15
    000004B6 4F26                   LDS.L       @R15+,PR
    000004B8 68F6                   MOV.L       @R15+,R8
    000004BA 69F6                   MOV.L       @R15+,R9
    000004BC 6AF6                   MOV.L       @R15+,R10
    000004BE 6BF6                   MOV.L       @R15+,R11
    000004C0 6CF6                   MOV.L       @R15+,R12
    000004C2 6DF6                   MOV.L       @R15+,R13
    000004C4 000B                   RTS
    000004C6 6EF6                   MOV.L       @R15+,R14
         Dodge.c   316    /** Draws the player */
         Dodge.c   317    void DrawPlayer()
    000004C8              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=16
    000004C8 2FE6                   MOV.L       R14,@-R15
         Dodge.c   318    {   
         Dodge.c   319        Bdisp_SetPoint_VRAM(playerX, playerY, 1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004CA E601                   MOV         #1,R6
    000004CC 2FD6                   MOV.L       R13,@-R15
    000004CE 2FC6                   MOV.L       R12,@-R15
    000004D0 4F22                   STS.L       PR,@-R15
    000004D2 DC21                   MOV.L       L740+30,R12; _playerX
    000004D4 DD21                   MOV.L       L740+34,R13; _playerY
    000004D6 DE22                   MOV.L       L740+38,R14; _Bdisp_SetPoint_VRAM
    000004D8 65D2                   MOV.L       @R13,R5
    000004DA 4E0B                   JSR         @R14
    000004DC 64C2                   MOV.L       @R12,R4
         Dodge.c   320        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    000004DE E601                   MOV         #1,R6
    000004E0 65D2                   MOV.L       @R13,R5
    000004E2 64C2                   MOV.L       @R12,R4
    000004E4 4E0B                   JSR         @R14
    000004E6 7401                   ADD         #1,R4
         Dodge.c   321        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    000004E8 65D2                   MOV.L       @R13,R5
    000004EA E601                   MOV         #1,R6
    000004EC 64C2                   MOV.L       @R12,R4
    000004EE 4E0B                   JSR         @R14
    000004F0 74FF                   ADD         #-1,R4
         Dodge.c   322        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    000004F2 E601                   MOV         #1,R6
    000004F4 65D2                   MOV.L       @R13,R5
    000004F6 7501                   ADD         #1,R5
    000004F8 4E0B                   JSR         @R14
    000004FA 64C2                   MOV.L       @R12,R4
         Dodge.c   323        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000004FC 65D2                   MOV.L       @R13,R5
    000004FE E601                   MOV         #1,R6
    00000500 75FF                   ADD         #-1,R5
    00000502 4E0B                   JSR         @R14
    00000504 64C2                   MOV.L       @R12,R4
         Dodge.c   324    }
    00000506 4F26                   LDS.L       @R15+,PR
    00000508 6CF6                   MOV.L       @R15+,R12
    0000050A 6DF6                   MOV.L       @R15+,R13
    0000050C 000B                   RTS
    0000050E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   325    
         Dodge.c   326    void DrawHealthBar() {
    00000510              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=16
    00000510 2FE6                   MOV.L       R14,@-R15
    00000512 2FD6                   MOV.L       R13,@-R15
    00000514 2FC6                   MOV.L       R12,@-R15
    00000516 4F22                   STS.L       PR,@-R15
         Dodge.c   327        size_t i;
         Dodge.c   328        for (i = 0; i < playerHealth; i++)
    00000518 DC12                   MOV.L       L740+42,R12; _playerHealth
    0000051A DD11                   MOV.L       L740+38,R13; _Bdisp_SetPoint_VRAM
    0000051C A005                   BRA         L645
    0000051E EE00                   MOV         #0,R14
    00000520              L646:                             
         Dodge.c   329        {
         Dodge.c   330            Bdisp_SetPoint_VRAM(i, 63, 1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000520 E601                   MOV         #1,R6
    00000522 E53F                   MOV         #63,R5
    00000524 4D0B                   JSR         @R13
    00000526 64E3                   MOV         R14,R4
    00000528 7E01                   ADD         #1,R14
    0000052A              L645:                             
    0000052A 62C2                   MOV.L       @R12,R2
    0000052C 3E22                   CMP/HS      R2,R14
    0000052E 8BF7                   BF          L646
         Dodge.c   331        }
         Dodge.c   332        // debug bars
         Dodge.c   333        // for (i = 0; i < projectileIndex; i++)
         Dodge.c   334        //     Bdisp_SetPoint_VRAM(i, 1, 1);
         Dodge.c   335        // for (i = 0; i < maxProjectiles; i++)
         Dodge.c   336        //     Bdisp_SetPoint_VRAM(i, 2, 1);
         Dodge.c   337    }
    00000530 4F26                   LDS.L       @R15+,PR
    00000532 6CF6                   MOV.L       @R15+,R12
    00000534 6DF6                   MOV.L       @R15+,R13
    00000536 000B                   RTS
    00000538 6EF6                   MOV.L       @R15+,R14
    0000053A              L740:                             
    0000053A 0000                   .DATA.W     0
    0000053C <00000000>             .DATA.L     __itos
    00000540 <00000000>             .DATA.L     __adds
    00000544 <00000000>             .DATA.L     __stoi
    00000548 <00000000>             .DATA.L     __lts
    0000054C 3F800000               .DATA.L     H'3F800000
    00000550 <00000000>             .DATA.L     __subs
    00000554 <00000000>             .DATA.L     __ges
    00000558 <00000000>             .DATA.L     _playerX
    0000055C <00000000>             .DATA.L     _playerY
    00000560 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000564 <00000000>             .DATA.L     _playerHealth
         Dodge.c   338    
         Dodge.c   339    #pragma endregion
         Dodge.c   340    
         Dodge.c   341    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   342    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration) {
    00000568              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=20
    00000568 2FE6                   MOV.L       R14,@-R15
    0000056A 2FD6                   MOV.L       R13,@-R15
    0000056C 2FB6                   MOV.L       R11,@-R15
    0000056E 7FF8                   ADD         #-8,R15
    00000570 DE2E                   MOV.L       L742+2,R14 ; _projectiles
    00000572 2FE2                   MOV.L       R14,@R15
    00000574 1FE1                   MOV.L       R14,@(4,R15)
    00000576 6DE3                   MOV         R14,R13
    00000578 9357                   MOV.W       L742,R3    ; H'0E00
    0000057A 61F2                   MOV.L       @R15,R1
         Dodge.c   343        size_t i;
         Dodge.c   344        for (i = 0; i < 128; i++)
    0000057C DB2C                   MOV.L       L742+6,R11 ; _true
    0000057E 313C                   ADD         R3,R1
    00000580 3D12                   CMP/HS      R1,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000582 8911                   BT          L650
    00000584              L648:                             
         Dodge.c   345        {
         Dodge.c   346            if(!projectiles[i].enabled) { // found a free spot in the array
    00000584 63D0                   MOV.B       @R13,R3
    00000586 2338                   TST         R3,R3
    00000588 8B0A                   BF          L649
         Dodge.c   347                // set up the projectile
         Dodge.c   348                projectiles[i].x = x;
    0000058A 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   349                projectiles[i].y = y;
    0000058C 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   350                projectiles[i].xVelocity = xVelocity;
    0000058E 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   351                projectiles[i].yVelocity = yVelocity;
    00000590 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   352                projectiles[i].xAcceleration = xAcceleration;
    00000592 53F5                   MOV.L       @(20,R15),R3
    00000594 1E35                   MOV.L       R3,@(20,R14)
         Dodge.c   353                projectiles[i].yAcceleration = yAcceleration;
    00000596 52F6                   MOV.L       @(24,R15),R2
    00000598 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   354                // enable it
         Dodge.c   355                projectiles[i].enabled = true;
    0000059A 63B0                   MOV.B       @R11,R3
         Dodge.c   356                // stop the loop, we're done
         Dodge.c   357                return;
    0000059C A004                   BRA         L650
    0000059E 2E30                   MOV.B       R3,@R14
    000005A0              L649:                             
    000005A0 7D1C                   ADD         #28,R13
    000005A2 3D12                   CMP/HS      R1,R13
    000005A4 8FEE                   BF/S        L648
    000005A6 7E1C                   ADD         #28,R14
    000005A8              L650:                             
         Dodge.c   358            }
         Dodge.c   359        }
         Dodge.c   360        
         Dodge.c   361    }
    000005A8 7F08                   ADD         #8,R15
    000005AA 6BF6                   MOV.L       @R15+,R11
    000005AC 6DF6                   MOV.L       @R15+,R13
    000005AE 000B                   RTS
    000005B0 6EF6                   MOV.L       @R15+,R14
         Dodge.c   362    
         Dodge.c   363    int IsCollidingWithPlayer(int x, int y) {
    000005B2              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer
                                                           ; frame size=0
    000005B2 D320                   MOV.L       L742+10,R3 ; _playerX
    000005B4 6632                   MOV.L       @R3,R6
    000005B6 3460                   CMP/EQ      R6,R4
    000005B8 8B03                   BF          L651
    000005BA D21F                   MOV.L       L742+14,R2 ; _playerY
    000005BC 6122                   MOV.L       @R2,R1
    000005BE 3510                   CMP/EQ      R1,R5
    000005C0 8918                   BT          L553
    000005C2              L651:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005C2 3460                   CMP/EQ      R6,R4
    000005C4 D31C                   MOV.L       L742+14,R3 ; _playerY
    000005C6 8F0A                   BF/S        L653
    000005C8 6732                   MOV.L       @R3,R7
         Dodge.c   364        if(x == playerX && y == playerY) return true;
         Dodge.c   365        if(x == playerX) {
         Dodge.c   366            if(y == playerY) return true;
    000005CA 3570                   CMP/EQ      R7,R5
    000005CC 8912                   BT          L553
         Dodge.c   367            if(y == playerY + 1) return true;
    000005CE 6373                   MOV         R7,R3
    000005D0 7301                   ADD         #1,R3
    000005D2 3530                   CMP/EQ      R3,R5
    000005D4 890E                   BT          L553
         Dodge.c   368            if(y == playerY - 1) return true;
    000005D6 6373                   MOV         R7,R3
    000005D8 73FF                   ADD         #-1,R3
    000005DA 3530                   CMP/EQ      R3,R5
    000005DC 890A                   BT          L553
    000005DE              L653:                             
         Dodge.c   369        }
         Dodge.c   370        if(y == playerY) {
    000005DE 3570                   CMP/EQ      R7,R5
    000005E0 8B0B                   BF          L657
         Dodge.c   371            if(x == playerX) return true;
    000005E2 3460                   CMP/EQ      R6,R4
    000005E4 8906                   BT          L553
         Dodge.c   372            if(x == playerX + 1) return true;
    000005E6 6263                   MOV         R6,R2
    000005E8 7201                   ADD         #1,R2
    000005EA 3420                   CMP/EQ      R2,R4
    000005EC 8902                   BT          L553
         Dodge.c   373            if(x == playerX - 1) return true;
    000005EE 76FF                   ADD         #-1,R6
    000005F0 3460                   CMP/EQ      R6,R4
    000005F2 8B02                   BF          L657
    000005F4              L553:
    000005F4 D20E                   MOV.L       L742+6,R2  ; _true
    000005F6 000B                   RTS
    000005F8 6020                   MOV.B       @R2,R0
    000005FA              L657:                             
         Dodge.c   374        }
         Dodge.c   375    
         Dodge.c   376        return false;
    000005FA D310                   MOV.L       L742+18,R3 ; _false
    000005FC 6030                   MOV.B       @R3,R0
         Dodge.c   377    }
    000005FE              L652:                             
    000005FE 000B                   RTS
    00000600 0009                   NOP
         Dodge.c   378    
         Dodge.c   379    #pragma region Timer functions
         Dodge.c   380    
         Dodge.c   381    /** Timer #2: Renders screen */
         Dodge.c   382    void RenderScreen()
    00000602              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000602 4F22                   STS.L       PR,@-R15
         Dodge.c   383    {
         Dodge.c   384        if(!quit) {
    00000604 D10E                   MOV.L       L742+22,R1 ; _quit
    00000606 6210                   MOV.B       @R1,R2
    00000608 2228                   TST         R2,R2
    0000060A 8B0B                   BF          L661
         Dodge.c   385            // Clear current screen
         Dodge.c   386            Bdisp_AllClr_VRAM();
    0000060C D20D                   MOV.L       L742+26,R2 ; _Bdisp_AllClr_VRAM
    0000060E 420B                   JSR         @R2
    00000610 0009                   NOP
         Dodge.c   387                
         Dodge.c   388            // Draw the different parts of the screen
         Dodge.c   389            DrawProjectiles();
    00000612 BE59                   BSR         _DrawProjectiles
    00000614 0009                   NOP
         Dodge.c   390            DrawPlayer();
    00000616 BF57                   BSR         _DrawPlayer
    00000618 0009                   NOP
         Dodge.c   391            DrawHealthBar();
    0000061A BF79                   BSR         _DrawHealthBar
    0000061C 0009                   NOP
         Dodge.c   392    
         Dodge.c   393            // Move VRAM to DD
         Dodge.c   394            Bdisp_PutDisp_DD();
    0000061E D20A                   MOV.L       L742+30,R2 ; _Bdisp_PutDisp_DD
    00000620 422B                   JMP         @R2
    00000622 4F26                   LDS.L       @R15+,PR
    00000624              L661:                             
         Dodge.c   395        }
         Dodge.c   396    }
    00000624 4F26                   LDS.L       @R15+,PR
    00000626 000B                   RTS
    00000628 0009                   NOP
    0000062A              L742:                             
    0000062A 0E00                   .DATA.W     H'0E00
    0000062C <00000000>             .DATA.L     _projectiles
    00000630 <00000000>             .DATA.L     _true
    00000634 <00000000>             .DATA.L     _playerX
    00000638 <00000000>             .DATA.L     _playerY
    0000063C <00000000>             .DATA.L     _false
    00000640 <00000000>             .DATA.L     _quit
    00000644 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000648 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   397    
         Dodge.c   398    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    0000064C              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    0000064C 2FE6                   MOV.L       R14,@-R15
         Dodge.c   399        float dx;
         Dodge.c   400        float dy;
         Dodge.c   401        int decide;
         Dodge.c   402        int pk;
         Dodge.c   403        int j;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   404    
         Dodge.c   405        dx = abs(x2 - x1);
    0000064E 6173                   MOV         R7,R1
    00000650 D363                   MOV.L       L743+2,R3  ; __subs
    00000652 2FD6                   MOV.L       R13,@-R15
    00000654 2FC6                   MOV.L       R12,@-R15
    00000656 2FB6                   MOV.L       R11,@-R15
    00000658 2FA6                   MOV.L       R10,@-R15
    0000065A 2F96                   MOV.L       R9,@-R15
    0000065C 2F86                   MOV.L       R8,@-R15
    0000065E 6873                   MOV         R7,R8
    00000660 4F22                   STS.L       PR,@-R15
    00000662 4F12                   STS.L       MACL,@-R15
    00000664 7FEC                   ADD         #-20,R15
    00000666 1F42                   MOV.L       R4,@(8,R15)
    00000668 1F51                   MOV.L       R5,@(4,R15)
    0000066A 2F62                   MOV.L       R6,@R15
    0000066C 430B                   JSR         @R3
    0000066E 50F1                   MOV.L       @(4,R15),R0
    00000670 D25C                   MOV.L       L743+6,R2  ; __stoi
    00000672 420B                   JSR         @R2
    00000674 0009                   NOP
    00000676 D35C                   MOV.L       L743+10,R3 ; _abs
    00000678 430B                   JSR         @R3
    0000067A 6403                   MOV         R0,R4
    0000067C D25B                   MOV.L       L743+14,R2 ; __itos
    0000067E 420B                   JSR         @R2
    00000680 0009                   NOP
    00000682 6D03                   MOV         R0,R13
         Dodge.c   406        dy = abs(y2 - y1);
    00000684 51FE                   MOV.L       @(56,R15),R1
    00000686 D356                   MOV.L       L743+2,R3  ; __subs
    00000688 430B                   JSR         @R3
    0000068A 60F2                   MOV.L       @R15,R0
    0000068C D255                   MOV.L       L743+6,R2  ; __stoi
    0000068E 420B                   JSR         @R2
    00000690 0009                   NOP
    00000692 D355                   MOV.L       L743+10,R3 ; _abs
    00000694 430B                   JSR         @R3
    00000696 6403                   MOV         R0,R4
    00000698 D254                   MOV.L       L743+14,R2 ; __itos
    0000069A 420B                   JSR         @R2
    0000069C 0009                   NOP
    0000069E 6403                   MOV         R0,R4
         Dodge.c   407    
         Dodge.c   408        decide = (dx > dy);
    000006A0 D353                   MOV.L       L743+18,R3 ; __gts
    000006A2 430B                   JSR         @R3
    000006A4 61D3                   MOV         R13,R1
    000006A6 6903                   MOV         R0,R9
         Dodge.c   409        
         Dodge.c   410        pk = 2 * dy - dx;
    000006A8 D253                   MOV.L       L743+26,R2 ; __muls
    000006AA D052                   MOV.L       L743+22,R0 ; H'40000000
    000006AC 420B                   JSR         @R2
    000006AE 6143                   MOV         R4,R1
    000006B0 D34B                   MOV.L       L743+2,R3  ; __subs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006B2 6A03                   MOV         R0,R10
    000006B4 6103                   MOV         R0,R1
    000006B6 430B                   JSR         @R3
    000006B8 60D3                   MOV         R13,R0
    000006BA D24A                   MOV.L       L743+6,R2  ; __stoi
    000006BC 420B                   JSR         @R2
    000006BE 0009                   NOP
    000006C0 52F2                   MOV.L       @(8,R15),R2
    000006C2 6E03                   MOV         R0,R14
    000006C4 D04B                   MOV.L       L743+22,R0 ; H'40000000
         Dodge.c   411        for (j = 0; j <= dx; j++) {
    000006C6 EB00                   MOV         #0,R11
    000006C8 E31C                   MOV         #28,R3
    000006CA 0237                   MUL.L       R3,R2
    000006CC D24B                   MOV.L       L743+30,R2 ; _projectiles
    000006CE 031A                   STS         MACL,R3
    000006D0 1F34                   MOV.L       R3,@(16,R15)
    000006D2 332C                   ADD         R2,R3
    000006D4 1F32                   MOV.L       R3,@(8,R15)
    000006D6 D248                   MOV.L       L743+26,R2 ; __muls
    000006D8 420B                   JSR         @R2
    000006DA 61D3                   MOV         R13,R1
    000006DC D240                   MOV.L       L743+2,R2  ; __subs
    000006DE 420B                   JSR         @R2
    000006E0 61A3                   MOV         R10,R1
    000006E2 61B3                   MOV         R11,R1
    000006E4 D246                   MOV.L       L743+34,R2 ; __les
    000006E6 1F03                   MOV.L       R0,@(12,R15)
    000006E8 420B                   JSR         @R2
    000006EA 60D3                   MOV         R13,R0
    000006EC 8800                   CMP/EQ      #0,R0
    000006EE 8965                   BT          L662
    000006F0 DC44                   MOV.L       L743+38,R12; _playerHealth
    000006F2              L663:                             
         Dodge.c   412            // check for collision
         Dodge.c   413            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    000006F2 D33C                   MOV.L       L743+6,R3  ; __stoi
    000006F4 430B                   JSR         @R3
    000006F6 60F2                   MOV.L       @R15,R0
    000006F8 D33A                   MOV.L       L743+6,R3  ; __stoi
    000006FA 6503                   MOV         R0,R5
    000006FC 430B                   JSR         @R3
    000006FE 50F1                   MOV.L       @(4,R15),R0
    00000700 BF57                   BSR         _IsCollidingWithPlayer
    00000702 6403                   MOV         R0,R4
    00000704 2008                   TST         R0,R0
    00000706 8907                   BT          L664
         Dodge.c   414                // damage player
         Dodge.c   415                playerHealth -= 1;
    00000708 63C2                   MOV.L       @R12,R3
    0000070A 73FF                   ADD         #-1,R3
    0000070C 2C32                   MOV.L       R3,@R12
         Dodge.c   416                // destroy projectile
         Dodge.c   417                projectiles[arrayIndex].enabled = false;
    0000070E 52F2                   MOV.L       @(8,R15),R2
    00000710 D13D                   MOV.L       L743+42,R1 ; _false
    00000712 6310                   MOV.B       @R1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   418                return;
    00000714 A058                   BRA         L665
    00000716 2230                   MOV.B       R3,@R2
    00000718              L664:                             
         Dodge.c   419            }
         Dodge.c   420            
         Dodge.c   421            // checking either to decrement or increment the
         Dodge.c   422            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   423            x1 < x2 ? x1++ : x1--;
    00000718 51F1                   MOV.L       @(4,R15),R1
    0000071A D23C                   MOV.L       L743+46,R2 ; __lts
    0000071C 420B                   JSR         @R2
    0000071E 6083                   MOV         R8,R0
    00000720 8800                   CMP/EQ      #0,R0
    00000722 8906                   BT          L666
    00000724 D13A                   MOV.L       L743+50,R1 ; H'3F800000
    00000726 D33B                   MOV.L       L743+54,R3 ; __adds
    00000728 430B                   JSR         @R3
    0000072A 50F1                   MOV.L       @(4,R15),R0
    0000072C 1F01                   MOV.L       R0,@(4,R15)
    0000072E A006                   BRA         L667
    00000730 0009                   NOP
    00000732              L666:                             
    00000732 51F1                   MOV.L       @(4,R15),R1
    00000734 D036                   MOV.L       L743+50,R0 ; H'3F800000
    00000736 D22A                   MOV.L       L743+2,R2  ; __subs
    00000738 420B                   JSR         @R2
    0000073A 0009                   NOP
    0000073C 1F01                   MOV.L       R0,@(4,R15)
    0000073E              L667:                             
    0000073E D32B                   MOV.L       L743+14,R3 ; __itos
    00000740 430B                   JSR         @R3
    00000742 60E3                   MOV         R14,R0
    00000744 4E11                   CMP/PZ      R14
    00000746 8D14                   BT/S        L668
    00000748 6403                   MOV         R0,R4
         Dodge.c   424            if (pk < 0) {
         Dodge.c   425                // decision value will decide to plot
         Dodge.c   426                // either  x1 or y1 in x's position
         Dodge.c   427                if (decide == 0) {
    0000074A 2998                   TST         R9,R9
    0000074C 8B08                   BF          L669
         Dodge.c   428                    // putpixel(x1, y1, RED);
         Dodge.c   429                    pk = pk + 2 * dy;
    0000074E 6143                   MOV         R4,R1
    00000750 D230                   MOV.L       L743+54,R2 ; __adds
    00000752 420B                   JSR         @R2
    00000754 60A3                   MOV         R10,R0
    00000756 D323                   MOV.L       L743+6,R3  ; __stoi
    00000758 430B                   JSR         @R3
    0000075A 0009                   NOP
    0000075C A007                   BRA         L732
    0000075E 0009                   NOP
    00000760              L669:                             
         Dodge.c   430                }
         Dodge.c   431                else {
         Dodge.c   432                    //(y1,x1) is passed in xt




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   433                    // putpixel(y1, x1, YELLOW);
         Dodge.c   434                    pk = pk + 2 * dy;
    00000760 D32C                   MOV.L       L743+54,R3 ; __adds
    00000762 6143                   MOV         R4,R1
    00000764 430B                   JSR         @R3
    00000766 60A3                   MOV         R10,R0
    00000768 D21E                   MOV.L       L743+6,R2  ; __stoi
    0000076A 420B                   JSR         @R2
    0000076C 0009                   NOP
    0000076E              L732:                             
    0000076E A01C                   BRA         L671
    00000770 6E03                   MOV         R0,R14
    00000772              L668:                             
         Dodge.c   435                }
         Dodge.c   436            }
         Dodge.c   437            else {
         Dodge.c   438                y1 < y2 ? y1++ : y1--;
    00000772 61F2                   MOV.L       @R15,R1
    00000774 D225                   MOV.L       L743+46,R2 ; __lts
    00000776 420B                   JSR         @R2
    00000778 50FE                   MOV.L       @(56,R15),R0
    0000077A 8800                   CMP/EQ      #0,R0
    0000077C 8906                   BT          L672
    0000077E D124                   MOV.L       L743+50,R1 ; H'3F800000
    00000780 D324                   MOV.L       L743+54,R3 ; __adds
    00000782 430B                   JSR         @R3
    00000784 60F2                   MOV.L       @R15,R0
    00000786 2F02                   MOV.L       R0,@R15
    00000788 A006                   BRA         L673
    0000078A 0009                   NOP
    0000078C              L672:                             
    0000078C 61F2                   MOV.L       @R15,R1
    0000078E D020                   MOV.L       L743+50,R0 ; H'3F800000
    00000790 D213                   MOV.L       L743+2,R2  ; __subs
    00000792 420B                   JSR         @R2
    00000794 0009                   NOP
    00000796 2F02                   MOV.L       R0,@R15
    00000798              L673:                             
         Dodge.c   439                if (decide == 0) {
         Dodge.c   440    
         Dodge.c   441                    // putpixel(x1, y1, RED);
         Dodge.c   442                }
         Dodge.c   443                else {
         Dodge.c   444                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   445                }
         Dodge.c   446                pk = pk + 2 * dy - 2 * dx;
    00000798 D31E                   MOV.L       L743+54,R3 ; __adds
    0000079A 2998                   TST         R9,R9
    0000079C 6143                   MOV         R4,R1
    0000079E 430B                   JSR         @R3
    000007A0 50F3                   MOV.L       @(12,R15),R0
    000007A2 D210                   MOV.L       L743+6,R2  ; __stoi
    000007A4 420B                   JSR         @R2
    000007A6 0009                   NOP
    000007A8 6E03                   MOV         R0,R14
    000007AA              L671:                             
    000007AA 7B01                   ADD         #1,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007AC D30F                   MOV.L       L743+14,R3 ; __itos
    000007AE 430B                   JSR         @R3
    000007B0 60B3                   MOV         R11,R0
    000007B2 D219                   MOV.L       L743+58,R2 ; __ges
    000007B4 420B                   JSR         @R2
    000007B6 61D3                   MOV         R13,R1
    000007B8 8800                   CMP/EQ      #0,R0
    000007BA 8B9A                   BF          L663
    000007BC              L662:                             
         Dodge.c   447            }
         Dodge.c   448        }
         Dodge.c   449    
         Dodge.c   450        projectiles[arrayIndex].x = x2;
    000007BC D30F                   MOV.L       L743+30,R3 ; _projectiles
    000007BE 54F4                   MOV.L       @(16,R15),R4
    000007C0 343C                   ADD         R3,R4
    000007C2 1481                   MOV.L       R8,@(4,R4)
         Dodge.c   451        projectiles[arrayIndex].y = y2;
    000007C4 52FE                   MOV.L       @(56,R15),R2
    000007C6 1422                   MOV.L       R2,@(8,R4)
         Dodge.c   452    }
    000007C8              L665:                             
    000007C8 7F14                   ADD         #20,R15
    000007CA 4F16                   LDS.L       @R15+,MACL
    000007CC 4F26                   LDS.L       @R15+,PR
    000007CE 68F6                   MOV.L       @R15+,R8
    000007D0 69F6                   MOV.L       @R15+,R9
    000007D2 6AF6                   MOV.L       @R15+,R10
    000007D4 6BF6                   MOV.L       @R15+,R11
    000007D6 6CF6                   MOV.L       @R15+,R12
    000007D8 6DF6                   MOV.L       @R15+,R13
    000007DA 000B                   RTS
    000007DC 6EF6                   MOV.L       @R15+,R14
    000007DE              L743:                             
    000007DE 0000                   .DATA.W     0
    000007E0 <00000000>             .DATA.L     __subs
    000007E4 <00000000>             .DATA.L     __stoi
    000007E8 <00000000>             .DATA.L     _abs
    000007EC <00000000>             .DATA.L     __itos
    000007F0 <00000000>             .DATA.L     __gts
    000007F4 40000000               .DATA.L     H'40000000
    000007F8 <00000000>             .DATA.L     __muls
    000007FC <00000000>             .DATA.L     _projectiles
    00000800 <00000000>             .DATA.L     __les
    00000804 <00000000>             .DATA.L     _playerHealth
    00000808 <00000000>             .DATA.L     _false
    0000080C <00000000>             .DATA.L     __lts
    00000810 3F800000               .DATA.L     H'3F800000
    00000814 <00000000>             .DATA.L     __adds
    00000818 <00000000>             .DATA.L     __ges
         Dodge.c   453    
         Dodge.c   454    void Physics()
    0000081C              _Physics:                        ; function: Physics
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __adds, __gts, __lts
    0000081C 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000081E 2FD6                   MOV.L       R13,@-R15
    00000820 2FC6                   MOV.L       R12,@-R15
         Dodge.c   455    {
         Dodge.c   456        size_t i;
         Dodge.c   457        for (i = 0; i < 128; i++)
    00000822 EC1C                   MOV         #28,R12
    00000824 2FB6                   MOV.L       R11,@-R15
    00000826 2FA6                   MOV.L       R10,@-R15
    00000828 2F96                   MOV.L       R9,@-R15
    0000082A 2F86                   MOV.L       R8,@-R15
    0000082C 4F22                   STS.L       PR,@-R15
    0000082E 4F12                   STS.L       MACL,@-R15
    00000830 D832                   MOV.L       L744+4,R8  ; _false
    00000832 9B61                   MOV.W       L744,R11   ; H'0080
    00000834 A03F                   BRA         L676
    00000836 ED00                   MOV         #0,R13
    00000838              L677:                             
    00000838 0DC7                   MUL.L       R12,R13
    0000083A 0E1A                   STS         MACL,R14
    0000083C D330                   MOV.L       L744+8,R3  ; _projectiles
    0000083E 3E3C                   ADD         R3,R14
    00000840 62E0                   MOV.B       @R14,R2
    00000842 2228                   TST         R2,R2
    00000844 8936                   BT          L681
         Dodge.c   458        {
         Dodge.c   459            if(projectiles[i].enabled) {
         Dodge.c   460                // collision with edge of map
         Dodge.c   461                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    00000846 54E1                   MOV.L       @(4,R14),R4
    00000848 D22E                   MOV.L       L744+12,R2 ; __lts
    0000084A 6143                   MOV         R4,R1
    0000084C 420B                   JSR         @R2
    0000084E E000                   MOV         #0,R0
    00000850 8800                   CMP/EQ      #0,R0
    00000852 8B11                   BF          L680
    00000854 D02C                   MOV.L       L744+16,R0 ; H'43000000
    00000856 D22D                   MOV.L       L744+20,R2 ; __gts
    00000858 420B                   JSR         @R2
    0000085A 6143                   MOV         R4,R1
    0000085C 8800                   CMP/EQ      #0,R0
    0000085E 8B0B                   BF          L680
    00000860 51E2                   MOV.L       @(8,R14),R1
    00000862 D228                   MOV.L       L744+12,R2 ; __lts
    00000864 420B                   JSR         @R2
    00000866 E000                   MOV         #0,R0
    00000868 8800                   CMP/EQ      #0,R0
    0000086A 8B05                   BF          L680
    0000086C D028                   MOV.L       L744+24,R0 ; H'42800000
    0000086E D227                   MOV.L       L744+20,R2 ; __gts
    00000870 420B                   JSR         @R2
    00000872 51E2                   MOV.L       @(8,R14),R1
    00000874 8800                   CMP/EQ      #0,R0
    00000876 8902                   BT          L679
    00000878              L680:                             
         Dodge.c   462                    // destroy projectile
         Dodge.c   463                    projectiles[i].enabled = false;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000878 6380                   MOV.B       @R8,R3
         Dodge.c   464                    continue;
    0000087A A01B                   BRA         L681
    0000087C 2E30                   MOV.B       R3,@R14
    0000087E              L679:                             
         Dodge.c   465                }
         Dodge.c   466                // move + detect player collisions
         Dodge.c   467                MoveProjectile(i,
         Dodge.c   468                    projectiles[i].x,
         Dodge.c   469                    projectiles[i].y,
         Dodge.c   470                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   471                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   472                );
    0000087E 59E2                   MOV.L       @(8,R14),R9
    00000880 D324                   MOV.L       L744+28,R3 ; __adds
    00000882 6193                   MOV         R9,R1
    00000884 430B                   JSR         @R3
    00000886 50E4                   MOV.L       @(16,R14),R0
    00000888 2F06                   MOV.L       R0,@-R15
    0000088A 5AE1                   MOV.L       @(4,R14),R10
    0000088C D221                   MOV.L       L744+28,R2 ; __adds
    0000088E 61A3                   MOV         R10,R1
    00000890 420B                   JSR         @R2
    00000892 50E3                   MOV.L       @(12,R14),R0
    00000894 6703                   MOV         R0,R7
    00000896 6693                   MOV         R9,R6
    00000898 65A3                   MOV         R10,R5
    0000089A BED7                   BSR         _MoveProjectile
    0000089C 64D3                   MOV         R13,R4
    0000089E 7F04                   ADD         #4,R15
         Dodge.c   473                // projectiles[i].x += projectiles[i].xVelocity;
         Dodge.c   474                // projectiles[i].y += projectiles[i].yVelocity;
         Dodge.c   475                // update velocity
         Dodge.c   476                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    000008A0 D21C                   MOV.L       L744+28,R2 ; __adds
    000008A2 50E5                   MOV.L       @(20,R14),R0
    000008A4 420B                   JSR         @R2
    000008A6 51E3                   MOV.L       @(12,R14),R1
    000008A8 1E03                   MOV.L       R0,@(12,R14)
         Dodge.c   477                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    000008AA 50E6                   MOV.L       @(24,R14),R0
    000008AC D319                   MOV.L       L744+28,R3 ; __adds
    000008AE 430B                   JSR         @R3
    000008B0 51E4                   MOV.L       @(16,R14),R1
    000008B2 1E04                   MOV.L       R0,@(16,R14)
    000008B4              L681:                             
    000008B4 7D01                   ADD         #1,R13
    000008B6              L676:                             
    000008B6 3DB2                   CMP/HS      R11,R13
    000008B8 8BBE                   BF          L677
         Dodge.c   478            }
         Dodge.c   479        }
         Dodge.c   480    
         Dodge.c   481        // stop player from leaving map
         Dodge.c   482            if(playerX < 1)
    000008BA E401                   MOV         #1,R4
    000008BC D516                   MOV.L       L744+32,R5 ; _playerX




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008BE 6352                   MOV.L       @R5,R3
    000008C0 3343                   CMP/GE      R4,R3
    000008C2 8D01                   BT/S        L682
         Dodge.c   483                playerX = 1;
         Dodge.c   484            if(playerX > 127)
    000008C4 E67F                   MOV         #127,R6
    000008C6 2542                   MOV.L       R4,@R5
    000008C8              L682:                             
    000008C8 6352                   MOV.L       @R5,R3
    000008CA 3367                   CMP/GT      R6,R3
    000008CC 8B00                   BF          L683
         Dodge.c   485                playerX = 127;
    000008CE 2562                   MOV.L       R6,@R5
    000008D0              L683:                             
         Dodge.c   486            if(playerY < 1)
    000008D0 D512                   MOV.L       L744+36,R5 ; _playerY
    000008D2 6352                   MOV.L       @R5,R3
    000008D4 3343                   CMP/GE      R4,R3
    000008D6 8900                   BT          L684
         Dodge.c   487                playerY = 1;
    000008D8 2542                   MOV.L       R4,@R5
    000008DA              L684:                             
         Dodge.c   488            if(playerY > 63)
    000008DA E43F                   MOV         #63,R4
    000008DC 6352                   MOV.L       @R5,R3
    000008DE 3347                   CMP/GT      R4,R3
    000008E0 8B00                   BF          L685
         Dodge.c   489                playerY = 63;
    000008E2 2542                   MOV.L       R4,@R5
    000008E4              L685:                             
         Dodge.c   490    }
    000008E4 4F16                   LDS.L       @R15+,MACL
    000008E6 4F26                   LDS.L       @R15+,PR
    000008E8 68F6                   MOV.L       @R15+,R8
    000008EA 69F6                   MOV.L       @R15+,R9
    000008EC 6AF6                   MOV.L       @R15+,R10
    000008EE 6BF6                   MOV.L       @R15+,R11
    000008F0 6CF6                   MOV.L       @R15+,R12
    000008F2 6DF6                   MOV.L       @R15+,R13
    000008F4 000B                   RTS
    000008F6 6EF6                   MOV.L       @R15+,R14
    000008F8              L744:                             
    000008F8 0080                   .DATA.W     H'0080
    000008FA 0000                   .DATA.W     0
    000008FC <00000000>             .DATA.L     _false
    00000900 <00000000>             .DATA.L     _projectiles
    00000904 <00000000>             .DATA.L     __lts
    00000908 43000000               .DATA.L     H'43000000
    0000090C <00000000>             .DATA.L     __gts
    00000910 42800000               .DATA.L     H'42800000
    00000914 <00000000>             .DATA.L     __adds
    00000918 <00000000>             .DATA.L     _playerX
    0000091C <00000000>             .DATA.L     _playerY
         Dodge.c   491    
         Dodge.c   492    void Controls()
    00000920              _Controls:                       ; function: Controls
                                                           ; frame size=8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000920 2FE6                   MOV.L       R14,@-R15
    00000922 4F22                   STS.L       PR,@-R15
         Dodge.c   493    {
         Dodge.c   494        if(!quit) {
    00000924 D268                   MOV.L       L745+2,R2  ; _quit
    00000926 6320                   MOV.B       @R2,R3
    00000928 2338                   TST         R3,R3
    0000092A 8B23                   BF          L686
         Dodge.c   495            if(IsKeyDown(KEY_CTRL_LEFT)) {
    0000092C DE67                   MOV.L       L745+6,R14 ; _playerX
    0000092E BC05                   BSR         _KeyDown
    00000930 E426                   MOV         #38,R4
    00000932 600C                   EXTU.B      R0,R0
    00000934 2008                   TST         R0,R0
    00000936 8D03                   BT/S        L687
         Dodge.c   496                playerX--;
         Dodge.c   497            }
         Dodge.c   498            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    00000938 E41B                   MOV         #27,R4
    0000093A 63E2                   MOV.L       @R14,R3
    0000093C 73FF                   ADD         #-1,R3
    0000093E 2E32                   MOV.L       R3,@R14
    00000940              L687:                             
    00000940 BBFC                   BSR         _KeyDown
    00000942 0009                   NOP
    00000944 600C                   EXTU.B      R0,R0
    00000946 2008                   TST         R0,R0
    00000948 8902                   BT          L688
         Dodge.c   499                playerX++;
    0000094A 62E2                   MOV.L       @R14,R2
    0000094C 7201                   ADD         #1,R2
    0000094E 2E22                   MOV.L       R2,@R14
    00000950              L688:                             
         Dodge.c   500            }
         Dodge.c   501            if(IsKeyDown(KEY_CTRL_UP)) {
    00000950 DE5F                   MOV.L       L745+10,R14; _playerY
    00000952 BBF3                   BSR         _KeyDown
    00000954 E41C                   MOV         #28,R4
    00000956 600C                   EXTU.B      R0,R0
    00000958 2008                   TST         R0,R0
    0000095A 8D03                   BT/S        L689
         Dodge.c   502                playerY--;
         Dodge.c   503            }
         Dodge.c   504            if(IsKeyDown(KEY_CTRL_DOWN)) {
    0000095C E425                   MOV         #37,R4
    0000095E 63E2                   MOV.L       @R14,R3
    00000960 73FF                   ADD         #-1,R3
    00000962 2E32                   MOV.L       R3,@R14
    00000964              L689:                             
    00000964 BBEA                   BSR         _KeyDown
    00000966 0009                   NOP
    00000968 600C                   EXTU.B      R0,R0
    0000096A 2008                   TST         R0,R0
    0000096C 8902                   BT          L686
         Dodge.c   505                playerY++;
    0000096E 62E2                   MOV.L       @R14,R2
    00000970 7201                   ADD         #1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000972 2E22                   MOV.L       R2,@R14
    00000974              L686:                             
         Dodge.c   506            }
         Dodge.c   507        }
         Dodge.c   508        
         Dodge.c   509    }
    00000974 4F26                   LDS.L       @R15+,PR
    00000976 000B                   RTS
    00000978 6EF6                   MOV.L       @R15+,R14
         Dodge.c   510    
         Dodge.c   511    #pragma region attacks
         Dodge.c   512    
         Dodge.c   513    // next projectile in this attack
         Dodge.c   514    void SpawnNext() {
    0000097A              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __itos
    0000097A 2FE6                   MOV.L       R14,@-R15
    0000097C 2FD6                   MOV.L       R13,@-R15
    0000097E 2FC6                   MOV.L       R12,@-R15
    00000980 2FB6                   MOV.L       R11,@-R15
    00000982 EB00                   MOV         #0,R11
    00000984 DC54                   MOV.L       L745+18,R12; _currentAttack
    00000986 2FA6                   MOV.L       R10,@-R15
    00000988 2F96                   MOV.L       R9,@-R15
    0000098A 4F22                   STS.L       PR,@-R15
    0000098C D951                   MOV.L       L745+14,R9 ; _projectileIndex
    0000098E 7FF8                   ADD         #-8,R15
    00000990 60C2                   MOV.L       @R12,R0
    00000992 8800                   CMP/EQ      #0,R0
    00000994 8D06                   BT/S        L571
    00000996 6E92                   MOV.L       @R9,R14
    00000998 8801                   CMP/EQ      #1,R0
    0000099A 8919                   BT          L572
    0000099C 8802                   CMP/EQ      #2,R0
    0000099E 8947                   BT          L573
    000009A0 A07D                   BRA         L574
    000009A2 0009                   NOP
    000009A4              L571:                            ; case label 
         Dodge.c   515        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   516        #pragma region a whole bunch of variable declarations
         Dodge.c   517        int mod;
         Dodge.c   518        int mod2;
         Dodge.c   519        int xPos;
         Dodge.c   520        int direction;
         Dodge.c   521        int directionX;
         Dodge.c   522        int directionY;
         Dodge.c   523        int i;
         Dodge.c   524        int j;
         Dodge.c   525        #pragma endregion
         Dodge.c   526        switch (currentAttack)
         Dodge.c   527        {
         Dodge.c   528            case 0:
         Dodge.c   529                mod = projectileIndex % 2;
    000009A4 60E3                   MOV         R14,R0
    000009A6 4011                   CMP/PZ      R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009A8 8B01                   BF          L692
    000009AA A005                   BRA         L693
    000009AC C901                   AND         #1,R0
    000009AE              L692:                             
    000009AE 6007                   NOT         R0,R0
    000009B0 7001                   ADD         #1,R0
    000009B2 C901                   AND         #1,R0
    000009B4 6007                   NOT         R0,R0
    000009B6 7001                   ADD         #1,R0
    000009B8              L693:                             
    000009B8 6403                   MOV         R0,R4
         Dodge.c   530                xPos = mod == 0 ? 1 : 128 - 1;
    000009BA 2448                   TST         R4,R4
    000009BC 8B01                   BF          L694
    000009BE A001                   BRA         L695
    000009C0 EA01                   MOV         #1,R10
    000009C2              L694:                             
    000009C2 EA7F                   MOV         #127,R10
    000009C4              L695:                             
         Dodge.c   531                direction = mod == 0 ? 1 : -1;
    000009C4 2448                   TST         R4,R4
    000009C6 8B01                   BF          L746
    000009C8 A07B                   BRA         L734
    000009CA 0009                   NOP
    000009CC              L746:                             
    000009CC A095                   BRA         L569
    000009CE EDFF                   MOV         #-1,R13
    000009D0              L572:                            ; case label 
         Dodge.c   532                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
         Dodge.c   533                break;
         Dodge.c   534            case 1:
         Dodge.c   535                mod = projectileIndex % 2;
    000009D0 60E3                   MOV         R14,R0
    000009D2 4011                   CMP/PZ      R0
    000009D4 8B01                   BF          L698
    000009D6 A005                   BRA         L699
    000009D8 C901                   AND         #1,R0
    000009DA              L698:                             
    000009DA 6007                   NOT         R0,R0
    000009DC 7001                   ADD         #1,R0
    000009DE C901                   AND         #1,R0
    000009E0 6007                   NOT         R0,R0
    000009E2 7001                   ADD         #1,R0
    000009E4              L699:                             
    000009E4 6403                   MOV         R0,R4
         Dodge.c   536                mod2 = (projectileIndex + 1) % 4;
         Dodge.c   537                directionX = mod == 0 ? 1 : -1;
    000009E6 2448                   TST         R4,R4
    000009E8 8B01                   BF          L700
    000009EA A001                   BRA         L701
    000009EC E301                   MOV         #1,R3
    000009EE              L700:                             
    000009EE E3FF                   MOV         #-1,R3
    000009F0              L701:                             
    000009F0 2F32                   MOV.L       R3,@R15
         Dodge.c   538                // directionY = mod2 < 2 ? 1 : -1;
         Dodge.c   539                directionY = ((projectileIndex % 8) - 4);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009F2 60E3                   MOV         R14,R0
    000009F4 4011                   CMP/PZ      R0
    000009F6 8B01                   BF          L702
    000009F8 A005                   BRA         L703
    000009FA C907                   AND         #7,R0
    000009FC              L702:                             
    000009FC 6007                   NOT         R0,R0
    000009FE 7001                   ADD         #1,R0
    00000A00 C907                   AND         #7,R0
    00000A02 6007                   NOT         R0,R0
    00000A04 7001                   ADD         #1,R0
    00000A06              L703:                             
    00000A06 70FC                   ADD         #-4,R0
         Dodge.c   540                SpawnProjectile(64, 32, (float)directionX * 2, (float)directionY, 0, 0);//Sign(-directionY) * 
                         +0.1f);
    00000A08 D334                   MOV.L       L745+22,R3 ; __itos
    00000A0A E200                   MOV         #0,R2
    00000A0C 1F01                   MOV.L       R0,@(4,R15)
    00000A0E 2F26                   MOV.L       R2,@-R15
    00000A10 430B                   JSR         @R3
    00000A12 2F26                   MOV.L       R2,@-R15
    00000A14 D131                   MOV.L       L745+22,R1 ; __itos
    00000A16 6703                   MOV         R0,R7
    00000A18 410B                   JSR         @R1
    00000A1A 50F2                   MOV.L       @(8,R15),R0
    00000A1C D130                   MOV.L       L745+26,R1 ; H'40000000
    00000A1E D331                   MOV.L       L745+30,R3 ; __muls
    00000A20 430B                   JSR         @R3
    00000A22 0009                   NOP
    00000A24 D530                   MOV.L       L745+34,R5 ; H'42000000
    00000A26 D431                   MOV.L       L745+38,R4 ; H'42800000
    00000A28 BD9E                   BSR         _SpawnProjectile
    00000A2A 6603                   MOV         R0,R6
         Dodge.c   541                break;
    00000A2C A07C                   BRA         L733
    00000A2E 0009                   NOP
    00000A30              L573:                            ; case label 
         Dodge.c   542            case 2:
         Dodge.c   543                if(projectileIndex % 5 == 0) {
    00000A30 D22F                   MOV.L       L745+42,R2 ; __modls
    00000A32 61E3                   MOV         R14,R1
    00000A34 420B                   JSR         @R2
    00000A36 E005                   MOV         #5,R0
    00000A38 2008                   TST         R0,R0
    00000A3A 8B76                   BF          L691
         Dodge.c   544                    if(projectileIndex % 10 == 0) {
    00000A3C D22C                   MOV.L       L745+42,R2 ; __modls
    00000A3E ED10                   MOV         #16,R13
    00000A40 61E3                   MOV         R14,R1
    00000A42 420B                   JSR         @R2
    00000A44 E00A                   MOV         #10,R0
    00000A46 2008                   TST         R0,R0
    00000A48 8B14                   BF          L705
         Dodge.c   545                        for (i = 0; i < 16; i++)
    00000A4A 6AB3                   MOV         R11,R10
    00000A4C A00E                   BRA         L706
    00000A4E 6EB3                   MOV         R11,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A50              L707:                             
         Dodge.c   546                        {
         Dodge.c   547                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0);
    00000A50 D723                   MOV.L       L745+26,R7 ; H'40000000
    00000A52 E300                   MOV         #0,R3
    00000A54 D221                   MOV.L       L745+22,R2 ; __itos
    00000A56 6633                   MOV         R3,R6
    00000A58 2F36                   MOV.L       R3,@-R15
    00000A5A 6533                   MOV         R3,R5
    00000A5C 2F36                   MOV.L       R3,@-R15
    00000A5E 420B                   JSR         @R2
    00000A60 60E3                   MOV         R14,R0
    00000A62 BD81                   BSR         _SpawnProjectile
    00000A64 6403                   MOV         R0,R4
    00000A66 7F08                   ADD         #8,R15
    00000A68 7A01                   ADD         #1,R10
    00000A6A 7E08                   ADD         #8,R14
    00000A6C              L706:                             
    00000A6C 3AD3                   CMP/GE      R13,R10
    00000A6E 8BEF                   BF          L707
    00000A70 A05B                   BRA         L691
    00000A72 0009                   NOP
    00000A74              L705:                             
         Dodge.c   548                        }
         Dodge.c   549                    }
         Dodge.c   550                    else {
         Dodge.c   551                        for (i = 0; i < 16; i++)
    00000A74 6AB3                   MOV         R11,R10
    00000A76 A00E                   BRA         L709
    00000A78 EE04                   MOV         #4,R14
    00000A7A              L710:                             
         Dodge.c   552                        {
         Dodge.c   553                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0);
    00000A7A E200                   MOV         #0,R2
    00000A7C D71D                   MOV.L       L745+46,R7 ; H'C0000000
    00000A7E 6623                   MOV         R2,R6
    00000A80 D51A                   MOV.L       L745+38,R5 ; H'42800000
    00000A82 2F26                   MOV.L       R2,@-R15
    00000A84 2F26                   MOV.L       R2,@-R15
    00000A86 D315                   MOV.L       L745+22,R3 ; __itos
    00000A88 430B                   JSR         @R3
    00000A8A 60E3                   MOV         R14,R0
    00000A8C BD6C                   BSR         _SpawnProjectile
    00000A8E 6403                   MOV         R0,R4
    00000A90 7F08                   ADD         #8,R15
    00000A92 7A01                   ADD         #1,R10
    00000A94 7E08                   ADD         #8,R14
    00000A96              L709:                             
    00000A96 3AD3                   CMP/GE      R13,R10
    00000A98 8BEF                   BF          L710
         Dodge.c   554                        }
         Dodge.c   555                    }
         Dodge.c   556                    
         Dodge.c   557                }
         Dodge.c   558                break;
    00000A9A A046                   BRA         L691
    00000A9C 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A9E              L574:                            ; default label 
         Dodge.c   559            default:
         Dodge.c   560                mod2 = projectileIndex % 2;
    00000A9E 60E3                   MOV         R14,R0
    00000AA0 4011                   CMP/PZ      R0
    00000AA2 8B01                   BF          L711
    00000AA4 A005                   BRA         L712
    00000AA6 C901                   AND         #1,R0
    00000AA8              L711:                             
    00000AA8 6007                   NOT         R0,R0
    00000AAA 7001                   ADD         #1,R0
    00000AAC C901                   AND         #1,R0
    00000AAE 6007                   NOT         R0,R0
    00000AB0 7001                   ADD         #1,R0
    00000AB2              L712:                             
    00000AB2 6403                   MOV         R0,R4
         Dodge.c   561                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000AB4 2448                   TST         R4,R4
    00000AB6 8B01                   BF          L713
    00000AB8 A001                   BRA         L714
    00000ABA EA01                   MOV         #1,R10
    00000ABC              L713:                             
    00000ABC EA7F                   MOV         #127,R10
    00000ABE              L714:                             
         Dodge.c   562                direction = mod2 == 0 ? 1 : -1;
    00000ABE 2448                   TST         R4,R4
    00000AC0 8B1A                   BF          L715
    00000AC2              L734:                             
    00000AC2 A01A                   BRA         L569
    00000AC4 ED01                   MOV         #1,R13
    00000AC6              L745:                             
    00000AC6 0000                   .DATA.W     0
    00000AC8 <00000000>             .DATA.L     _quit
    00000ACC <00000000>             .DATA.L     _playerX
    00000AD0 <00000000>             .DATA.L     _playerY
    00000AD4 <00000000>             .DATA.L     _projectileIndex
    00000AD8 <00000000>             .DATA.L     _currentAttack
    00000ADC <00000000>             .DATA.L     __itos
    00000AE0 40000000               .DATA.L     H'40000000
    00000AE4 <00000000>             .DATA.L     __muls
    00000AE8 42000000               .DATA.L     H'42000000
    00000AEC 42800000               .DATA.L     H'42800000
    00000AF0 <00000000>             .DATA.L     __modls
    00000AF4 C0000000               .DATA.L     H'C0000000
    00000AF8              L715:                             
    00000AF8 EDFF                   MOV         #-1,R13
    00000AFA              L569:
         Dodge.c   563                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
    00000AFA E200                   MOV         #0,R2
    00000AFC D336                   MOV.L       L747+4,R3  ; __itos
    00000AFE 2F26                   MOV.L       R2,@-R15
    00000B00 430B                   JSR         @R3
    00000B02 60D3                   MOV         R13,R0
    00000B04 D135                   MOV.L       L747+8,R1  ; H'3DCCCCCD
    00000B06 D336                   MOV.L       L747+12,R3 ; __muls
    00000B08 430B                   JSR         @R3
    00000B0A 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B0C 2F06                   MOV.L       R0,@-R15
    00000B0E 6723                   MOV         R2,R7
    00000B10 D331                   MOV.L       L747+4,R3  ; __itos
    00000B12 6623                   MOV         R2,R6
    00000B14 60E3                   MOV         R14,R0
    00000B16 7001                   ADD         #1,R0
    00000B18 430B                   JSR         @R3
    00000B1A 4008                   SHLL2       R0
    00000B1C D12E                   MOV.L       L747+4,R1  ; __itos
    00000B1E 6503                   MOV         R0,R5
    00000B20 410B                   JSR         @R1
    00000B22 60A3                   MOV         R10,R0
    00000B24 BD20                   BSR         _SpawnProjectile
    00000B26 6403                   MOV         R0,R4
         Dodge.c   564                break;
    00000B28              L733:                             
    00000B28 7F08                   ADD         #8,R15
    00000B2A              L691:                             
         Dodge.c   565        }
         Dodge.c   566    
         Dodge.c   567        projectileIndex++;
    00000B2A 6392                   MOV.L       @R9,R3
         Dodge.c   568        if(projectileIndex > maxProjectiles) {
    00000B2C D02D                   MOV.L       L747+16,R0 ; _maxProjectiles
    00000B2E 7301                   ADD         #1,R3
    00000B30 2932                   MOV.L       R3,@R9
    00000B32 6133                   MOV         R3,R1
    00000B34 6202                   MOV.L       @R0,R2
    00000B36 3127                   CMP/GT      R2,R1
    00000B38 8B0B                   BF          L717
         Dodge.c   569            KillTimer(ID_USER_TIMER5); // stop this attack
    00000B3A D12B                   MOV.L       L747+20,R1 ; _KillTimer
    00000B3C 410B                   JSR         @R1
    00000B3E E405                   MOV         #5,R4
         Dodge.c   570            currentAttack++;
    00000B40 63C2                   MOV.L       @R12,R3
    00000B42 7301                   ADD         #1,R3
    00000B44 2C32                   MOV.L       R3,@R12
         Dodge.c   571            if(currentAttack >= attacksTotal)
    00000B46 6133                   MOV         R3,R1
    00000B48 D028                   MOV.L       L747+24,R0 ; _attacksTotal
    00000B4A 6202                   MOV.L       @R0,R2
    00000B4C 3123                   CMP/GE      R2,R1
    00000B4E 8B00                   BF          L717
         Dodge.c   572                currentAttack = 0;
    00000B50 2CB2                   MOV.L       R11,@R12
    00000B52              L717:                             
         Dodge.c   573        }
         Dodge.c   574    }
    00000B52 7F08                   ADD         #8,R15
    00000B54 4F26                   LDS.L       @R15+,PR
    00000B56 69F6                   MOV.L       @R15+,R9
    00000B58 6AF6                   MOV.L       @R15+,R10
    00000B5A 6BF6                   MOV.L       @R15+,R11
    00000B5C 6CF6                   MOV.L       @R15+,R12
    00000B5E 6DF6                   MOV.L       @R15+,R13
    00000B60 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B62 6EF6                   MOV.L       @R15+,R14
         Dodge.c   575    // the next "attack"
         Dodge.c   576    void NextProjectiles() {
    00000B64              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   577        projectileIndex = 0;
    00000B64 D222                   MOV.L       L747+28,R2 ; _projectileIndex
    00000B66 E300                   MOV         #0,R3
         Dodge.c   578    
         Dodge.c   579        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues
         Dodge.c   580        switch (currentAttack)
    00000B68 D41E                   MOV.L       L747+16,R4 ; _maxProjectiles
    00000B6A 2232                   MOV.L       R3,@R2
    00000B6C D321                   MOV.L       L747+32,R3 ; _currentAttack
    00000B6E 6032                   MOV.L       @R3,R0
    00000B70 8800                   CMP/EQ      #0,R0
    00000B72 8D0C                   BT/S        L735
    00000B74 E510                   MOV         #16,R5
    00000B76 8801                   CMP/EQ      #1,R0
    00000B78 8903                   BT          L576
    00000B7A 8802                   CMP/EQ      #2,R0
    00000B7C 8904                   BT          L577
    00000B7E A006                   BRA         L735
    00000B80 0009                   NOP
    00000B82              L576:                            ; case label 
         Dodge.c   581        {
         Dodge.c   582            case 0:
         Dodge.c   583                maxProjectiles = 16;
         Dodge.c   584                break;
         Dodge.c   585            case 1:
         Dodge.c   586                maxProjectiles = 32;
    00000B82 E020                   MOV         #32,R0
         Dodge.c   587                break;
    00000B84 A004                   BRA         L719
    00000B86 2402                   MOV.L       R0,@R4
    00000B88              L577:                            ; case label 
         Dodge.c   588            case 2:
         Dodge.c   589                maxProjectiles = 15;
    00000B88 E10F                   MOV         #15,R1
         Dodge.c   590                break;
    00000B8A A001                   BRA         L719
    00000B8C 2412                   MOV.L       R1,@R4
    00000B8E              L735:                             
         Dodge.c   591            default:
         Dodge.c   592                maxProjectiles = 16;
    00000B8E 2452                   MOV.L       R5,@R4
    00000B90              L719:                             
         Dodge.c   593                break;
         Dodge.c   594        }
         Dodge.c   595    
         Dodge.c   596        SetTimer(ID_USER_TIMER5, 100, SpawnNext);
    00000B90 D619                   MOV.L       L747+36,R6 ; _SpawnNext
    00000B92 E564                   MOV         #100,R5
    00000B94 D319                   MOV.L       L747+40,R3 ; _SetTimer
    00000B96 432B                   JMP         @R3
    00000B98 E405                   MOV         #5,R4
         Dodge.c   597    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   598    
         Dodge.c   599    #pragma endregion
         Dodge.c   600    
         Dodge.c   601    #pragma endregion
         Dodge.c   602    
         Dodge.c   603    /** Add-in entry point
         Dodge.c   604     * 
         Dodge.c   605     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   606     *             strip_no - Strip number from eActivity
         Dodge.c   607     * 
         Dodge.c   608     * Returns:    NOT error
         Dodge.c   609     */
         Dodge.c   610    // Start function
         Dodge.c   611    int AddIn_main(int app_mode, unsigned short strip_no)
    00000B9A              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=16
    00000B9A 2FE6                   MOV.L       R14,@-R15
    00000B9C 4F22                   STS.L       PR,@-R15
    00000B9E 7FF8                   ADD         #-8,R15
         Dodge.c   612    {
         Dodge.c   613        unsigned int i, j; // Iteration variables
         Dodge.c   614        unsigned char str[3];
         Dodge.c   615        unsigned int key;  // Keyboard input
         Dodge.c   616    
         Dodge.c   617        // Clear out the display
         Dodge.c   618        Bdisp_AllClr_DDVRAM();
    00000BA0 D317                   MOV.L       L747+44,R3 ; _Bdisp_AllClr_DDVRAM
    00000BA2 430B                   JSR         @R3
    00000BA4 0009                   NOP
         Dodge.c   619    
         Dodge.c   620        // Set up timers for rendering and ball
         Dodge.c   621        SetTimer(ID_USER_TIMER1, 50, RenderScreen);
    00000BA6 E532                   MOV         #50,R5
    00000BA8 DE14                   MOV.L       L747+40,R14; _SetTimer
    00000BAA D616                   MOV.L       L747+48,R6 ; _RenderScreen
    00000BAC 4E0B                   JSR         @R14
    00000BAE E401                   MOV         #1,R4
         Dodge.c   622        SetTimer(ID_USER_TIMER2, 50, Controls);
    00000BB0 D615                   MOV.L       L747+52,R6 ; _Controls
    00000BB2 E532                   MOV         #50,R5
    00000BB4 4E0B                   JSR         @R14
    00000BB6 E402                   MOV         #2,R4
         Dodge.c   623        SetTimer(ID_USER_TIMER3, 50, Physics);
    00000BB8 D614                   MOV.L       L747+56,R6 ; _Physics
    00000BBA E532                   MOV         #50,R5
    00000BBC 4E0B                   JSR         @R14
    00000BBE E403                   MOV         #3,R4
         Dodge.c   624        SetTimer(ID_USER_TIMER4, 5000, NextProjectiles);
    00000BC0 D613                   MOV.L       L747+60,R6 ; _NextProjectiles
    00000BC2 9507                   MOV.W       L747,R5    ; H'1388
    00000BC4 4E0B                   JSR         @R14
    00000BC6 E404                   MOV         #4,R4
         Dodge.c   625    
         Dodge.c   626        // Set quit handler
         Dodge.c   627        SetQuitHandler(AppQuit);
    00000BC8 D412                   MOV.L       L747+64,R4 ; _AppQuit
    00000BCA D213                   MOV.L       L747+68,R2 ; _SetQuitHandler




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BCC 420B                   JSR         @R2
    00000BCE 0009                   NOP
         Dodge.c   628    
         Dodge.c   629        // The main thread manages the keys
         Dodge.c   630        while (IsKeyUp(KEY_CTRL_MENU))
    00000BD0 A041                   BRA         L720
    00000BD2 0009                   NOP
    00000BD4              L747:                             
    00000BD4 1388                   .DATA.W     H'1388
    00000BD6 0000                   .DATA.W     0
    00000BD8 <00000000>             .DATA.L     __itos
    00000BDC 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000BE0 <00000000>             .DATA.L     __muls
    00000BE4 <00000000>             .DATA.L     _maxProjectiles
    00000BE8 <00000000>             .DATA.L     _KillTimer
    00000BEC <00000000>             .DATA.L     _attacksTotal
    00000BF0 <00000000>             .DATA.L     _projectileIndex
    00000BF4 <00000000>             .DATA.L     _currentAttack
    00000BF8 <00000000>             .DATA.L     _SpawnNext
    00000BFC <00000000>             .DATA.L     _SetTimer
    00000C00 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000C04 <00000000>             .DATA.L     _RenderScreen
    00000C08 <00000000>             .DATA.L     _Controls
    00000C0C <00000000>             .DATA.L     _Physics
    00000C10 <00000000>             .DATA.L     _NextProjectiles
    00000C14 <00000000>             .DATA.L     _AppQuit
    00000C18 <00000000>             .DATA.L     _SetQuitHandler
    00000C1C              L721:                             
         Dodge.c   631        {
         Dodge.c   632            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00000C1C DE14                   MOV.L       L748,R14   ; _GetKeyWait
    00000C1E 67F3                   MOV         R15,R7
    00000C20 E600                   MOV         #0,R6
    00000C22 6563                   MOV         R6,R5
    00000C24 4E0B                   JSR         @R14
    00000C26 6463                   MOV         R6,R4
         Dodge.c   633        
         Dodge.c   634            if (keyResp == KEYREP_KEYEVENT)
    00000C28 8801                   CMP/EQ      #1,R0
    00000C2A 8F06                   BF/S        L722
    00000C2C 6403                   MOV         R0,R4
         Dodge.c   635            {
         Dodge.c   636                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    00000C2E 60F2                   MOV.L       @R15,R0
    00000C30 8830                   CMP/EQ      #48,R0
    00000C32 890C                   BT          L570
    00000C34 60F2                   MOV.L       @R15,R0
    00000C36 882F                   CMP/EQ      #47,R0
    00000C38 8909                   BT          L570
    00000C3A              L722:                             
         Dodge.c   637                {
         Dodge.c   638                    AppQuit();
         Dodge.c   639                    break;
         Dodge.c   640                }
         Dodge.c   641            }
         Dodge.c   642    
         Dodge.c   643            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C3A BA7F                   BSR         _KeyDown
    00000C3C E430                   MOV         #48,R4
    00000C3E 600C                   EXTU.B      R0,R0
    00000C40 2008                   TST         R0,R0
    00000C42 8B04                   BF          L570
    00000C44 BA7A                   BSR         _KeyDown
    00000C46 E42F                   MOV         #47,R4
    00000C48 600C                   EXTU.B      R0,R0
    00000C4A 2008                   TST         R0,R0
    00000C4C 8903                   BT          L720
    00000C4E              L570:
         Dodge.c   644            {
         Dodge.c   645                AppQuit();
    00000C4E BB0D                   BSR         _AppQuit
    00000C50 0009                   NOP
         Dodge.c   646                break;
    00000C52 A005                   BRA         L725
    00000C54 0009                   NOP
    00000C56              L720:                             
    00000C56 BA71                   BSR         _KeyDown
    00000C58 E430                   MOV         #48,R4
    00000C5A 600C                   EXTU.B      R0,R0
    00000C5C 2008                   TST         R0,R0
    00000C5E 89DD                   BT          L721
    00000C60              L725:                             
         Dodge.c   647            }
         Dodge.c   648        }
         Dodge.c   649    
         Dodge.c   650        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   651        AppQuit();
    00000C60 BB04                   BSR         _AppQuit
    00000C62 0009                   NOP
         Dodge.c   652    
         Dodge.c   653        // At the end, return application status
         Dodge.c   654        return true;
    00000C64 D303                   MOV.L       L748+4,R3  ; _true
    00000C66 6030                   MOV.B       @R3,R0
         Dodge.c   655    }
    00000C68 7F08                   ADD         #8,R15
    00000C6A 4F26                   LDS.L       @R15+,PR
    00000C6C 000B                   RTS
    00000C6E 6EF6                   MOV.L       @R15+,R14
    00000C70              L748:                             
    00000C70 <00000000>             .DATA.L     _GetKeyWait
    00000C74 <00000000>             .DATA.L     _true
         Dodge.c   656    
         Dodge.c   657    #pragma region Do not touch
         Dodge.c   658    
         Dodge.c   659    // Source code from here down should not be changed according to the
         Dodge.c   660    // CASIO SDK sample project.
         Dodge.c   661    
         Dodge.c   662    #pragma section _BR_Size
         Dodge.c   663    unsigned long BR_Size;
         Dodge.c   664    #pragma section
         Dodge.c   665    
         Dodge.c   666    #pragma section _TOP
         Dodge.c   667    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   668    //****************************************************************************
         Dodge.c   669    //  InitializeSystem
         Dodge.c   670    //
         Dodge.c   671    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   672    //              OptionNum : Option Number (only eActivity)
         Dodge.c   673    //
         Dodge.c   674    //  retval  :   1 = No error / 0 = Error
         Dodge.c   675    //
         Dodge.c   676    //****************************************************************************
         Dodge.c   677    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   678    {
         Dodge.c   679        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L749+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L749:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   680    }
         Dodge.c   681    
         Dodge.c   682    #pragma section
         Dodge.c   683    
         Dodge.c   684    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _true:                           ; static: true
    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000003               .DATA.L     H'00000003
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040
    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _quit:                           ; static: quit
    00000010 00                     .DATA.B     H'00
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00000E00               .RES.L      896




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E00              _projectileIndex:                ; static: projectileIndex
    00000E00 00000004               .RES.L      1
    00000E04              _maxProjectiles:                 ; static: maxProjectiles
    00000E04 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:58:58  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        59




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      684



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000C78 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000001C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000011 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000E08 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00001ABD Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          40
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           182






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmkF48D.tmp 

