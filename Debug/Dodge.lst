SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    
         Dodge.c     2    // Import some libraries
         Dodge.c     3    #include "stdio.h"    // Standard IO
         Dodge.c     4    #include <stdlib.h>
         Dodge.c     5    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     6    #include "dispbios.h" // Display BIOS
         Dodge.c     7    #include "timer.h"    // Timer
         Dodge.c     8    
         Dodge.c     9    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    10    
         Dodge.c    11    #define __KEYBIOS_H__
         Dodge.c    12    #define KEY_CHAR_0 71
         Dodge.c    13    #define KEY_CHAR_1 72
         Dodge.c    14    #define KEY_CHAR_2 62
         Dodge.c    15    #define KEY_CHAR_3 52
         Dodge.c    16    #define KEY_CHAR_4 73
         Dodge.c    17    #define KEY_CHAR_5 63
         Dodge.c    18    #define KEY_CHAR_6 53
         Dodge.c    19    #define KEY_CHAR_7 74
         Dodge.c    20    #define KEY_CHAR_8 64
         Dodge.c    21    #define KEY_CHAR_9 54
         Dodge.c    22    #define KEY_CHAR_DP 61
         Dodge.c    23    #define KEY_CHAR_EXP 51
         Dodge.c    24    #define KEY_CHAR_PMINUS 41
         Dodge.c    25    #define KEY_CHAR_PLUS 42
         Dodge.c    26    #define KEY_CHAR_MINUS 32
         Dodge.c    27    #define KEY_CHAR_MULT 43
         Dodge.c    28    #define KEY_CHAR_DIV 33
         Dodge.c    29    #define KEY_CHAR_FRAC 75
         Dodge.c    30    #define KEY_CHAR_LPAR 55
         Dodge.c    31    #define KEY_CHAR_RPAR 45
         Dodge.c    32    #define KEY_CHAR_COMMA 35
         Dodge.c    33    #define KEY_CHAR_STORE 25
         Dodge.c    34    #define KEY_CHAR_LOG 66
         Dodge.c    35    #define KEY_CHAR_LN 56
         Dodge.c    36    #define KEY_CHAR_SIN 46
         Dodge.c    37    #define KEY_CHAR_COS 36
         Dodge.c    38    #define KEY_CHAR_TAN 26
         Dodge.c    39    #define KEY_CHAR_SQUARE 67
         Dodge.c    40    #define KEY_CHAR_POW 57
         Dodge.c    41    #define KEY_CTRL_EXE 31
         Dodge.c    42    #define KEY_CTRL_DEL 44
         Dodge.c    43    #define KEY_CTRL_AC 32
         Dodge.c    44    #define KEY_CTRL_FD 65
         Dodge.c    45    #define KEY_CTRL_EXIT 47
         Dodge.c    46    #define KEY_CTRL_SHIFT 78
         Dodge.c    47    #define KEY_CTRL_ALPHA 77
         Dodge.c    48    #define KEY_CTRL_OPTN 68
         Dodge.c    49    #define KEY_CTRL_VARS 58
         Dodge.c    50    #define KEY_CTRL_UP 28
         Dodge.c    51    #define KEY_CTRL_DOWN 37
         Dodge.c    52    #define KEY_CTRL_LEFT 38
         Dodge.c    53    #define KEY_CTRL_RIGHT 27
         Dodge.c    54    #define KEY_CTRL_F1 79




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_F2 69
         Dodge.c    56    #define KEY_CTRL_F3 59
         Dodge.c    57    #define KEY_CTRL_F4 49
         Dodge.c    58    #define KEY_CTRL_F5 39
         Dodge.c    59    #define KEY_CTRL_F6 29
         Dodge.c    60    #define KEY_CTRL_MENU 48
         Dodge.c    61    #ifndef OS2Change
         Dodge.c    62    #define OS2Change
         Dodge.c    63    #ifndef OS2Change_GetOS2
         Dodge.c    64    #define OS2Change_GetOS2
         Dodge.c    65    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    66    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    67    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    68    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    69    {
         Dodge.c    70    unsigned char mainversion;
         Dodge.c    71    unsigned char minorversion;
         Dodge.c    72    unsigned short release;
         Dodge.c    73    unsigned short build;
         Dodge.c    74    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L736+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    75    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L736+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L736+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    76    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 201B                   OR          R1,R0
         Dodge.c    77    #define isOS2 (OSVersionAsInt() >= 0x02020000)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    78    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    79    #endif
         Dodge.c    80    #ifndef OS2Change_Keyboard
         Dodge.c    81    #define OS2Change_Keyboard
         Dodge.c    82    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    83    {
         Dodge.c    84    char i;
         Dodge.c    85    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L603:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L603
         Dodge.c    86    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    87    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    88    {
         Dodge.c    89    unsigned char result=0;
         Dodge.c    90    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    91    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    92    char*PORTB=(void*)0xA4000122;
         Dodge.c    93    char*PORTM=(void*)0xA4000138;
         Dodge.c    94    char*PORTA=(void*)0xA4000120;
         Dodge.c    95    short smask;
         Dodge.c    96    char cmask;
         Dodge.c    97    unsigned char column, row;
         Dodge.c    98    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c    99    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   100    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L604
    00000072 A005                   BRA         L605
    00000074 C907                   AND         #7,R0
    00000076              L604:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L605:                             
         Dodge.c   101    cmask = ~( 1 << ( row %8) );
         Dodge.c   102    if(row <8)
    00000080 994B                   MOV.W       L736,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L736+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L736+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L736+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L606
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   103    {
         Dodge.c   104      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   105      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   106      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   107      *PORTB = cmask;
    000000AE D221                   MOV.L       L736+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   108      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L730
    000000B8 CB0F                   OR          #15,R0
    000000BA              L606:                             
         Dodge.c   109    }
         Dodge.c   110    else
         Dodge.c   111    {
         Dodge.c   112      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   113      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
         Dodge.c   114      delay();
    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   115      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L736+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   116      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L730:                             
         Dodge.c   117    }
         Dodge.c   118    
         Dodge.c   119    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   120    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L736+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   121    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   122    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   123    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   124    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   125    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L736+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   126    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   127    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   128    
         Dodge.c   129    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   130    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12
    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L736:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   131    
         Dodge.c   132    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   133    {
         Dodge.c   134    unsigned short key[8];
         Dodge.c   135    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L737,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L737+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L609
         Dodge.c   136    if(isOS2)
         Dodge.c   137    {
         Dodge.c   138      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L737+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   139      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L737+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   140     
         Dodge.c   141      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1
    00000174 D24B                   MOV.L       L737+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L611
    000001A4 CA01                   XOR         #1,R0
    000001A6              L609:                             
         Dodge.c   142    }
         Dodge.c   143    else
         Dodge.c   144    {
         Dodge.c   145      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L737+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L737+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   146    }
         Dodge.c   147    }
    000001C2              L611:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   148    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15
    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   149    {
         Dodge.c   150    unsigned char x, ret;
         Dodge.c   151    
         Dodge.c   152    ret = GetKey(key);
    000001D4 D334                   MOV.L       L737+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   153    
         Dodge.c   154    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L614:                             
         Dodge.c   155    {
         Dodge.c   156      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L615
         Dodge.c   157      {
         Dodge.c   158       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   159       break;
    000001EE A004                   BRA         L613
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L615:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L614
    000001FA              L613:                             
         Dodge.c   160      }
         Dodge.c   161    }
         Dodge.c   162    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   163    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   164    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   165    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   166    #define GetKey(x) GetKeyMod(x)
         Dodge.c   167    #endif
         Dodge.c   168    #endif
         Dodge.c   169    
         Dodge.c   170    #pragma endregion
         Dodge.c   171    
         Dodge.c   172    #pragma region Constants
         Dodge.c   173    
         Dodge.c   174    // true/false since it's 2018
         Dodge.c   175    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   176    const char false = 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    
         Dodge.c   178    // Display properties
         Dodge.c   179    const char DISPLAY_WIDTH    = 128;
         Dodge.c   180    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   181    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   182    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   183    
         Dodge.c   184    #pragma endregion
         Dodge.c   185    
         Dodge.c   186    struct Projectile {
         Dodge.c   187        char enabled;
         Dodge.c   188        float x;
         Dodge.c   189        float y;
         Dodge.c   190        float xVelocity;
         Dodge.c   191        float yVelocity;
         Dodge.c   192        float xAcceleration;
         Dodge.c   193        float yAcceleration;
         Dodge.c   194    };
         Dodge.c   195    struct Projectile projectiles[128];
         Dodge.c   196    
         Dodge.c   197    #pragma region Variables
         Dodge.c   198    
         Dodge.c   199    int playerHealth = 128;
         Dodge.c   200    int playerX = 64;
         Dodge.c   201    int playerY = 32;
         Dodge.c   202    
         Dodge.c   203    int projectileIndex;
         Dodge.c   204    int maxProjectiles;
         Dodge.c   205    int currentAttack = 0;
         Dodge.c   206    const int attacksTotal = 3;
         Dodge.c   207    
         Dodge.c   208    char quit = 0;
         Dodge.c   209    
         Dodge.c   210    #pragma endregion
         Dodge.c   211    
         Dodge.c   212    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   213        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L618
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L618:                             
         Dodge.c   214        if (x < 0) return -1;
    00000210 4411                   CMP/PZ      R4
    00000212 8901                   BT          L620
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L620:                             
         Dodge.c   215        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   216    }
    0000021A              L619:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   217    float Signf(float x) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   218        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L737+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L621
    0000022C D020                   MOV.L       L737+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L621:                             
         Dodge.c   219        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L737+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L623
    00000240 D01D                   MOV.L       L737+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L623:                             
         Dodge.c   220        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   221    }
    0000024A              L622:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   222    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   223        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L624
         Dodge.c   224            return a;
    00000254 000B                   RTS
    00000256 6043                   MOV         R4,R0
    00000258              L624:                             
         Dodge.c   225        else
         Dodge.c   226            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   227    }
    0000025A              L625:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP
         Dodge.c   228    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   229        if(a < b)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L627
         Dodge.c   230            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L627:                             
         Dodge.c   231        else
         Dodge.c   232            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   233    }
    00000268              L628:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   234    
         Dodge.c   235    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   236    {
         Dodge.c   237        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L737+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   238        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   239        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   240        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   241        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   242    
         Dodge.c   243        quit = true;
    00000286 D20E                   MOV.L       L737+44,R2 ; _true
    00000288 D10E                   MOV.L       L737+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   244    
         Dodge.c   245        return;
         Dodge.c   246    }
    0000028E 4F26                   LDS.L       @R15+,PR
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L737:                             
    00000294 A44B0000               .DATA.L     H'A44B0000
    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy
    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   247    
         Dodge.c   248    #pragma region Drawing functions
         Dodge.c   249    
         Dodge.c   250    /** Draws the projectils */
         Dodge.c   251    void DrawProjectiles()
    000002C8              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
    000002D2 2F96                   MOV.L       R9,@-R15
    000002D4 2F86                   MOV.L       R8,@-R15
    000002D6 4F22                   STS.L       PR,@-R15
    000002D8 D446                   MOV.L       L738+4,R4  ; _projectiles
    000002DA 7FE8                   ADD         #-24,R15
    000002DC 9388                   MOV.W       L738,R3    ; H'0E00
    000002DE 6543                   MOV         R4,R5
    000002E0 6C43                   MOV         R4,R12
    000002E2 6A43                   MOV         R4,R10
    000002E4 343C                   ADD         R3,R4
    000002E6 1F45                   MOV.L       R4,@(20,R15)
         Dodge.c   252    {   
         Dodge.c   253        float x1;
         Dodge.c   254        float y1;
         Dodge.c   255        float x2;
         Dodge.c   256        float y2;
         Dodge.c   257        float dx;
         Dodge.c   258        float dy;
         Dodge.c   259        int x;
         Dodge.c   260        int y;
         Dodge.c   261        int decide;
         Dodge.c   262        int pk;
         Dodge.c   263        int j;
         Dodge.c   264    
         Dodge.c   265        size_t i;
         Dodge.c   266        for (i = 0; i < 128; i++)
    000002E8              L631:                             
         Dodge.c   267        {
         Dodge.c   268            if(projectiles[i].enabled) {
    000002E8 63A0                   MOV.B       @R10,R3
    000002EA 2338                   TST         R3,R3
    000002EC 8B01                   BF          L739
    000002EE A0C2                   BRA         L632
    000002F0 0009                   NOP
    000002F2              L739:                             
         Dodge.c   269                x1 = projectiles[i].x;
    000002F2 54C1                   MOV.L       @(4,R12),R4
         Dodge.c   270                y1 = projectiles[i].y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   271                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000002F4 D340                   MOV.L       L738+8,R3  ; __adds
    000002F6 6143                   MOV         R4,R1
    000002F8 1F41                   MOV.L       R4,@(4,R15)
    000002FA 55C2                   MOV.L       @(8,R12),R5
    000002FC 2F52                   MOV.L       R5,@R15
    000002FE 430B                   JSR         @R3
    00000300 50C3                   MOV.L       @(12,R12),R0
         Dodge.c   272                y2 = projectiles[i].y + projectiles[i].yVelocity;
    00000302 6153                   MOV         R5,R1
    00000304 D33C                   MOV.L       L738+8,R3  ; __adds
    00000306 1F03                   MOV.L       R0,@(12,R15)
    00000308 430B                   JSR         @R3
    0000030A 50C4                   MOV.L       @(16,R12),R0
    0000030C 1F02                   MOV.L       R0,@(8,R15)
         Dodge.c   273    
         Dodge.c   274                dx = abs(x2 - x1);
    0000030E 51F3                   MOV.L       @(12,R15),R1
    00000310 D33A                   MOV.L       L738+12,R3 ; __subs
    00000312 430B                   JSR         @R3
    00000314 50F1                   MOV.L       @(4,R15),R0
    00000316 D23A                   MOV.L       L738+16,R2 ; __stoi
    00000318 420B                   JSR         @R2
    0000031A 0009                   NOP
    0000031C D339                   MOV.L       L738+20,R3 ; _abs
    0000031E 430B                   JSR         @R3
    00000320 6403                   MOV         R0,R4
    00000322 D239                   MOV.L       L738+24,R2 ; __itos
    00000324 420B                   JSR         @R2
    00000326 0009                   NOP
         Dodge.c   275                dy = abs(y2 - y1);
    00000328 51F2                   MOV.L       @(8,R15),R1
    0000032A 6B03                   MOV         R0,R11
    0000032C D333                   MOV.L       L738+12,R3 ; __subs
    0000032E 430B                   JSR         @R3
    00000330 60F2                   MOV.L       @R15,R0
    00000332 D233                   MOV.L       L738+16,R2 ; __stoi
    00000334 420B                   JSR         @R2
    00000336 0009                   NOP
    00000338 D332                   MOV.L       L738+20,R3 ; _abs
    0000033A 430B                   JSR         @R3
    0000033C 6403                   MOV         R0,R4
    0000033E D232                   MOV.L       L738+24,R2 ; __itos
    00000340 420B                   JSR         @R2
    00000342 0009                   NOP
         Dodge.c   276    
         Dodge.c   277                decide = (dx > dy);
    00000344 D331                   MOV.L       L738+28,R3 ; __gts
    00000346 6403                   MOV         R0,R4
    00000348 430B                   JSR         @R3
    0000034A 61B3                   MOV         R11,R1
         Dodge.c   278                
         Dodge.c   279                pk = 2 * dy - dx;
    0000034C D231                   MOV.L       L738+36,R2 ; __muls
    0000034E 6803                   MOV         R0,R8
    00000350 D02F                   MOV.L       L738+32,R0 ; H'40000000
    00000352 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000354 6143                   MOV         R4,R1
    00000356 6D03                   MOV         R0,R13
    00000358 D328                   MOV.L       L738+12,R3 ; __subs
    0000035A 6103                   MOV         R0,R1
    0000035C 430B                   JSR         @R3
    0000035E 60B3                   MOV         R11,R0
    00000360 D227                   MOV.L       L738+16,R2 ; __stoi
    00000362 420B                   JSR         @R2
    00000364 0009                   NOP
    00000366 6E03                   MOV         R0,R14
    00000368 D32A                   MOV.L       L738+36,R3 ; __muls
         Dodge.c   280                for (j = 0; j <= dx; j++) {
    0000036A E900                   MOV         #0,R9
    0000036C D028                   MOV.L       L738+32,R0 ; H'40000000
    0000036E 430B                   JSR         @R3
    00000370 61B3                   MOV         R11,R1
    00000372 D222                   MOV.L       L738+12,R2 ; __subs
    00000374 420B                   JSR         @R2
    00000376 61D3                   MOV         R13,R1
    00000378 1F04                   MOV.L       R0,@(16,R15)
    0000037A 6193                   MOV         R9,R1
    0000037C D326                   MOV.L       L738+40,R3 ; __les
    0000037E 430B                   JSR         @R3
    00000380 60B3                   MOV         R11,R0
    00000382 8800                   CMP/EQ      #0,R0
    00000384 8977                   BT          L632
    00000386              L634:                             
         Dodge.c   281                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    00000386 E601                   MOV         #1,R6
    00000388 D21D                   MOV.L       L738+16,R2 ; __stoi
    0000038A 420B                   JSR         @R2
    0000038C 60F2                   MOV.L       @R15,R0
    0000038E 6503                   MOV         R0,R5
    00000390 D31B                   MOV.L       L738+16,R3 ; __stoi
    00000392 430B                   JSR         @R3
    00000394 50F1                   MOV.L       @(4,R15),R0
    00000396 D321                   MOV.L       L738+44,R3 ; _Bdisp_SetPoint_VRAM
    00000398 430B                   JSR         @R3
    0000039A 6403                   MOV         R0,R4
         Dodge.c   282                    // // check for collision (Shouldn't be in this function, but wasn't working outside)
         Dodge.c   283                    // if(IsCollidingWithPlayer((int)x1, (int)y1)) {
         Dodge.c   284                    //     // damage player
         Dodge.c   285                    //     playerHealth -= 1;
         Dodge.c   286                    //     // destroy projectile
         Dodge.c   287                    //     projectiles[i].enabled = false;
         Dodge.c   288                    //     return;
         Dodge.c   289                    // }
         Dodge.c   290                    
         Dodge.c   291                    // checking either to decrement or increment the
         Dodge.c   292                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   293                    x1 < x2 ? x1++ : x1--;
    0000039C 51F1                   MOV.L       @(4,R15),R1
    0000039E D220                   MOV.L       L738+48,R2 ; __lts
    000003A0 420B                   JSR         @R2
    000003A2 50F3                   MOV.L       @(12,R15),R0
    000003A4 8800                   CMP/EQ      #0,R0
    000003A6 8906                   BT          L635




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003A8 D11E                   MOV.L       L738+52,R1 ; H'3F800000
    000003AA D313                   MOV.L       L738+8,R3  ; __adds
    000003AC 430B                   JSR         @R3
    000003AE 50F1                   MOV.L       @(4,R15),R0
    000003B0 1F01                   MOV.L       R0,@(4,R15)
    000003B2 A006                   BRA         L636
    000003B4 0009                   NOP
    000003B6              L635:                             
    000003B6 51F1                   MOV.L       @(4,R15),R1
    000003B8 D01A                   MOV.L       L738+52,R0 ; H'3F800000
    000003BA D210                   MOV.L       L738+12,R2 ; __subs
    000003BC 420B                   JSR         @R2
    000003BE 0009                   NOP
    000003C0 1F01                   MOV.L       R0,@(4,R15)
    000003C2              L636:                             
         Dodge.c   294                    if (pk < 0) {
    000003C2 4E11                   CMP/PZ      R14
    000003C4 8930                   BT          L637
         Dodge.c   295                        // decision value will decide to plot
         Dodge.c   296                        // either  x1 or y1 in x's position
         Dodge.c   297                        if (decide == 0) {
    000003C6 2888                   TST         R8,R8
    000003C8 8B07                   BF          L638
         Dodge.c   298                            // putpixel(x1, y1, RED);
         Dodge.c   299                            pk = pk + 2 * dy;
    000003CA D20F                   MOV.L       L738+24,R2 ; __itos
    000003CC 420B                   JSR         @R2
    000003CE 60E3                   MOV         R14,R0
    000003D0 D309                   MOV.L       L738+8,R3  ; __adds
    000003D2 430B                   JSR         @R3
    000003D4 61D3                   MOV         R13,R1
    000003D6 A006                   BRA         L731
    000003D8 0009                   NOP
    000003DA              L638:                             
         Dodge.c   300                        }
         Dodge.c   301                        else {
         Dodge.c   302                            //(y1,x1) is passed in xt
         Dodge.c   303                            // putpixel(y1, x1, YELLOW);
         Dodge.c   304                            pk = pk + 2 * dy;
    000003DA D20B                   MOV.L       L738+24,R2 ; __itos
    000003DC 420B                   JSR         @R2
    000003DE 60E3                   MOV         R14,R0
    000003E0 D305                   MOV.L       L738+8,R3  ; __adds
    000003E2 430B                   JSR         @R3
    000003E4 61D3                   MOV         R13,R1
    000003E6              L731:                             
    000003E6 D206                   MOV.L       L738+16,R2 ; __stoi
    000003E8 420B                   JSR         @R2
    000003EA 0009                   NOP
    000003EC A03A                   BRA         L640
    000003EE 6E03                   MOV         R0,R14
    000003F0              L738:                             
    000003F0 0E00                   .DATA.W     H'0E00
    000003F2 0000                   .DATA.W     0
    000003F4 <00000000>             .DATA.L     _projectiles
    000003F8 <00000000>             .DATA.L     __adds
    000003FC <00000000>             .DATA.L     __subs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000400 <00000000>             .DATA.L     __stoi
    00000404 <00000000>             .DATA.L     _abs
    00000408 <00000000>             .DATA.L     __itos
    0000040C <00000000>             .DATA.L     __gts
    00000410 40000000               .DATA.L     H'40000000
    00000414 <00000000>             .DATA.L     __muls
    00000418 <00000000>             .DATA.L     __les
    0000041C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000420 <00000000>             .DATA.L     __lts
    00000424 3F800000               .DATA.L     H'3F800000
    00000428              L637:                             
         Dodge.c   305                        }
         Dodge.c   306                    }
         Dodge.c   307                    else {
         Dodge.c   308                        y1 < y2 ? y1++ : y1--;
    00000428 61F2                   MOV.L       @R15,R1
    0000042A D24B                   MOV.L       L740+4,R2  ; __lts
    0000042C 420B                   JSR         @R2
    0000042E 50F2                   MOV.L       @(8,R15),R0
    00000430 8800                   CMP/EQ      #0,R0
    00000432 8906                   BT          L641
    00000434 D149                   MOV.L       L740+8,R1  ; H'3F800000
    00000436 D34A                   MOV.L       L740+12,R3 ; __adds
    00000438 430B                   JSR         @R3
    0000043A 60F2                   MOV.L       @R15,R0
    0000043C 2F02                   MOV.L       R0,@R15
    0000043E A006                   BRA         L642
    00000440 0009                   NOP
    00000442              L641:                             
    00000442 61F2                   MOV.L       @R15,R1
    00000444 D045                   MOV.L       L740+8,R0  ; H'3F800000
    00000446 D247                   MOV.L       L740+16,R2 ; __subs
    00000448 420B                   JSR         @R2
    0000044A 0009                   NOP
    0000044C 2F02                   MOV.L       R0,@R15
    0000044E              L642:                             
         Dodge.c   309                        if (decide == 0) {
    0000044E 2888                   TST         R8,R8
         Dodge.c   310            
         Dodge.c   311                            // putpixel(x1, y1, RED);
         Dodge.c   312                        }
         Dodge.c   313                        else {
         Dodge.c   314                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   315                        }
         Dodge.c   316                        pk = pk + 2 * dy - 2 * dx;
    00000450 D345                   MOV.L       L740+20,R3 ; __itos
    00000452 430B                   JSR         @R3
    00000454 60E3                   MOV         R14,R0
    00000456 D242                   MOV.L       L740+12,R2 ; __adds
    00000458 420B                   JSR         @R2
    0000045A 51F4                   MOV.L       @(16,R15),R1
    0000045C D343                   MOV.L       L740+24,R3 ; __stoi
    0000045E 430B                   JSR         @R3
    00000460 0009                   NOP
    00000462 6E03                   MOV         R0,R14
    00000464              L640:                             
    00000464 D240                   MOV.L       L740+20,R2 ; __itos




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000466 7901                   ADD         #1,R9
    00000468 420B                   JSR         @R2
    0000046A 6093                   MOV         R9,R0
    0000046C D340                   MOV.L       L740+28,R3 ; __ges
    0000046E 430B                   JSR         @R3
    00000470 61B3                   MOV         R11,R1
    00000472 8800                   CMP/EQ      #0,R0
    00000474 8B87                   BF          L634
    00000476              L632:                             
    00000476 7A1C                   ADD         #28,R10
    00000478 52F5                   MOV.L       @(20,R15),R2
    0000047A 3A22                   CMP/HS      R2,R10
    0000047C 8D02                   BT/S        L741
    0000047E 7C1C                   ADD         #28,R12
    00000480 AF32                   BRA         L631
    00000482 0009                   NOP
    00000484              L741:                             
         Dodge.c   317                    }
         Dodge.c   318                }
         Dodge.c   319            }
         Dodge.c   320        }
         Dodge.c   321    }
    00000484 7F18                   ADD         #24,R15
    00000486 4F26                   LDS.L       @R15+,PR
    00000488 68F6                   MOV.L       @R15+,R8
    0000048A 69F6                   MOV.L       @R15+,R9
    0000048C 6AF6                   MOV.L       @R15+,R10
    0000048E 6BF6                   MOV.L       @R15+,R11
    00000490 6CF6                   MOV.L       @R15+,R12
    00000492 6DF6                   MOV.L       @R15+,R13
    00000494 000B                   RTS
    00000496 6EF6                   MOV.L       @R15+,R14
         Dodge.c   322    /** Draws the player */
         Dodge.c   323    void DrawPlayer()
    00000498              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=16
    00000498 2FE6                   MOV.L       R14,@-R15
         Dodge.c   324    {   
         Dodge.c   325        Bdisp_SetPoint_VRAM(playerX, playerY, 1);
    0000049A E601                   MOV         #1,R6
    0000049C 2FD6                   MOV.L       R13,@-R15
    0000049E 2FC6                   MOV.L       R12,@-R15
    000004A0 4F22                   STS.L       PR,@-R15
    000004A2 DC34                   MOV.L       L740+32,R12; _playerX
    000004A4 DD34                   MOV.L       L740+36,R13; _playerY
    000004A6 DE35                   MOV.L       L740+40,R14; _Bdisp_SetPoint_VRAM
    000004A8 65D2                   MOV.L       @R13,R5
    000004AA 4E0B                   JSR         @R14
    000004AC 64C2                   MOV.L       @R12,R4
         Dodge.c   326        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    000004AE E601                   MOV         #1,R6
    000004B0 65D2                   MOV.L       @R13,R5
    000004B2 64C2                   MOV.L       @R12,R4
    000004B4 4E0B                   JSR         @R14
    000004B6 7401                   ADD         #1,R4
         Dodge.c   327        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    000004B8 65D2                   MOV.L       @R13,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004BA E601                   MOV         #1,R6
    000004BC 64C2                   MOV.L       @R12,R4
    000004BE 4E0B                   JSR         @R14
    000004C0 74FF                   ADD         #-1,R4
         Dodge.c   328        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    000004C2 E601                   MOV         #1,R6
    000004C4 65D2                   MOV.L       @R13,R5
    000004C6 7501                   ADD         #1,R5
    000004C8 4E0B                   JSR         @R14
    000004CA 64C2                   MOV.L       @R12,R4
         Dodge.c   329        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000004CC 65D2                   MOV.L       @R13,R5
    000004CE E601                   MOV         #1,R6
    000004D0 75FF                   ADD         #-1,R5
    000004D2 4E0B                   JSR         @R14
    000004D4 64C2                   MOV.L       @R12,R4
         Dodge.c   330    }
    000004D6 4F26                   LDS.L       @R15+,PR
    000004D8 6CF6                   MOV.L       @R15+,R12
    000004DA 6DF6                   MOV.L       @R15+,R13
    000004DC 000B                   RTS
    000004DE 6EF6                   MOV.L       @R15+,R14
         Dodge.c   331    
         Dodge.c   332    void DrawHealthBar() {
    000004E0              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=16
    000004E0 2FE6                   MOV.L       R14,@-R15
    000004E2 2FD6                   MOV.L       R13,@-R15
    000004E4 2FC6                   MOV.L       R12,@-R15
    000004E6 4F22                   STS.L       PR,@-R15
         Dodge.c   333        size_t i;
         Dodge.c   334        for (i = 0; i < playerHealth; i++)
    000004E8 DC25                   MOV.L       L740+44,R12; _playerHealth
    000004EA DD24                   MOV.L       L740+40,R13; _Bdisp_SetPoint_VRAM
    000004EC A005                   BRA         L645
    000004EE EE00                   MOV         #0,R14
    000004F0              L646:                             
         Dodge.c   335        {
         Dodge.c   336            Bdisp_SetPoint_VRAM(i, 63, 1);
    000004F0 E601                   MOV         #1,R6
    000004F2 E53F                   MOV         #63,R5
    000004F4 4D0B                   JSR         @R13
    000004F6 64E3                   MOV         R14,R4
    000004F8 7E01                   ADD         #1,R14
    000004FA              L645:                             
    000004FA 62C2                   MOV.L       @R12,R2
    000004FC 3E22                   CMP/HS      R2,R14
    000004FE 8BF7                   BF          L646
         Dodge.c   337        }
         Dodge.c   338        // debug bars
         Dodge.c   339        // for (i = 0; i < projectileIndex; i++)
         Dodge.c   340        //     Bdisp_SetPoint_VRAM(i, 1, 1);
         Dodge.c   341        // for (i = 0; i < maxProjectiles; i++)
         Dodge.c   342        //     Bdisp_SetPoint_VRAM(i, 2, 1);
         Dodge.c   343    }
    00000500 4F26                   LDS.L       @R15+,PR
    00000502 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000504 6DF6                   MOV.L       @R15+,R13
    00000506 000B                   RTS
    00000508 6EF6                   MOV.L       @R15+,R14
         Dodge.c   344    
         Dodge.c   345    #pragma endregion
         Dodge.c   346    
         Dodge.c   347    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   348    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration) {
    0000050A              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=20
    0000050A 2FE6                   MOV.L       R14,@-R15
    0000050C 2FD6                   MOV.L       R13,@-R15
    0000050E 2FB6                   MOV.L       R11,@-R15
    00000510 DE1C                   MOV.L       L740+48,R14; _projectiles
    00000512 7FF8                   ADD         #-8,R15
    00000514 931E                   MOV.W       L740,R3    ; H'0E00
    00000516 6DE3                   MOV         R14,R13
         Dodge.c   349        size_t i;
         Dodge.c   350        for (i = 0; i < 128; i++)
    00000518 DB1B                   MOV.L       L740+52,R11; _true
    0000051A 2FE2                   MOV.L       R14,@R15
    0000051C 1FE1                   MOV.L       R14,@(4,R15)
    0000051E 61F2                   MOV.L       @R15,R1
    00000520 313C                   ADD         R3,R1
    00000522 3D12                   CMP/HS      R1,R13
    00000524 8911                   BT          L650
    00000526              L648:                             
         Dodge.c   351        {
         Dodge.c   352            if(!projectiles[i].enabled) { // found a free spot in the array
    00000526 63D0                   MOV.B       @R13,R3
    00000528 2338                   TST         R3,R3
    0000052A 8B0A                   BF          L649
         Dodge.c   353                // set up the projectile
         Dodge.c   354                projectiles[i].x = x;
    0000052C 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   355                projectiles[i].y = y;
    0000052E 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   356                projectiles[i].xVelocity = xVelocity;
    00000530 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   357                projectiles[i].yVelocity = yVelocity;
    00000532 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   358                projectiles[i].xAcceleration = xAcceleration;
    00000534 53F5                   MOV.L       @(20,R15),R3
    00000536 1E35                   MOV.L       R3,@(20,R14)
         Dodge.c   359                projectiles[i].yAcceleration = yAcceleration;
    00000538 52F6                   MOV.L       @(24,R15),R2
    0000053A 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   360                // enable it
         Dodge.c   361                projectiles[i].enabled = true;
    0000053C 63B0                   MOV.B       @R11,R3
         Dodge.c   362                // stop the loop, we're done
         Dodge.c   363                return;
    0000053E A004                   BRA         L650
    00000540 2E30                   MOV.B       R3,@R14
    00000542              L649:                             
    00000542 7D1C                   ADD         #28,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000544 3D12                   CMP/HS      R1,R13
    00000546 8FEE                   BF/S        L648
    00000548 7E1C                   ADD         #28,R14
    0000054A              L650:                             
         Dodge.c   364            }
         Dodge.c   365        }
         Dodge.c   366        
         Dodge.c   367    }
    0000054A 7F08                   ADD         #8,R15
    0000054C 6BF6                   MOV.L       @R15+,R11
    0000054E 6DF6                   MOV.L       @R15+,R13
    00000550 000B                   RTS
    00000552 6EF6                   MOV.L       @R15+,R14
    00000554              L740:                             
    00000554 0E00                   .DATA.W     H'0E00
    00000556 0000                   .DATA.W     0
    00000558 <00000000>             .DATA.L     __lts
    0000055C 3F800000               .DATA.L     H'3F800000
    00000560 <00000000>             .DATA.L     __adds
    00000564 <00000000>             .DATA.L     __subs
    00000568 <00000000>             .DATA.L     __itos
    0000056C <00000000>             .DATA.L     __stoi
    00000570 <00000000>             .DATA.L     __ges
    00000574 <00000000>             .DATA.L     _playerX
    00000578 <00000000>             .DATA.L     _playerY
    0000057C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000580 <00000000>             .DATA.L     _playerHealth
    00000584 <00000000>             .DATA.L     _projectiles
    00000588 <00000000>             .DATA.L     _true
         Dodge.c   368    
         Dodge.c   369    int IsCollidingWithPlayer(int x, int y) {
    0000058C              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer
                                                           ; frame size=0
    0000058C D382                   MOV.L       L742+2,R3  ; _playerX
    0000058E 6632                   MOV.L       @R3,R6
    00000590 3460                   CMP/EQ      R6,R4
    00000592 8B03                   BF          L651
    00000594 D281                   MOV.L       L742+6,R2  ; _playerY
    00000596 6122                   MOV.L       @R2,R1
    00000598 3510                   CMP/EQ      R1,R5
    0000059A 8918                   BT          L553
    0000059C              L651:                             
    0000059C D37F                   MOV.L       L742+6,R3  ; _playerY
    0000059E 3460                   CMP/EQ      R6,R4
    000005A0 8F0A                   BF/S        L653
    000005A2 6732                   MOV.L       @R3,R7
         Dodge.c   370        if(x == playerX && y == playerY) return true;
         Dodge.c   371        if(x == playerX) {
         Dodge.c   372            if(y == playerY) return true;
    000005A4 3570                   CMP/EQ      R7,R5
    000005A6 8912                   BT          L553
         Dodge.c   373            if(y == playerY + 1) return true;
    000005A8 6373                   MOV         R7,R3
    000005AA 7301                   ADD         #1,R3
    000005AC 3530                   CMP/EQ      R3,R5
    000005AE 890E                   BT          L553
         Dodge.c   374            if(y == playerY - 1) return true;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005B0 6373                   MOV         R7,R3
    000005B2 73FF                   ADD         #-1,R3
    000005B4 3530                   CMP/EQ      R3,R5
    000005B6 890A                   BT          L553
    000005B8              L653:                             
         Dodge.c   375        }
         Dodge.c   376        if(y == playerY) {
    000005B8 3570                   CMP/EQ      R7,R5
    000005BA 8B0B                   BF          L657
         Dodge.c   377            if(x == playerX) return true;
    000005BC 3460                   CMP/EQ      R6,R4
    000005BE 8906                   BT          L553
         Dodge.c   378            if(x == playerX + 1) return true;
    000005C0 6263                   MOV         R6,R2
    000005C2 7201                   ADD         #1,R2
    000005C4 3420                   CMP/EQ      R2,R4
    000005C6 8902                   BT          L553
         Dodge.c   379            if(x == playerX - 1) return true;
    000005C8 76FF                   ADD         #-1,R6
    000005CA 3460                   CMP/EQ      R6,R4
    000005CC 8B02                   BF          L657
    000005CE              L553:
    000005CE D274                   MOV.L       L742+10,R2 ; _true
    000005D0 000B                   RTS
    000005D2 6020                   MOV.B       @R2,R0
    000005D4              L657:                             
         Dodge.c   380        }
         Dodge.c   381    
         Dodge.c   382        return false;
    000005D4 D373                   MOV.L       L742+14,R3 ; _false
    000005D6 6030                   MOV.B       @R3,R0
         Dodge.c   383    }
    000005D8              L652:                             
    000005D8 000B                   RTS
    000005DA 0009                   NOP
         Dodge.c   384    
         Dodge.c   385    #pragma region Timer functions
         Dodge.c   386    
         Dodge.c   387    /** Timer #2: Renders screen */
         Dodge.c   388    void RenderScreen()
    000005DC              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4
    000005DC 4F22                   STS.L       PR,@-R15
         Dodge.c   389    {
         Dodge.c   390        if(!quit) {
    000005DE D172                   MOV.L       L742+18,R1 ; _quit
    000005E0 6210                   MOV.B       @R1,R2
    000005E2 2228                   TST         R2,R2
    000005E4 8B0B                   BF          L661
         Dodge.c   391            // Clear current screen
         Dodge.c   392            Bdisp_AllClr_VRAM();
    000005E6 D271                   MOV.L       L742+22,R2 ; _Bdisp_AllClr_VRAM
    000005E8 420B                   JSR         @R2
    000005EA 0009                   NOP
         Dodge.c   393                
         Dodge.c   394            // Draw the different parts of the screen
         Dodge.c   395            DrawProjectiles();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005EC BE6C                   BSR         _DrawProjectiles
    000005EE 0009                   NOP
         Dodge.c   396            DrawPlayer();
    000005F0 BF52                   BSR         _DrawPlayer
    000005F2 0009                   NOP
         Dodge.c   397            DrawHealthBar();
    000005F4 BF74                   BSR         _DrawHealthBar
    000005F6 0009                   NOP
         Dodge.c   398    
         Dodge.c   399            // Move VRAM to DD
         Dodge.c   400            Bdisp_PutDisp_DD();
    000005F8 D26D                   MOV.L       L742+26,R2 ; _Bdisp_PutDisp_DD
    000005FA 422B                   JMP         @R2
    000005FC 4F26                   LDS.L       @R15+,PR
    000005FE              L661:                             
         Dodge.c   401        }
         Dodge.c   402    }
    000005FE 4F26                   LDS.L       @R15+,PR
    00000600 000B                   RTS
    00000602 0009                   NOP
         Dodge.c   403    
         Dodge.c   404    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    00000604              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    00000604 2FE6                   MOV.L       R14,@-R15
         Dodge.c   405        float dx;
         Dodge.c   406        float dy;
         Dodge.c   407        int decide;
         Dodge.c   408        int pk;
         Dodge.c   409        int j;
         Dodge.c   410    
         Dodge.c   411        dx = abs(x2 - x1);
    00000606 6173                   MOV         R7,R1
    00000608 D36A                   MOV.L       L742+30,R3 ; __subs
    0000060A 2FD6                   MOV.L       R13,@-R15
    0000060C 2FC6                   MOV.L       R12,@-R15
    0000060E 2FB6                   MOV.L       R11,@-R15
    00000610 2FA6                   MOV.L       R10,@-R15
    00000612 2F96                   MOV.L       R9,@-R15
    00000614 2F86                   MOV.L       R8,@-R15
    00000616 6873                   MOV         R7,R8
    00000618 4F22                   STS.L       PR,@-R15
    0000061A 4F12                   STS.L       MACL,@-R15
    0000061C 7FEC                   ADD         #-20,R15
    0000061E 1F42                   MOV.L       R4,@(8,R15)
    00000620 1F51                   MOV.L       R5,@(4,R15)
    00000622 2F62                   MOV.L       R6,@R15
    00000624 430B                   JSR         @R3
    00000626 50F1                   MOV.L       @(4,R15),R0
    00000628 D263                   MOV.L       L742+34,R2 ; __stoi
    0000062A 420B                   JSR         @R2
    0000062C 0009                   NOP
    0000062E D363                   MOV.L       L742+38,R3 ; _abs
    00000630 430B                   JSR         @R3
    00000632 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000634 D262                   MOV.L       L742+42,R2 ; __itos
    00000636 420B                   JSR         @R2
    00000638 0009                   NOP
    0000063A 6D03                   MOV         R0,R13
         Dodge.c   412        dy = abs(y2 - y1);
    0000063C 51FE                   MOV.L       @(56,R15),R1
    0000063E D35D                   MOV.L       L742+30,R3 ; __subs
    00000640 430B                   JSR         @R3
    00000642 60F2                   MOV.L       @R15,R0
    00000644 D25C                   MOV.L       L742+34,R2 ; __stoi
    00000646 420B                   JSR         @R2
    00000648 0009                   NOP
    0000064A D35C                   MOV.L       L742+38,R3 ; _abs
    0000064C 430B                   JSR         @R3
    0000064E 6403                   MOV         R0,R4
    00000650 D25B                   MOV.L       L742+42,R2 ; __itos
    00000652 420B                   JSR         @R2
    00000654 0009                   NOP
    00000656 6403                   MOV         R0,R4
         Dodge.c   413    
         Dodge.c   414        decide = (dx > dy);
    00000658 D35A                   MOV.L       L742+46,R3 ; __gts
    0000065A 430B                   JSR         @R3
    0000065C 61D3                   MOV         R13,R1
    0000065E 6903                   MOV         R0,R9
         Dodge.c   415        
         Dodge.c   416        pk = 2 * dy - dx;
    00000660 D25A                   MOV.L       L742+54,R2 ; __muls
    00000662 D059                   MOV.L       L742+50,R0 ; H'40000000
    00000664 420B                   JSR         @R2
    00000666 6143                   MOV         R4,R1
    00000668 D352                   MOV.L       L742+30,R3 ; __subs
    0000066A 6A03                   MOV         R0,R10
    0000066C 6103                   MOV         R0,R1
    0000066E 430B                   JSR         @R3
    00000670 60D3                   MOV         R13,R0
    00000672 D251                   MOV.L       L742+34,R2 ; __stoi
    00000674 420B                   JSR         @R2
    00000676 0009                   NOP
    00000678 52F2                   MOV.L       @(8,R15),R2
    0000067A 6E03                   MOV         R0,R14
    0000067C D052                   MOV.L       L742+50,R0 ; H'40000000
         Dodge.c   417        for (j = 0; j <= dx; j++) {
    0000067E EB00                   MOV         #0,R11
    00000680 E31C                   MOV         #28,R3
    00000682 0237                   MUL.L       R3,R2
    00000684 D252                   MOV.L       L742+58,R2 ; _projectiles
    00000686 031A                   STS         MACL,R3
    00000688 1F34                   MOV.L       R3,@(16,R15)
    0000068A 332C                   ADD         R2,R3
    0000068C 1F32                   MOV.L       R3,@(8,R15)
    0000068E D24F                   MOV.L       L742+54,R2 ; __muls
    00000690 420B                   JSR         @R2
    00000692 61D3                   MOV         R13,R1
    00000694 D247                   MOV.L       L742+30,R2 ; __subs
    00000696 420B                   JSR         @R2
    00000698 61A3                   MOV         R10,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000069A 61B3                   MOV         R11,R1
    0000069C D24D                   MOV.L       L742+62,R2 ; __les
    0000069E 1F03                   MOV.L       R0,@(12,R15)
    000006A0 420B                   JSR         @R2
    000006A2 60D3                   MOV         R13,R0
    000006A4 8800                   CMP/EQ      #0,R0
    000006A6 8965                   BT          L662
    000006A8 DC4B                   MOV.L       L742+66,R12; _playerHealth
    000006AA              L663:                             
         Dodge.c   418            // check for collision
         Dodge.c   419            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    000006AA D343                   MOV.L       L742+34,R3 ; __stoi
    000006AC 430B                   JSR         @R3
    000006AE 60F2                   MOV.L       @R15,R0
    000006B0 D341                   MOV.L       L742+34,R3 ; __stoi
    000006B2 6503                   MOV         R0,R5
    000006B4 430B                   JSR         @R3
    000006B6 50F1                   MOV.L       @(4,R15),R0
    000006B8 BF68                   BSR         _IsCollidingWithPlayer
    000006BA 6403                   MOV         R0,R4
    000006BC 2008                   TST         R0,R0
    000006BE 8907                   BT          L664
         Dodge.c   420                // damage player
         Dodge.c   421                playerHealth -= 1;
    000006C0 63C2                   MOV.L       @R12,R3
    000006C2 73FF                   ADD         #-1,R3
    000006C4 2C32                   MOV.L       R3,@R12
         Dodge.c   422                // destroy projectile
         Dodge.c   423                projectiles[arrayIndex].enabled = false;
    000006C6 52F2                   MOV.L       @(8,R15),R2
    000006C8 D136                   MOV.L       L742+14,R1 ; _false
    000006CA 6310                   MOV.B       @R1,R3
         Dodge.c   424                return;
    000006CC A058                   BRA         L665
    000006CE 2230                   MOV.B       R3,@R2
    000006D0              L664:                             
         Dodge.c   425            }
         Dodge.c   426            
         Dodge.c   427            // checking either to decrement or increment the
         Dodge.c   428            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   429            x1 < x2 ? x1++ : x1--;
    000006D0 51F1                   MOV.L       @(4,R15),R1
    000006D2 D242                   MOV.L       L742+70,R2 ; __lts
    000006D4 420B                   JSR         @R2
    000006D6 6083                   MOV         R8,R0
    000006D8 8800                   CMP/EQ      #0,R0
    000006DA 8906                   BT          L666
    000006DC D140                   MOV.L       L742+74,R1 ; H'3F800000
    000006DE D341                   MOV.L       L742+78,R3 ; __adds
    000006E0 430B                   JSR         @R3
    000006E2 50F1                   MOV.L       @(4,R15),R0
    000006E4 1F01                   MOV.L       R0,@(4,R15)
    000006E6 A006                   BRA         L667
    000006E8 0009                   NOP
    000006EA              L666:                             
    000006EA 51F1                   MOV.L       @(4,R15),R1
    000006EC D03C                   MOV.L       L742+74,R0 ; H'3F800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006EE D231                   MOV.L       L742+30,R2 ; __subs
    000006F0 420B                   JSR         @R2
    000006F2 0009                   NOP
    000006F4 1F01                   MOV.L       R0,@(4,R15)
    000006F6              L667:                             
    000006F6 D332                   MOV.L       L742+42,R3 ; __itos
    000006F8 430B                   JSR         @R3
    000006FA 60E3                   MOV         R14,R0
    000006FC 4E11                   CMP/PZ      R14
    000006FE 8D14                   BT/S        L668
    00000700 6403                   MOV         R0,R4
         Dodge.c   430            if (pk < 0) {
         Dodge.c   431                // decision value will decide to plot
         Dodge.c   432                // either  x1 or y1 in x's position
         Dodge.c   433                if (decide == 0) {
    00000702 2998                   TST         R9,R9
    00000704 8B08                   BF          L669
         Dodge.c   434                    // putpixel(x1, y1, RED);
         Dodge.c   435                    pk = pk + 2 * dy;
    00000706 6143                   MOV         R4,R1
    00000708 D236                   MOV.L       L742+78,R2 ; __adds
    0000070A 420B                   JSR         @R2
    0000070C 60A3                   MOV         R10,R0
    0000070E D32A                   MOV.L       L742+34,R3 ; __stoi
    00000710 430B                   JSR         @R3
    00000712 0009                   NOP
    00000714 A007                   BRA         L732
    00000716 0009                   NOP
    00000718              L669:                             
         Dodge.c   436                }
         Dodge.c   437                else {
         Dodge.c   438                    //(y1,x1) is passed in xt
         Dodge.c   439                    // putpixel(y1, x1, YELLOW);
         Dodge.c   440                    pk = pk + 2 * dy;
    00000718 D332                   MOV.L       L742+78,R3 ; __adds
    0000071A 6143                   MOV         R4,R1
    0000071C 430B                   JSR         @R3
    0000071E 60A3                   MOV         R10,R0
    00000720 D225                   MOV.L       L742+34,R2 ; __stoi
    00000722 420B                   JSR         @R2
    00000724 0009                   NOP
    00000726              L732:                             
    00000726 A01C                   BRA         L671
    00000728 6E03                   MOV         R0,R14
    0000072A              L668:                             
         Dodge.c   441                }
         Dodge.c   442            }
         Dodge.c   443            else {
         Dodge.c   444                y1 < y2 ? y1++ : y1--;
    0000072A 61F2                   MOV.L       @R15,R1
    0000072C D22B                   MOV.L       L742+70,R2 ; __lts
    0000072E 420B                   JSR         @R2
    00000730 50FE                   MOV.L       @(56,R15),R0
    00000732 8800                   CMP/EQ      #0,R0
    00000734 8906                   BT          L672
    00000736 D12A                   MOV.L       L742+74,R1 ; H'3F800000
    00000738 D32A                   MOV.L       L742+78,R3 ; __adds




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000073A 430B                   JSR         @R3
    0000073C 60F2                   MOV.L       @R15,R0
    0000073E 2F02                   MOV.L       R0,@R15
    00000740 A006                   BRA         L673
    00000742 0009                   NOP
    00000744              L672:                             
    00000744 61F2                   MOV.L       @R15,R1
    00000746 D026                   MOV.L       L742+74,R0 ; H'3F800000
    00000748 D21A                   MOV.L       L742+30,R2 ; __subs
    0000074A 420B                   JSR         @R2
    0000074C 0009                   NOP
    0000074E 2F02                   MOV.L       R0,@R15
    00000750              L673:                             
         Dodge.c   445                if (decide == 0) {
         Dodge.c   446    
         Dodge.c   447                    // putpixel(x1, y1, RED);
         Dodge.c   448                }
         Dodge.c   449                else {
         Dodge.c   450                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   451                }
         Dodge.c   452                pk = pk + 2 * dy - 2 * dx;
    00000750 D324                   MOV.L       L742+78,R3 ; __adds
    00000752 2998                   TST         R9,R9
    00000754 6143                   MOV         R4,R1
    00000756 430B                   JSR         @R3
    00000758 50F3                   MOV.L       @(12,R15),R0
    0000075A D217                   MOV.L       L742+34,R2 ; __stoi
    0000075C 420B                   JSR         @R2
    0000075E 0009                   NOP
    00000760 6E03                   MOV         R0,R14
    00000762              L671:                             
    00000762 7B01                   ADD         #1,R11
    00000764 D316                   MOV.L       L742+42,R3 ; __itos
    00000766 430B                   JSR         @R3
    00000768 60B3                   MOV         R11,R0
    0000076A D21F                   MOV.L       L742+82,R2 ; __ges
    0000076C 420B                   JSR         @R2
    0000076E 61D3                   MOV         R13,R1
    00000770 8800                   CMP/EQ      #0,R0
    00000772 8B9A                   BF          L663
    00000774              L662:                             
         Dodge.c   453            }
         Dodge.c   454        }
         Dodge.c   455    
         Dodge.c   456        projectiles[arrayIndex].x = x2;
    00000774 D316                   MOV.L       L742+58,R3 ; _projectiles
    00000776 54F4                   MOV.L       @(16,R15),R4
    00000778 343C                   ADD         R3,R4
    0000077A 1481                   MOV.L       R8,@(4,R4)
         Dodge.c   457        projectiles[arrayIndex].y = y2;
    0000077C 52FE                   MOV.L       @(56,R15),R2
    0000077E 1422                   MOV.L       R2,@(8,R4)
         Dodge.c   458    }
    00000780              L665:                             
    00000780 7F14                   ADD         #20,R15
    00000782 4F16                   LDS.L       @R15+,MACL
    00000784 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000786 68F6                   MOV.L       @R15+,R8
    00000788 69F6                   MOV.L       @R15+,R9
    0000078A 6AF6                   MOV.L       @R15+,R10
    0000078C 6BF6                   MOV.L       @R15+,R11
    0000078E 6CF6                   MOV.L       @R15+,R12
    00000790 6DF6                   MOV.L       @R15+,R13
    00000792 000B                   RTS
    00000794 6EF6                   MOV.L       @R15+,R14
    00000796              L742:                             
    00000796 0000                   .DATA.W     0
    00000798 <00000000>             .DATA.L     _playerX
    0000079C <00000000>             .DATA.L     _playerY
    000007A0 <00000000>             .DATA.L     _true
    000007A4 <00000000>             .DATA.L     _false
    000007A8 <00000000>             .DATA.L     _quit
    000007AC <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000007B0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000007B4 <00000000>             .DATA.L     __subs
    000007B8 <00000000>             .DATA.L     __stoi
    000007BC <00000000>             .DATA.L     _abs
    000007C0 <00000000>             .DATA.L     __itos
    000007C4 <00000000>             .DATA.L     __gts
    000007C8 40000000               .DATA.L     H'40000000
    000007CC <00000000>             .DATA.L     __muls
    000007D0 <00000000>             .DATA.L     _projectiles
    000007D4 <00000000>             .DATA.L     __les
    000007D8 <00000000>             .DATA.L     _playerHealth
    000007DC <00000000>             .DATA.L     __lts
    000007E0 3F800000               .DATA.L     H'3F800000
    000007E4 <00000000>             .DATA.L     __adds
    000007E8 <00000000>             .DATA.L     __ges
         Dodge.c   459    
         Dodge.c   460    void Physics()
    000007EC              _Physics:                        ; function: Physics
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __adds, __gts, __lts
    000007EC 2FE6                   MOV.L       R14,@-R15
    000007EE 2FD6                   MOV.L       R13,@-R15
    000007F0 2FC6                   MOV.L       R12,@-R15
         Dodge.c   461    {
         Dodge.c   462        size_t i;
         Dodge.c   463        for (i = 0; i < 128; i++)
    000007F2 EC1C                   MOV         #28,R12
    000007F4 2FB6                   MOV.L       R11,@-R15
    000007F6 2FA6                   MOV.L       R10,@-R15
    000007F8 2F96                   MOV.L       R9,@-R15
    000007FA 2F86                   MOV.L       R8,@-R15
    000007FC 4F22                   STS.L       PR,@-R15
    000007FE 4F12                   STS.L       MACL,@-R15
    00000800 D832                   MOV.L       L743+4,R8  ; _false
    00000802 9B61                   MOV.W       L743,R11   ; H'0080
    00000804 A03F                   BRA         L676
    00000806 ED00                   MOV         #0,R13
    00000808              L677:                             
    00000808 0DC7                   MUL.L       R12,R13
    0000080A 0E1A                   STS         MACL,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000080C D330                   MOV.L       L743+8,R3  ; _projectiles
    0000080E 3E3C                   ADD         R3,R14
    00000810 62E0                   MOV.B       @R14,R2
    00000812 2228                   TST         R2,R2
    00000814 8936                   BT          L681
         Dodge.c   464        {
         Dodge.c   465            if(projectiles[i].enabled) {
         Dodge.c   466                // collision with edge of map
         Dodge.c   467                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    00000816 54E1                   MOV.L       @(4,R14),R4
    00000818 D22E                   MOV.L       L743+12,R2 ; __lts
    0000081A 6143                   MOV         R4,R1
    0000081C 420B                   JSR         @R2
    0000081E E000                   MOV         #0,R0
    00000820 8800                   CMP/EQ      #0,R0
    00000822 8B11                   BF          L680
    00000824 D02C                   MOV.L       L743+16,R0 ; H'43000000
    00000826 D22D                   MOV.L       L743+20,R2 ; __gts
    00000828 420B                   JSR         @R2
    0000082A 6143                   MOV         R4,R1
    0000082C 8800                   CMP/EQ      #0,R0
    0000082E 8B0B                   BF          L680
    00000830 51E2                   MOV.L       @(8,R14),R1
    00000832 D228                   MOV.L       L743+12,R2 ; __lts
    00000834 420B                   JSR         @R2
    00000836 E000                   MOV         #0,R0
    00000838 8800                   CMP/EQ      #0,R0
    0000083A 8B05                   BF          L680
    0000083C D028                   MOV.L       L743+24,R0 ; H'42800000
    0000083E D227                   MOV.L       L743+20,R2 ; __gts
    00000840 420B                   JSR         @R2
    00000842 51E2                   MOV.L       @(8,R14),R1
    00000844 8800                   CMP/EQ      #0,R0
    00000846 8902                   BT          L679
    00000848              L680:                             
         Dodge.c   468                    // destroy projectile
         Dodge.c   469                    projectiles[i].enabled = false;
    00000848 6380                   MOV.B       @R8,R3
         Dodge.c   470                    continue;
    0000084A A01B                   BRA         L681
    0000084C 2E30                   MOV.B       R3,@R14
    0000084E              L679:                             
         Dodge.c   471                }
         Dodge.c   472                // move + detect player collisions
         Dodge.c   473                MoveProjectile(i,
         Dodge.c   474                    projectiles[i].x,
         Dodge.c   475                    projectiles[i].y,
         Dodge.c   476                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   477                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   478                );
    0000084E 59E2                   MOV.L       @(8,R14),R9
    00000850 D324                   MOV.L       L743+28,R3 ; __adds
    00000852 6193                   MOV         R9,R1
    00000854 430B                   JSR         @R3
    00000856 50E4                   MOV.L       @(16,R14),R0
    00000858 2F06                   MOV.L       R0,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000085A 5AE1                   MOV.L       @(4,R14),R10
    0000085C D221                   MOV.L       L743+28,R2 ; __adds
    0000085E 61A3                   MOV         R10,R1
    00000860 420B                   JSR         @R2
    00000862 50E3                   MOV.L       @(12,R14),R0
    00000864 6703                   MOV         R0,R7
    00000866 6693                   MOV         R9,R6
    00000868 65A3                   MOV         R10,R5
    0000086A BECB                   BSR         _MoveProjectile
    0000086C 64D3                   MOV         R13,R4
    0000086E 7F04                   ADD         #4,R15
         Dodge.c   479                // projectiles[i].x += projectiles[i].xVelocity;
         Dodge.c   480                // projectiles[i].y += projectiles[i].yVelocity;
         Dodge.c   481                // update velocity
         Dodge.c   482                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    00000870 D21C                   MOV.L       L743+28,R2 ; __adds
    00000872 50E5                   MOV.L       @(20,R14),R0
    00000874 420B                   JSR         @R2
    00000876 51E3                   MOV.L       @(12,R14),R1
    00000878 1E03                   MOV.L       R0,@(12,R14)
         Dodge.c   483                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    0000087A 50E6                   MOV.L       @(24,R14),R0
    0000087C D319                   MOV.L       L743+28,R3 ; __adds
    0000087E 430B                   JSR         @R3
    00000880 51E4                   MOV.L       @(16,R14),R1
    00000882 1E04                   MOV.L       R0,@(16,R14)
    00000884              L681:                             
    00000884 7D01                   ADD         #1,R13
    00000886              L676:                             
    00000886 3DB2                   CMP/HS      R11,R13
    00000888 8BBE                   BF          L677
         Dodge.c   484            }
         Dodge.c   485        }
         Dodge.c   486    
         Dodge.c   487        // stop player from leaving map
         Dodge.c   488            if(playerX < 1)
    0000088A E401                   MOV         #1,R4
    0000088C D516                   MOV.L       L743+32,R5 ; _playerX
    0000088E 6352                   MOV.L       @R5,R3
    00000890 3343                   CMP/GE      R4,R3
    00000892 8D01                   BT/S        L682
         Dodge.c   489                playerX = 1;
         Dodge.c   490            if(playerX > 127)
    00000894 E67F                   MOV         #127,R6
    00000896 2542                   MOV.L       R4,@R5
    00000898              L682:                             
    00000898 6352                   MOV.L       @R5,R3
    0000089A 3367                   CMP/GT      R6,R3
    0000089C 8B00                   BF          L683
         Dodge.c   491                playerX = 127;
    0000089E 2562                   MOV.L       R6,@R5
    000008A0              L683:                             
         Dodge.c   492            if(playerY < 1)
    000008A0 D512                   MOV.L       L743+36,R5 ; _playerY
    000008A2 6352                   MOV.L       @R5,R3
    000008A4 3343                   CMP/GE      R4,R3
    000008A6 8900                   BT          L684




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   493                playerY = 1;
    000008A8 2542                   MOV.L       R4,@R5
    000008AA              L684:                             
         Dodge.c   494            if(playerY > 63)
    000008AA E43F                   MOV         #63,R4
    000008AC 6352                   MOV.L       @R5,R3
    000008AE 3347                   CMP/GT      R4,R3
    000008B0 8B00                   BF          L685
         Dodge.c   495                playerY = 63;
    000008B2 2542                   MOV.L       R4,@R5
    000008B4              L685:                             
         Dodge.c   496    }
    000008B4 4F16                   LDS.L       @R15+,MACL
    000008B6 4F26                   LDS.L       @R15+,PR
    000008B8 68F6                   MOV.L       @R15+,R8
    000008BA 69F6                   MOV.L       @R15+,R9
    000008BC 6AF6                   MOV.L       @R15+,R10
    000008BE 6BF6                   MOV.L       @R15+,R11
    000008C0 6CF6                   MOV.L       @R15+,R12
    000008C2 6DF6                   MOV.L       @R15+,R13
    000008C4 000B                   RTS
    000008C6 6EF6                   MOV.L       @R15+,R14
    000008C8              L743:                             
    000008C8 0080                   .DATA.W     H'0080
    000008CA 0000                   .DATA.W     0
    000008CC <00000000>             .DATA.L     _false
    000008D0 <00000000>             .DATA.L     _projectiles
    000008D4 <00000000>             .DATA.L     __lts
    000008D8 43000000               .DATA.L     H'43000000
    000008DC <00000000>             .DATA.L     __gts
    000008E0 42800000               .DATA.L     H'42800000
    000008E4 <00000000>             .DATA.L     __adds
    000008E8 <00000000>             .DATA.L     _playerX
    000008EC <00000000>             .DATA.L     _playerY
         Dodge.c   497    
         Dodge.c   498    void Controls()
    000008F0              _Controls:                       ; function: Controls
                                                           ; frame size=8
    000008F0 2FE6                   MOV.L       R14,@-R15
    000008F2 4F22                   STS.L       PR,@-R15
         Dodge.c   499    {
         Dodge.c   500        if(!quit) {
    000008F4 D268                   MOV.L       L744+2,R2  ; _quit
    000008F6 6320                   MOV.B       @R2,R3
    000008F8 2338                   TST         R3,R3
    000008FA 8B23                   BF          L686
         Dodge.c   501            if(IsKeyDown(KEY_CTRL_LEFT)) {
    000008FC DE67                   MOV.L       L744+6,R14 ; _playerX
    000008FE BC1D                   BSR         _KeyDown
    00000900 E426                   MOV         #38,R4
    00000902 600C                   EXTU.B      R0,R0
    00000904 2008                   TST         R0,R0
    00000906 8D03                   BT/S        L687
         Dodge.c   502                playerX--;
         Dodge.c   503            }
         Dodge.c   504            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    00000908 E41B                   MOV         #27,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000090A 63E2                   MOV.L       @R14,R3
    0000090C 73FF                   ADD         #-1,R3
    0000090E 2E32                   MOV.L       R3,@R14
    00000910              L687:                             
    00000910 BC14                   BSR         _KeyDown
    00000912 0009                   NOP
    00000914 600C                   EXTU.B      R0,R0
    00000916 2008                   TST         R0,R0
    00000918 8902                   BT          L688
         Dodge.c   505                playerX++;
    0000091A 62E2                   MOV.L       @R14,R2
    0000091C 7201                   ADD         #1,R2
    0000091E 2E22                   MOV.L       R2,@R14
    00000920              L688:                             
         Dodge.c   506            }
         Dodge.c   507            if(IsKeyDown(KEY_CTRL_UP)) {
    00000920 DE5F                   MOV.L       L744+10,R14; _playerY
    00000922 BC0B                   BSR         _KeyDown
    00000924 E41C                   MOV         #28,R4
    00000926 600C                   EXTU.B      R0,R0
    00000928 2008                   TST         R0,R0
    0000092A 8D03                   BT/S        L689
         Dodge.c   508                playerY--;
         Dodge.c   509            }
         Dodge.c   510            if(IsKeyDown(KEY_CTRL_DOWN)) {
    0000092C E425                   MOV         #37,R4
    0000092E 63E2                   MOV.L       @R14,R3
    00000930 73FF                   ADD         #-1,R3
    00000932 2E32                   MOV.L       R3,@R14
    00000934              L689:                             
    00000934 BC02                   BSR         _KeyDown
    00000936 0009                   NOP
    00000938 600C                   EXTU.B      R0,R0
    0000093A 2008                   TST         R0,R0
    0000093C 8902                   BT          L686
         Dodge.c   511                playerY++;
    0000093E 62E2                   MOV.L       @R14,R2
    00000940 7201                   ADD         #1,R2
    00000942 2E22                   MOV.L       R2,@R14
    00000944              L686:                             
         Dodge.c   512            }
         Dodge.c   513        }
         Dodge.c   514        
         Dodge.c   515    }
    00000944 4F26                   LDS.L       @R15+,PR
    00000946 000B                   RTS
    00000948 6EF6                   MOV.L       @R15+,R14
         Dodge.c   516    
         Dodge.c   517    #pragma region attacks
         Dodge.c   518    
         Dodge.c   519    // next projectile in this attack
         Dodge.c   520    void SpawnNext() {
    0000094A              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __itos
    0000094A 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000094C 2FD6                   MOV.L       R13,@-R15
    0000094E 2FC6                   MOV.L       R12,@-R15
    00000950 2FB6                   MOV.L       R11,@-R15
    00000952 EB00                   MOV         #0,R11
    00000954 DC54                   MOV.L       L744+18,R12; _currentAttack
    00000956 2FA6                   MOV.L       R10,@-R15
    00000958 2F96                   MOV.L       R9,@-R15
    0000095A 4F22                   STS.L       PR,@-R15
    0000095C D951                   MOV.L       L744+14,R9 ; _projectileIndex
    0000095E 7FF8                   ADD         #-8,R15
    00000960 60C2                   MOV.L       @R12,R0
    00000962 8800                   CMP/EQ      #0,R0
    00000964 8D06                   BT/S        L571
    00000966 6E92                   MOV.L       @R9,R14
    00000968 8801                   CMP/EQ      #1,R0
    0000096A 8919                   BT          L572
    0000096C 8802                   CMP/EQ      #2,R0
    0000096E 8947                   BT          L573
    00000970 A07D                   BRA         L574
    00000972 0009                   NOP
    00000974              L571:                            ; case label 
         Dodge.c   521        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   522        #pragma region a whole bunch of variable declarations
         Dodge.c   523        int mod;
         Dodge.c   524        int mod2;
         Dodge.c   525        int xPos;
         Dodge.c   526        int direction;
         Dodge.c   527        int directionX;
         Dodge.c   528        int directionY;
         Dodge.c   529        int i;
         Dodge.c   530        int j;
         Dodge.c   531        #pragma endregion
         Dodge.c   532        switch (currentAttack)
         Dodge.c   533        {
         Dodge.c   534            case 0:
         Dodge.c   535                mod = projectileIndex % 2;
    00000974 60E3                   MOV         R14,R0
    00000976 4011                   CMP/PZ      R0
    00000978 8B01                   BF          L692
    0000097A A005                   BRA         L693
    0000097C C901                   AND         #1,R0
    0000097E              L692:                             
    0000097E 6007                   NOT         R0,R0
    00000980 7001                   ADD         #1,R0
    00000982 C901                   AND         #1,R0
    00000984 6007                   NOT         R0,R0
    00000986 7001                   ADD         #1,R0
    00000988              L693:                             
    00000988 6403                   MOV         R0,R4
         Dodge.c   536                xPos = mod == 0 ? 1 : 128 - 1;
    0000098A 2448                   TST         R4,R4
    0000098C 8B01                   BF          L694
    0000098E A001                   BRA         L695
    00000990 EA01                   MOV         #1,R10
    00000992              L694:                             
    00000992 EA7F                   MOV         #127,R10
    00000994              L695:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   537                direction = mod == 0 ? 1 : -1;
    00000994 2448                   TST         R4,R4
    00000996 8B01                   BF          L745
    00000998 A07B                   BRA         L734
    0000099A 0009                   NOP
    0000099C              L745:                             
    0000099C A095                   BRA         L569
    0000099E EDFF                   MOV         #-1,R13
    000009A0              L572:                            ; case label 
         Dodge.c   538                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
         Dodge.c   539                break;
         Dodge.c   540            case 1:
         Dodge.c   541                mod = projectileIndex % 2;
    000009A0 60E3                   MOV         R14,R0
    000009A2 4011                   CMP/PZ      R0
    000009A4 8B01                   BF          L698
    000009A6 A005                   BRA         L699
    000009A8 C901                   AND         #1,R0
    000009AA              L698:                             
    000009AA 6007                   NOT         R0,R0
    000009AC 7001                   ADD         #1,R0
    000009AE C901                   AND         #1,R0
    000009B0 6007                   NOT         R0,R0
    000009B2 7001                   ADD         #1,R0
    000009B4              L699:                             
    000009B4 6403                   MOV         R0,R4
         Dodge.c   542                mod2 = (projectileIndex + 1) % 4;
         Dodge.c   543                directionX = mod == 0 ? 1 : -1;
    000009B6 2448                   TST         R4,R4
    000009B8 8B01                   BF          L700
    000009BA A001                   BRA         L701
    000009BC E301                   MOV         #1,R3
    000009BE              L700:                             
    000009BE E3FF                   MOV         #-1,R3
    000009C0              L701:                             
    000009C0 2F32                   MOV.L       R3,@R15
         Dodge.c   544                // directionY = mod2 < 2 ? 1 : -1;
         Dodge.c   545                directionY = ((projectileIndex % 8) - 4);
    000009C2 60E3                   MOV         R14,R0
    000009C4 4011                   CMP/PZ      R0
    000009C6 8B01                   BF          L702
    000009C8 A005                   BRA         L703
    000009CA C907                   AND         #7,R0
    000009CC              L702:                             
    000009CC 6007                   NOT         R0,R0
    000009CE 7001                   ADD         #1,R0
    000009D0 C907                   AND         #7,R0
    000009D2 6007                   NOT         R0,R0
    000009D4 7001                   ADD         #1,R0
    000009D6              L703:                             
    000009D6 70FC                   ADD         #-4,R0
         Dodge.c   546                SpawnProjectile(64, 32, (float)directionX * 2, (float)directionY, 0, 0);//Sign(-directionY) * 
                         +0.1f);
    000009D8 D334                   MOV.L       L744+22,R3 ; __itos
    000009DA E200                   MOV         #0,R2
    000009DC 1F01                   MOV.L       R0,@(4,R15)
    000009DE 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009E0 430B                   JSR         @R3
    000009E2 2F26                   MOV.L       R2,@-R15
    000009E4 D131                   MOV.L       L744+22,R1 ; __itos
    000009E6 6703                   MOV         R0,R7
    000009E8 410B                   JSR         @R1
    000009EA 50F2                   MOV.L       @(8,R15),R0
    000009EC D130                   MOV.L       L744+26,R1 ; H'40000000
    000009EE D331                   MOV.L       L744+30,R3 ; __muls
    000009F0 430B                   JSR         @R3
    000009F2 0009                   NOP
    000009F4 D530                   MOV.L       L744+34,R5 ; H'42000000
    000009F6 D431                   MOV.L       L744+38,R4 ; H'42800000
    000009F8 BD87                   BSR         _SpawnProjectile
    000009FA 6603                   MOV         R0,R6
         Dodge.c   547                break;
    000009FC A07C                   BRA         L733
    000009FE 0009                   NOP
    00000A00              L573:                            ; case label 
         Dodge.c   548            case 2:
         Dodge.c   549                if(projectileIndex % 5 == 0) {
    00000A00 D22F                   MOV.L       L744+42,R2 ; __modls
    00000A02 61E3                   MOV         R14,R1
    00000A04 420B                   JSR         @R2
    00000A06 E005                   MOV         #5,R0
    00000A08 2008                   TST         R0,R0
    00000A0A 8B76                   BF          L691
         Dodge.c   550                    if(projectileIndex % 10 == 0) {
    00000A0C D22C                   MOV.L       L744+42,R2 ; __modls
    00000A0E ED10                   MOV         #16,R13
    00000A10 61E3                   MOV         R14,R1
    00000A12 420B                   JSR         @R2
    00000A14 E00A                   MOV         #10,R0
    00000A16 2008                   TST         R0,R0
    00000A18 8B14                   BF          L705
         Dodge.c   551                        for (i = 0; i < 16; i++)
    00000A1A 6AB3                   MOV         R11,R10
    00000A1C A00E                   BRA         L706
    00000A1E 6EB3                   MOV         R11,R14
    00000A20              L707:                             
         Dodge.c   552                        {
         Dodge.c   553                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0);
    00000A20 D723                   MOV.L       L744+26,R7 ; H'40000000
    00000A22 E300                   MOV         #0,R3
    00000A24 D221                   MOV.L       L744+22,R2 ; __itos
    00000A26 6633                   MOV         R3,R6
    00000A28 2F36                   MOV.L       R3,@-R15
    00000A2A 6533                   MOV         R3,R5
    00000A2C 2F36                   MOV.L       R3,@-R15
    00000A2E 420B                   JSR         @R2
    00000A30 60E3                   MOV         R14,R0
    00000A32 BD6A                   BSR         _SpawnProjectile
    00000A34 6403                   MOV         R0,R4
    00000A36 7F08                   ADD         #8,R15
    00000A38 7A01                   ADD         #1,R10
    00000A3A 7E08                   ADD         #8,R14
    00000A3C              L706:                             
    00000A3C 3AD3                   CMP/GE      R13,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A3E 8BEF                   BF          L707
    00000A40 A05B                   BRA         L691
    00000A42 0009                   NOP
    00000A44              L705:                             
         Dodge.c   554                        }
         Dodge.c   555                    }
         Dodge.c   556                    else {
         Dodge.c   557                        for (i = 0; i < 16; i++)
    00000A44 6AB3                   MOV         R11,R10
    00000A46 A00E                   BRA         L709
    00000A48 EE04                   MOV         #4,R14
    00000A4A              L710:                             
         Dodge.c   558                        {
         Dodge.c   559                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0);
    00000A4A E200                   MOV         #0,R2
    00000A4C D71D                   MOV.L       L744+46,R7 ; H'C0000000
    00000A4E 6623                   MOV         R2,R6
    00000A50 D51A                   MOV.L       L744+38,R5 ; H'42800000
    00000A52 2F26                   MOV.L       R2,@-R15
    00000A54 2F26                   MOV.L       R2,@-R15
    00000A56 D315                   MOV.L       L744+22,R3 ; __itos
    00000A58 430B                   JSR         @R3
    00000A5A 60E3                   MOV         R14,R0
    00000A5C BD55                   BSR         _SpawnProjectile
    00000A5E 6403                   MOV         R0,R4
    00000A60 7F08                   ADD         #8,R15
    00000A62 7A01                   ADD         #1,R10
    00000A64 7E08                   ADD         #8,R14
    00000A66              L709:                             
    00000A66 3AD3                   CMP/GE      R13,R10
    00000A68 8BEF                   BF          L710
         Dodge.c   560                        }
         Dodge.c   561                    }
         Dodge.c   562                    
         Dodge.c   563                }
         Dodge.c   564                break;
    00000A6A A046                   BRA         L691
    00000A6C 0009                   NOP
    00000A6E              L574:                            ; default label 
         Dodge.c   565            default:
         Dodge.c   566                mod2 = projectileIndex % 2;
    00000A6E 60E3                   MOV         R14,R0
    00000A70 4011                   CMP/PZ      R0
    00000A72 8B01                   BF          L711
    00000A74 A005                   BRA         L712
    00000A76 C901                   AND         #1,R0
    00000A78              L711:                             
    00000A78 6007                   NOT         R0,R0
    00000A7A 7001                   ADD         #1,R0
    00000A7C C901                   AND         #1,R0
    00000A7E 6007                   NOT         R0,R0
    00000A80 7001                   ADD         #1,R0
    00000A82              L712:                             
    00000A82 6403                   MOV         R0,R4
         Dodge.c   567                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000A84 2448                   TST         R4,R4
    00000A86 8B01                   BF          L713




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A88 A001                   BRA         L714
    00000A8A EA01                   MOV         #1,R10
    00000A8C              L713:                             
    00000A8C EA7F                   MOV         #127,R10
    00000A8E              L714:                             
         Dodge.c   568                direction = mod2 == 0 ? 1 : -1;
    00000A8E 2448                   TST         R4,R4
    00000A90 8B1A                   BF          L715
    00000A92              L734:                             
    00000A92 A01A                   BRA         L569
    00000A94 ED01                   MOV         #1,R13
    00000A96              L744:                             
    00000A96 0000                   .DATA.W     0
    00000A98 <00000000>             .DATA.L     _quit
    00000A9C <00000000>             .DATA.L     _playerX
    00000AA0 <00000000>             .DATA.L     _playerY
    00000AA4 <00000000>             .DATA.L     _projectileIndex
    00000AA8 <00000000>             .DATA.L     _currentAttack
    00000AAC <00000000>             .DATA.L     __itos
    00000AB0 40000000               .DATA.L     H'40000000
    00000AB4 <00000000>             .DATA.L     __muls
    00000AB8 42000000               .DATA.L     H'42000000
    00000ABC 42800000               .DATA.L     H'42800000
    00000AC0 <00000000>             .DATA.L     __modls
    00000AC4 C0000000               .DATA.L     H'C0000000
    00000AC8              L715:                             
    00000AC8 EDFF                   MOV         #-1,R13
    00000ACA              L569:
         Dodge.c   569                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
    00000ACA E200                   MOV         #0,R2
    00000ACC D336                   MOV.L       L746+4,R3  ; __itos
    00000ACE 2F26                   MOV.L       R2,@-R15
    00000AD0 430B                   JSR         @R3
    00000AD2 60D3                   MOV         R13,R0
    00000AD4 D135                   MOV.L       L746+8,R1  ; H'3DCCCCCD
    00000AD6 D336                   MOV.L       L746+12,R3 ; __muls
    00000AD8 430B                   JSR         @R3
    00000ADA 0009                   NOP
    00000ADC 2F06                   MOV.L       R0,@-R15
    00000ADE 6723                   MOV         R2,R7
    00000AE0 D331                   MOV.L       L746+4,R3  ; __itos
    00000AE2 6623                   MOV         R2,R6
    00000AE4 60E3                   MOV         R14,R0
    00000AE6 7001                   ADD         #1,R0
    00000AE8 430B                   JSR         @R3
    00000AEA 4008                   SHLL2       R0
    00000AEC D12E                   MOV.L       L746+4,R1  ; __itos
    00000AEE 6503                   MOV         R0,R5
    00000AF0 410B                   JSR         @R1
    00000AF2 60A3                   MOV         R10,R0
    00000AF4 BD09                   BSR         _SpawnProjectile
    00000AF6 6403                   MOV         R0,R4
         Dodge.c   570                break;
    00000AF8              L733:                             
    00000AF8 7F08                   ADD         #8,R15
    00000AFA              L691:                             
         Dodge.c   571        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   572    
         Dodge.c   573        projectileIndex++;
    00000AFA 6392                   MOV.L       @R9,R3
         Dodge.c   574        if(projectileIndex > maxProjectiles) {
    00000AFC D02D                   MOV.L       L746+16,R0 ; _maxProjectiles
    00000AFE 7301                   ADD         #1,R3
    00000B00 2932                   MOV.L       R3,@R9
    00000B02 6133                   MOV         R3,R1
    00000B04 6202                   MOV.L       @R0,R2
    00000B06 3127                   CMP/GT      R2,R1
    00000B08 8B0B                   BF          L717
         Dodge.c   575            KillTimer(ID_USER_TIMER5); // stop this attack
    00000B0A D12B                   MOV.L       L746+20,R1 ; _KillTimer
    00000B0C 410B                   JSR         @R1
    00000B0E E405                   MOV         #5,R4
         Dodge.c   576            currentAttack++;
    00000B10 63C2                   MOV.L       @R12,R3
    00000B12 7301                   ADD         #1,R3
    00000B14 2C32                   MOV.L       R3,@R12
         Dodge.c   577            if(currentAttack >= attacksTotal)
    00000B16 6133                   MOV         R3,R1
    00000B18 D028                   MOV.L       L746+24,R0 ; _attacksTotal
    00000B1A 6202                   MOV.L       @R0,R2
    00000B1C 3123                   CMP/GE      R2,R1
    00000B1E 8B00                   BF          L717
         Dodge.c   578                currentAttack = 0;
    00000B20 2CB2                   MOV.L       R11,@R12
    00000B22              L717:                             
         Dodge.c   579        }
         Dodge.c   580    }
    00000B22 7F08                   ADD         #8,R15
    00000B24 4F26                   LDS.L       @R15+,PR
    00000B26 69F6                   MOV.L       @R15+,R9
    00000B28 6AF6                   MOV.L       @R15+,R10
    00000B2A 6BF6                   MOV.L       @R15+,R11
    00000B2C 6CF6                   MOV.L       @R15+,R12
    00000B2E 6DF6                   MOV.L       @R15+,R13
    00000B30 000B                   RTS
    00000B32 6EF6                   MOV.L       @R15+,R14
         Dodge.c   581    // the next "attack"
         Dodge.c   582    void NextProjectiles() {
    00000B34              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   583        projectileIndex = 0;
    00000B34 D222                   MOV.L       L746+28,R2 ; _projectileIndex
    00000B36 E300                   MOV         #0,R3
         Dodge.c   584    
         Dodge.c   585        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues
         Dodge.c   586        switch (currentAttack)
    00000B38 D41E                   MOV.L       L746+16,R4 ; _maxProjectiles
    00000B3A 2232                   MOV.L       R3,@R2
    00000B3C D321                   MOV.L       L746+32,R3 ; _currentAttack
    00000B3E 6032                   MOV.L       @R3,R0
    00000B40 8800                   CMP/EQ      #0,R0
    00000B42 8D0C                   BT/S        L735
    00000B44 E510                   MOV         #16,R5
    00000B46 8801                   CMP/EQ      #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B48 8903                   BT          L576
    00000B4A 8802                   CMP/EQ      #2,R0
    00000B4C 8904                   BT          L577
    00000B4E A006                   BRA         L735
    00000B50 0009                   NOP
    00000B52              L576:                            ; case label 
         Dodge.c   587        {
         Dodge.c   588            case 0:
         Dodge.c   589                maxProjectiles = 16;
         Dodge.c   590                break;
         Dodge.c   591            case 1:
         Dodge.c   592                maxProjectiles = 32;
    00000B52 E020                   MOV         #32,R0
         Dodge.c   593                break;
    00000B54 A004                   BRA         L719
    00000B56 2402                   MOV.L       R0,@R4
    00000B58              L577:                            ; case label 
         Dodge.c   594            case 2:
         Dodge.c   595                maxProjectiles = 10;
    00000B58 E10A                   MOV         #10,R1
         Dodge.c   596                break;
    00000B5A A001                   BRA         L719
    00000B5C 2412                   MOV.L       R1,@R4
    00000B5E              L735:                             
         Dodge.c   597            default:
         Dodge.c   598                maxProjectiles = 16;
    00000B5E 2452                   MOV.L       R5,@R4
    00000B60              L719:                             
         Dodge.c   599                break;
         Dodge.c   600        }
         Dodge.c   601    
         Dodge.c   602        SetTimer(ID_USER_TIMER5, 100, SpawnNext);
    00000B60 D619                   MOV.L       L746+36,R6 ; _SpawnNext
    00000B62 E564                   MOV         #100,R5
    00000B64 D319                   MOV.L       L746+40,R3 ; _SetTimer
    00000B66 432B                   JMP         @R3
    00000B68 E405                   MOV         #5,R4
         Dodge.c   603    }
         Dodge.c   604    
         Dodge.c   605    #pragma endregion
         Dodge.c   606    
         Dodge.c   607    #pragma endregion
         Dodge.c   608    
         Dodge.c   609    /** Add-in entry point
         Dodge.c   610     * 
         Dodge.c   611     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   612     *             strip_no - Strip number from eActivity
         Dodge.c   613     * 
         Dodge.c   614     * Returns:    NOT error
         Dodge.c   615     */
         Dodge.c   616    // Start function
         Dodge.c   617    int AddIn_main(int app_mode, unsigned short strip_no)
    00000B6A              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=16
    00000B6A 2FE6                   MOV.L       R14,@-R15
    00000B6C 4F22                   STS.L       PR,@-R15
    00000B6E 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   618    {
         Dodge.c   619        unsigned int i, j; // Iteration variables
         Dodge.c   620        unsigned char str[3];
         Dodge.c   621        unsigned int key;  // Keyboard input
         Dodge.c   622    
         Dodge.c   623        // Clear out the display
         Dodge.c   624        Bdisp_AllClr_DDVRAM();
    00000B70 D317                   MOV.L       L746+44,R3 ; _Bdisp_AllClr_DDVRAM
    00000B72 430B                   JSR         @R3
    00000B74 0009                   NOP
         Dodge.c   625    
         Dodge.c   626        // Set up timers for rendering and ball
         Dodge.c   627        SetTimer(ID_USER_TIMER1, 50, RenderScreen);
    00000B76 E532                   MOV         #50,R5
    00000B78 DE14                   MOV.L       L746+40,R14; _SetTimer
    00000B7A D616                   MOV.L       L746+48,R6 ; _RenderScreen
    00000B7C 4E0B                   JSR         @R14
    00000B7E E401                   MOV         #1,R4
         Dodge.c   628        SetTimer(ID_USER_TIMER2, 50, Controls);
    00000B80 D615                   MOV.L       L746+52,R6 ; _Controls
    00000B82 E532                   MOV         #50,R5
    00000B84 4E0B                   JSR         @R14
    00000B86 E402                   MOV         #2,R4
         Dodge.c   629        SetTimer(ID_USER_TIMER3, 50, Physics);
    00000B88 D614                   MOV.L       L746+56,R6 ; _Physics
    00000B8A E532                   MOV         #50,R5
    00000B8C 4E0B                   JSR         @R14
    00000B8E E403                   MOV         #3,R4
         Dodge.c   630        SetTimer(ID_USER_TIMER4, 5000, NextProjectiles);
    00000B90 D613                   MOV.L       L746+60,R6 ; _NextProjectiles
    00000B92 9507                   MOV.W       L746,R5    ; H'1388
    00000B94 4E0B                   JSR         @R14
    00000B96 E404                   MOV         #4,R4
         Dodge.c   631    
         Dodge.c   632        // Set quit handler
         Dodge.c   633        SetQuitHandler(AppQuit);
    00000B98 D412                   MOV.L       L746+64,R4 ; _AppQuit
    00000B9A D213                   MOV.L       L746+68,R2 ; _SetQuitHandler
    00000B9C 420B                   JSR         @R2
    00000B9E 0009                   NOP
         Dodge.c   634    
         Dodge.c   635        // The main thread manages the keys
         Dodge.c   636        while (IsKeyUp(KEY_CTRL_MENU))
    00000BA0 A041                   BRA         L720
    00000BA2 0009                   NOP
    00000BA4              L746:                             
    00000BA4 1388                   .DATA.W     H'1388
    00000BA6 0000                   .DATA.W     0
    00000BA8 <00000000>             .DATA.L     __itos
    00000BAC 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000BB0 <00000000>             .DATA.L     __muls
    00000BB4 <00000000>             .DATA.L     _maxProjectiles
    00000BB8 <00000000>             .DATA.L     _KillTimer
    00000BBC <00000000>             .DATA.L     _attacksTotal
    00000BC0 <00000000>             .DATA.L     _projectileIndex
    00000BC4 <00000000>             .DATA.L     _currentAttack
    00000BC8 <00000000>             .DATA.L     _SpawnNext




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BCC <00000000>             .DATA.L     _SetTimer
    00000BD0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000BD4 <00000000>             .DATA.L     _RenderScreen
    00000BD8 <00000000>             .DATA.L     _Controls
    00000BDC <00000000>             .DATA.L     _Physics
    00000BE0 <00000000>             .DATA.L     _NextProjectiles
    00000BE4 <00000000>             .DATA.L     _AppQuit
    00000BE8 <00000000>             .DATA.L     _SetQuitHandler
    00000BEC              L721:                             
         Dodge.c   637        {
         Dodge.c   638            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00000BEC DE14                   MOV.L       L747,R14   ; _GetKeyWait
    00000BEE 67F3                   MOV         R15,R7
    00000BF0 E600                   MOV         #0,R6
    00000BF2 6563                   MOV         R6,R5
    00000BF4 4E0B                   JSR         @R14
    00000BF6 6463                   MOV         R6,R4
         Dodge.c   639        
         Dodge.c   640            if (keyResp == KEYREP_KEYEVENT)
    00000BF8 8801                   CMP/EQ      #1,R0
    00000BFA 8F06                   BF/S        L722
    00000BFC 6403                   MOV         R0,R4
         Dodge.c   641            {
         Dodge.c   642                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    00000BFE 60F2                   MOV.L       @R15,R0
    00000C00 8830                   CMP/EQ      #48,R0
    00000C02 890C                   BT          L570
    00000C04 60F2                   MOV.L       @R15,R0
    00000C06 882F                   CMP/EQ      #47,R0
    00000C08 8909                   BT          L570
    00000C0A              L722:                             
         Dodge.c   643                {
         Dodge.c   644                    AppQuit();
         Dodge.c   645                    break;
         Dodge.c   646                }
         Dodge.c   647            }
         Dodge.c   648    
         Dodge.c   649            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000C0A BA97                   BSR         _KeyDown
    00000C0C E430                   MOV         #48,R4
    00000C0E 600C                   EXTU.B      R0,R0
    00000C10 2008                   TST         R0,R0
    00000C12 8B04                   BF          L570
    00000C14 BA92                   BSR         _KeyDown
    00000C16 E42F                   MOV         #47,R4
    00000C18 600C                   EXTU.B      R0,R0
    00000C1A 2008                   TST         R0,R0
    00000C1C 8903                   BT          L720
    00000C1E              L570:
         Dodge.c   650            {
         Dodge.c   651                AppQuit();
    00000C1E BB25                   BSR         _AppQuit
    00000C20 0009                   NOP
         Dodge.c   652                break;
    00000C22 A005                   BRA         L725
    00000C24 0009                   NOP
    00000C26              L720:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C26 BA89                   BSR         _KeyDown
    00000C28 E430                   MOV         #48,R4
    00000C2A 600C                   EXTU.B      R0,R0
    00000C2C 2008                   TST         R0,R0
    00000C2E 89DD                   BT          L721
    00000C30              L725:                             
         Dodge.c   653            }
         Dodge.c   654        }
         Dodge.c   655    
         Dodge.c   656        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   657        AppQuit();
    00000C30 BB1C                   BSR         _AppQuit
    00000C32 0009                   NOP
         Dodge.c   658    
         Dodge.c   659        // At the end, return application status
         Dodge.c   660        return true;
    00000C34 D303                   MOV.L       L747+4,R3  ; _true
    00000C36 6030                   MOV.B       @R3,R0
         Dodge.c   661    }
    00000C38 7F08                   ADD         #8,R15
    00000C3A 4F26                   LDS.L       @R15+,PR
    00000C3C 000B                   RTS
    00000C3E 6EF6                   MOV.L       @R15+,R14
    00000C40              L747:                             
    00000C40 <00000000>             .DATA.L     _GetKeyWait
    00000C44 <00000000>             .DATA.L     _true
         Dodge.c   662    
         Dodge.c   663    #pragma region Do not touch
         Dodge.c   664    
         Dodge.c   665    // Source code from here down should not be changed according to the
         Dodge.c   666    // CASIO SDK sample project.
         Dodge.c   667    
         Dodge.c   668    #pragma section _BR_Size
         Dodge.c   669    unsigned long BR_Size;
         Dodge.c   670    #pragma section
         Dodge.c   671    
         Dodge.c   672    #pragma section _TOP
         Dodge.c   673    
         Dodge.c   674    //****************************************************************************
         Dodge.c   675    //  InitializeSystem
         Dodge.c   676    //
         Dodge.c   677    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   678    //              OptionNum : Option Number (only eActivity)
         Dodge.c   679    //
         Dodge.c   680    //  retval  :   1 = No error / 0 = Error
         Dodge.c   681    //
         Dodge.c   682    //****************************************************************************
         Dodge.c   683    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   684    {
         Dodge.c   685        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L748+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L748:                             
    00000006 0000                   .DATA.W     0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   686    }
         Dodge.c   687    
         Dodge.c   688    #pragma section
         Dodge.c   689    
         Dodge.c   690    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _true:                           ; static: true
    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000003               .DATA.L     H'00000003
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040
    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _quit:                           ; static: quit
    00000010 00                     .DATA.B     H'00
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00000E00               .RES.L      896
    00000E00              _projectileIndex:                ; static: projectileIndex
    00000E00 00000004               .RES.L      1
    00000E04              _maxProjectiles:                 ; static: maxProjectiles
    00000E04 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1

















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Mar-2023 18:54:41  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        59




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      690



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000C48 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000001C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000011 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000E08 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00001A8D Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          40
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           181






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmk7DA.tmp 

