SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    // the skeleton of this code was stolen from https://github.com/itisrazza/casio-pong
         Dodge.c     2    
         Dodge.c     3    
         Dodge.c     4    // Import some libraries
         Dodge.c     5    #include "stdio.h"    // Standard IO
         Dodge.c     6    #include <stdlib.h>
         Dodge.c     7    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     8    #include "dispbios.h" // Display BIOS
         Dodge.c     9    #include "timer.h"    // Timer
         Dodge.c    10    
         Dodge.c    11    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    12    
         Dodge.c    13    #define __KEYBIOS_H__
         Dodge.c    14    #define KEY_CHAR_0 71
         Dodge.c    15    #define KEY_CHAR_1 72
         Dodge.c    16    #define KEY_CHAR_2 62
         Dodge.c    17    #define KEY_CHAR_3 52
         Dodge.c    18    #define KEY_CHAR_4 73
         Dodge.c    19    #define KEY_CHAR_5 63
         Dodge.c    20    #define KEY_CHAR_6 53
         Dodge.c    21    #define KEY_CHAR_7 74
         Dodge.c    22    #define KEY_CHAR_8 64
         Dodge.c    23    #define KEY_CHAR_9 54
         Dodge.c    24    #define KEY_CHAR_DP 61
         Dodge.c    25    #define KEY_CHAR_EXP 51
         Dodge.c    26    #define KEY_CHAR_PMINUS 41
         Dodge.c    27    #define KEY_CHAR_PLUS 42
         Dodge.c    28    #define KEY_CHAR_MINUS 32
         Dodge.c    29    #define KEY_CHAR_MULT 43
         Dodge.c    30    #define KEY_CHAR_DIV 33
         Dodge.c    31    #define KEY_CHAR_FRAC 75
         Dodge.c    32    #define KEY_CHAR_LPAR 55
         Dodge.c    33    #define KEY_CHAR_RPAR 45
         Dodge.c    34    #define KEY_CHAR_COMMA 35
         Dodge.c    35    #define KEY_CHAR_STORE 25
         Dodge.c    36    #define KEY_CHAR_LOG 66
         Dodge.c    37    #define KEY_CHAR_LN 56
         Dodge.c    38    #define KEY_CHAR_SIN 46
         Dodge.c    39    #define KEY_CHAR_COS 36
         Dodge.c    40    #define KEY_CHAR_TAN 26
         Dodge.c    41    #define KEY_CHAR_SQUARE 67
         Dodge.c    42    #define KEY_CHAR_POW 57
         Dodge.c    43    #define KEY_CTRL_EXE 31
         Dodge.c    44    #define KEY_CTRL_DEL 44
         Dodge.c    45    #define KEY_CTRL_AC 32
         Dodge.c    46    #define KEY_CTRL_FD 65
         Dodge.c    47    #define KEY_CTRL_EXIT 47
         Dodge.c    48    #define KEY_CTRL_SHIFT 78
         Dodge.c    49    #define KEY_CTRL_ALPHA 77
         Dodge.c    50    #define KEY_CTRL_OPTN 68
         Dodge.c    51    #define KEY_CTRL_VARS 58
         Dodge.c    52    #define KEY_CTRL_UP 28
         Dodge.c    53    #define KEY_CTRL_DOWN 37
         Dodge.c    54    #define KEY_CTRL_LEFT 38




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_RIGHT 27
         Dodge.c    56    #define KEY_CTRL_F1 79
         Dodge.c    57    #define KEY_CTRL_F2 69
         Dodge.c    58    #define KEY_CTRL_F3 59
         Dodge.c    59    #define KEY_CTRL_F4 49
         Dodge.c    60    #define KEY_CTRL_F5 39
         Dodge.c    61    #define KEY_CTRL_F6 29
         Dodge.c    62    #define KEY_CTRL_MENU 48
         Dodge.c    63    #ifndef OS2Change
         Dodge.c    64    #define OS2Change
         Dodge.c    65    #ifndef OS2Change_GetOS2
         Dodge.c    66    #define OS2Change_GetOS2
         Dodge.c    67    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    68    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    69    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    70    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    71    {
         Dodge.c    72    unsigned char mainversion;
         Dodge.c    73    unsigned char minorversion;
         Dodge.c    74    unsigned short release;
         Dodge.c    75    unsigned short build;
         Dodge.c    76    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L758+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    77    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L758+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L758+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    78    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 201B                   OR          R1,R0
         Dodge.c    79    #define isOS2 (OSVersionAsInt() >= 0x02020000)
         Dodge.c    80    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    81    #endif
         Dodge.c    82    #ifndef OS2Change_Keyboard
         Dodge.c    83    #define OS2Change_Keyboard
         Dodge.c    84    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    85    {
         Dodge.c    86    char i;
         Dodge.c    87    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L609:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L609
         Dodge.c    88    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    89    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    90    {
         Dodge.c    91    unsigned char result=0;
         Dodge.c    92    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    93    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    94    char*PORTB=(void*)0xA4000122;
         Dodge.c    95    char*PORTM=(void*)0xA4000138;
         Dodge.c    96    char*PORTA=(void*)0xA4000120;
         Dodge.c    97    short smask;
         Dodge.c    98    char cmask;
         Dodge.c    99    unsigned char column, row;
         Dodge.c   100    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c   101    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   102    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L610
    00000072 A005                   BRA         L611




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000074 C907                   AND         #7,R0
    00000076              L610:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L611:                             
         Dodge.c   103    cmask = ~( 1 << ( row %8) );
         Dodge.c   104    if(row <8)
    00000080 994B                   MOV.W       L758,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L758+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L758+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L758+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L612
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   105    {
         Dodge.c   106      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   107      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   108      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   109      *PORTB = cmask;
    000000AE D221                   MOV.L       L758+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   110      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L751
    000000B8 CB0F                   OR          #15,R0
    000000BA              L612:                             
         Dodge.c   111    }
         Dodge.c   112    else
         Dodge.c   113    {
         Dodge.c   114      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   115      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
         Dodge.c   116      delay();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
         Dodge.c   117      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L758+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   118      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L751:                             
         Dodge.c   119    }
         Dodge.c   120    
         Dodge.c   121    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   122    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L758+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   123    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   124    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   125    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   126    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   127    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L758+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   128    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   129    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   130    
         Dodge.c   131    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   132    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L758:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   133    
         Dodge.c   134    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   135    {
         Dodge.c   136    unsigned short key[8];
         Dodge.c   137    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L759,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L759+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L615
         Dodge.c   138    if(isOS2)
         Dodge.c   139    {
         Dodge.c   140      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L759+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   141      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L759+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   142     
         Dodge.c   143      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000174 D24B                   MOV.L       L759+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L617
    000001A4 CA01                   XOR         #1,R0
    000001A6              L615:                             
         Dodge.c   144    }
         Dodge.c   145    else
         Dodge.c   146    {
         Dodge.c   147      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L759+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L759+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   148    }
         Dodge.c   149    }
    000001C2              L617:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   150    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
         Dodge.c   151    {
         Dodge.c   152    unsigned char x, ret;
         Dodge.c   153    
         Dodge.c   154    ret = GetKey(key);
    000001D4 D334                   MOV.L       L759+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   155    
         Dodge.c   156    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L620:                             
         Dodge.c   157    {
         Dodge.c   158      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L621
         Dodge.c   159      {
         Dodge.c   160       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   161       break;
    000001EE A004                   BRA         L619
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L621:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L620
    000001FA              L619:                             
         Dodge.c   162      }
         Dodge.c   163    }
         Dodge.c   164    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   165    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   166    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   167    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   168    #define GetKey(x) GetKeyMod(x)
         Dodge.c   169    #endif
         Dodge.c   170    #endif
         Dodge.c   171    
         Dodge.c   172    #pragma endregion
         Dodge.c   173    
         Dodge.c   174    #pragma region Constants
         Dodge.c   175    
         Dodge.c   176    // true/false since it's 2018




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   178    const char false = 0;
         Dodge.c   179    
         Dodge.c   180    // Display properties
         Dodge.c   181    const char DISPLAY_WIDTH    = 128;
         Dodge.c   182    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   183    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   184    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   185    
         Dodge.c   186    #pragma endregion
         Dodge.c   187    
         Dodge.c   188    struct Projectile {
         Dodge.c   189        char enabled;
         Dodge.c   190        float x;
         Dodge.c   191        float y;
         Dodge.c   192        float xVelocity;
         Dodge.c   193        float yVelocity;
         Dodge.c   194        float xAcceleration;
         Dodge.c   195        float yAcceleration;
         Dodge.c   196        int framesAlive;
         Dodge.c   197        float trackingForce;
         Dodge.c   198    };
         Dodge.c   199    struct Projectile projectiles[128];
         Dodge.c   200    
         Dodge.c   201    #pragma region Variables
         Dodge.c   202    
         Dodge.c   203    int playerHealth = 128;
         Dodge.c   204    int playerX = 64;
         Dodge.c   205    int playerY = 32;
         Dodge.c   206    
         Dodge.c   207    int projectileIndex;
         Dodge.c   208    int maxProjectiles;
         Dodge.c   209    int currentAttack = 0;
         Dodge.c   210    const int attacksTotal = 6;
         Dodge.c   211    
         Dodge.c   212    char paused = 1;
         Dodge.c   213    
         Dodge.c   214    char quit = 0;
         Dodge.c   215    
         Dodge.c   216    int timer = 0;
         Dodge.c   217    
         Dodge.c   218    char flicker = 1;
         Dodge.c   219    char damaged = 0;
         Dodge.c   220    int flickerOffset = 0;
         Dodge.c   221    
         Dodge.c   222    #pragma endregion
         Dodge.c   223    
         Dodge.c   224    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   225        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L624
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L624:                             
         Dodge.c   226        if (x < 0) return -1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000210 4411                   CMP/PZ      R4
    00000212 8901                   BT          L626
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L626:                             
         Dodge.c   227        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   228    }
    0000021A              L625:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   229    float Signf(float x) {
    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   230        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L759+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L627
    0000022C D020                   MOV.L       L759+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L627:                             
         Dodge.c   231        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L759+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L629
    00000240 D01D                   MOV.L       L759+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L629:                             
         Dodge.c   232        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   233    }
    0000024A              L628:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   234    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   235        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L630
         Dodge.c   236            return a;
    00000254 000B                   RTS
    00000256 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000258              L630:                             
         Dodge.c   237        else
         Dodge.c   238            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   239    }
    0000025A              L631:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP
         Dodge.c   240    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   241        if(a < b)
    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L633
         Dodge.c   242            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L633:                             
         Dodge.c   243        else
         Dodge.c   244            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   245    }
    00000268              L634:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   246    
         Dodge.c   247    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   248    {
         Dodge.c   249        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L759+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   250        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   251        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   252        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   253        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   254    
         Dodge.c   255        quit = true;
    00000286 D20E                   MOV.L       L759+44,R2 ; _true
    00000288 D10E                   MOV.L       L759+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   256    
         Dodge.c   257        return;
         Dodge.c   258    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028E 4F26                   LDS.L       @R15+,PR
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L759:                             
    00000294 A44B0000               .DATA.L     H'A44B0000
    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy
    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000
    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   259    
         Dodge.c   260    #pragma region Drawing functions
         Dodge.c   261    
         Dodge.c   262    // draw an image (from array) that covers the whole screen
         Dodge.c   263    // if drawWhite is false, white (0) pixels will be treated as transparent (i.e. not override whatever's be
                         +hind them)
         Dodge.c   264    void DrawImage(char sprite[128][64], char drawWhite) {
    000002C8              _DrawImage:                      ; function: DrawImage
                                                           ; frame size=40
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
         Dodge.c   265        size_t x;
         Dodge.c   266        size_t y;
         Dodge.c   267        for (x = 0; x < 128; x++)
    000002D2 EB00                   MOV         #0,R11
    000002D4 2F96                   MOV.L       R9,@-R15
    000002D6 EA40                   MOV         #64,R10
    000002D8 2F86                   MOV.L       R8,@-R15
    000002DA 6DB3                   MOV         R11,R13
    000002DC D91F                   MOV.L       L760+6,R9  ; _Bdisp_SetPoint_VRAM
    000002DE 4F22                   STS.L       PR,@-R15
    000002E0 9839                   MOV.W       L760,R8    ; H'0080
    000002E2 7FF8                   ADD         #-8,R15
    000002E4 1F41                   MOV.L       R4,@(4,R15)
    000002E6 2F50                   MOV.B       R5,@R15
    000002E8              L637:                             
    000002E8 53F1                   MOV.L       @(4,R15),R3
         Dodge.c   268        {
         Dodge.c   269            for (y = 0; y < 64; y++)
    000002EA 6EB3                   MOV         R11,R14
    000002EC 6CD3                   MOV         R13,R12
    000002EE 4C08                   SHLL2       R12
    000002F0 4C08                   SHLL2       R12
    000002F2 4C08                   SHLL2       R12
    000002F4 3C3C                   ADD         R3,R12
    000002F6              L638:                             
         Dodge.c   270            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   271                if(sprite[x][y] > 0 || drawWhite) {
    000002F6 60C3                   MOV         R12,R0
    000002F8 03EC                   MOV.B       @(R0,R14),R3
    000002FA 4315                   CMP/PL      R3
    000002FC 8902                   BT          L640
    000002FE 63F0                   MOV.B       @R15,R3
    00000300 2338                   TST         R3,R3
    00000302 8904                   BT          L639
    00000304              L640:                             
         Dodge.c   272                    Bdisp_SetPoint_VRAM(x, y, sprite[x][y]);
    00000304 60C3                   MOV         R12,R0
    00000306 65E3                   MOV         R14,R5
    00000308 06EC                   MOV.B       @(R0,R14),R6
    0000030A 490B                   JSR         @R9
    0000030C 64D3                   MOV         R13,R4
    0000030E              L639:                             
    0000030E 7E01                   ADD         #1,R14
    00000310 3EA2                   CMP/HS      R10,R14
    00000312 8BF0                   BF          L638
    00000314 7D01                   ADD         #1,R13
    00000316 3D82                   CMP/HS      R8,R13
    00000318 8BE6                   BF          L637
         Dodge.c   273                }
         Dodge.c   274            }
         Dodge.c   275        }
         Dodge.c   276        
         Dodge.c   277    }
    0000031A 7F08                   ADD         #8,R15
    0000031C 4F26                   LDS.L       @R15+,PR
    0000031E 68F6                   MOV.L       @R15+,R8
    00000320 69F6                   MOV.L       @R15+,R9
    00000322 6AF6                   MOV.L       @R15+,R10
    00000324 6BF6                   MOV.L       @R15+,R11
    00000326 6CF6                   MOV.L       @R15+,R12
    00000328 6DF6                   MOV.L       @R15+,R13
    0000032A 000B                   RTS
    0000032C 6EF6                   MOV.L       @R15+,R14
         Dodge.c   278    
         Dodge.c   279    void RenderMainMenu() {
    0000032E              _RenderMainMenu:                 ; function: RenderMainMenu
                                                           ; frame size=8196
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    0000032E 4F22                   STS.L       PR,@-R15
    00000330 9012                   MOV.W       L760+2,R0  ; H'E000
    00000332 3F0C                   ADD         R0,R15
         Dodge.c   280        char mainMenu[128][64] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                         +, 0, 0, 0, },
         Dodge.c   281    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   282    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   283    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   284    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   285    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   286    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   287    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   288    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   289    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   290    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   291    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   292    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   293    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   294    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   295    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   296    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   297    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   298    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   299    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   300    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   301    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   302    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   303    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   304    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   305    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   306    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   307    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   308    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   309    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   310    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   311    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   312    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   313    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   314    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   315    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   316    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   317    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   318    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   319    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   320    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   321    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   322    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   323    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   324    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   325    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   326    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   327    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   328    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   329    {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   330    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   331    {0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   332    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   333    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   334    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   335    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   336    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   337    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   338    {0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   339    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   340    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   341    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   342    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   343    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   344    {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   345    {0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   346    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   347    {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   348    {0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   349    {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   350    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   351    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   352    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   353    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   354    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   355    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   356    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   357    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   358    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   359    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   360    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   361    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   362    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   363    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   364    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   365    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   366    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   367    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   368    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   369    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   370    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   371    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   372    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   373    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   374    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   375    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   376    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   377    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   378    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   379    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   380    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   381    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   382    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   383    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   384    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   385    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   386    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   387    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   388    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   389    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   390    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   391    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   392    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   393    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   394    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   395    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   396    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   397    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   398    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   399    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   400    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   401    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   402    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   403    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   404    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   405    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   406    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   407    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   408    };
    00000334 D20A                   MOV.L       L760+10,R2 ; L445
    00000336 9010                   MOV.W       L760+4,R0  ; H'2000
    00000338 D30A                   MOV.L       L760+14,R3 ; __slow_mvn
    0000033A 430B                   JSR         @R3
    0000033C 61F3                   MOV         R15,R1
         Dodge.c   409        DrawImage(mainMenu, true);
    0000033E D10A                   MOV.L       L760+18,R1 ; _true
    00000340 6510                   MOV.B       @R1,R5
    00000342 BFC1                   BSR         _DrawImage
    00000344 64F3                   MOV         R15,R4
         Dodge.c   410        // Move VRAM to DD
         Dodge.c   411        Bdisp_PutDisp_DD();
    00000346 D209                   MOV.L       L760+22,R2 ; _Bdisp_PutDisp_DD
    00000348 420B                   JSR         @R2
    0000034A 0009                   NOP
         Dodge.c   412    }
    0000034C 9105                   MOV.W       L760+4,R1  ; H'2000
    0000034E 3F1C                   ADD         R1,R15
    00000350 4F26                   LDS.L       @R15+,PR
    00000352 000B                   RTS
    00000354 0009                   NOP
    00000356              L760:                             
    00000356 0080                   .DATA.W     H'0080
    00000358 E000                   .DATA.W     H'E000
    0000035A 2000                   .DATA.W     H'2000
    0000035C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000360 <00000000>             .DATA.L     L445
    00000364 <00000000>             .DATA.L     __slow_mvn
    00000368 <00000000>             .DATA.L     _true
    0000036C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   413    
         Dodge.c   414    /** Draws the projectils */
         Dodge.c   415    void DrawProjectiles()
    00000370              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    00000370 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000372 2FD6                   MOV.L       R13,@-R15
    00000374 2FC6                   MOV.L       R12,@-R15
    00000376 2FB6                   MOV.L       R11,@-R15
    00000378 2FA6                   MOV.L       R10,@-R15
    0000037A 2F96                   MOV.L       R9,@-R15
    0000037C 2F86                   MOV.L       R8,@-R15
    0000037E 4F22                   STS.L       PR,@-R15
    00000380 D44B                   MOV.L       L761+2,R4  ; _projectiles
    00000382 7FE4                   ADD         #-28,R15
    00000384 DA4B                   MOV.L       L761+6,R10 ; _Bdisp_SetPoint_VRAM
    00000386 6543                   MOV         R4,R5
    00000388 9391                   MOV.W       L761,R3    ; H'1200
    0000038A 6D43                   MOV         R4,R13
    0000038C 6943                   MOV         R4,R9
    0000038E 343C                   ADD         R3,R4
    00000390 1F46                   MOV.L       R4,@(24,R15)
         Dodge.c   416    {   
         Dodge.c   417        float x1;
         Dodge.c   418        float y1;
         Dodge.c   419        float x2;
         Dodge.c   420        float y2;
         Dodge.c   421        float dx;
         Dodge.c   422        float dy;
         Dodge.c   423        int x;
         Dodge.c   424        int y;
         Dodge.c   425        int decide;
         Dodge.c   426        int pk;
         Dodge.c   427        int j;
         Dodge.c   428    
         Dodge.c   429        size_t i;
         Dodge.c   430        for (i = 0; i < 128; i++)
    00000392              L641:                             
         Dodge.c   431        {
         Dodge.c   432            if(projectiles[i].enabled) {
    00000392 6390                   MOV.B       @R9,R3
    00000394 2338                   TST         R3,R3
    00000396 8B01                   BF          L762
    00000398 A0D9                   BRA         L642
    0000039A 0009                   NOP
    0000039C              L762:                             
         Dodge.c   433                x1 = projectiles[i].x;
    0000039C 54D1                   MOV.L       @(4,R13),R4
    0000039E 1F41                   MOV.L       R4,@(4,R15)
         Dodge.c   434                y1 = projectiles[i].y;
    000003A0 55D2                   MOV.L       @(8,R13),R5
         Dodge.c   435                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000003A2 6143                   MOV         R4,R1
    000003A4 D344                   MOV.L       L761+10,R3 ; __adds
    000003A6 2F52                   MOV.L       R5,@R15
    000003A8 430B                   JSR         @R3
    000003AA 50D3                   MOV.L       @(12,R13),R0
         Dodge.c   436                y2 = projectiles[i].y + projectiles[i].yVelocity;
    000003AC D242                   MOV.L       L761+10,R2 ; __adds
    000003AE 6803                   MOV         R0,R8
    000003B0 6153                   MOV         R5,R1
    000003B2 420B                   JSR         @R2
    000003B4 50D4                   MOV.L       @(16,R13),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   437                Bdisp_SetPoint_VRAM(x1, y1, 1);
    000003B6 E601                   MOV         #1,R6
    000003B8 D240                   MOV.L       L761+14,R2 ; __stoi
    000003BA 1F02                   MOV.L       R0,@(8,R15)
    000003BC 420B                   JSR         @R2
    000003BE 60F2                   MOV.L       @R15,R0
    000003C0 D33E                   MOV.L       L761+14,R3 ; __stoi
    000003C2 6503                   MOV         R0,R5
    000003C4 430B                   JSR         @R3
    000003C6 50F1                   MOV.L       @(4,R15),R0
    000003C8 4A0B                   JSR         @R10
    000003CA 6403                   MOV         R0,R4
         Dodge.c   438                Bdisp_SetPoint_VRAM(x2, y2, 1);
    000003CC D33B                   MOV.L       L761+14,R3 ; __stoi
    000003CE E601                   MOV         #1,R6
    000003D0 430B                   JSR         @R3
    000003D2 50F2                   MOV.L       @(8,R15),R0
    000003D4 D339                   MOV.L       L761+14,R3 ; __stoi
    000003D6 6503                   MOV         R0,R5
    000003D8 430B                   JSR         @R3
    000003DA 6083                   MOV         R8,R0
    000003DC 4A0B                   JSR         @R10
    000003DE 6403                   MOV         R0,R4
         Dodge.c   439    
         Dodge.c   440                // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.
                         +org/bresenhams-line-generation-algorithm/
         Dodge.c   441                dx = abs(x2 - x1);
    000003E0 D237                   MOV.L       L761+18,R2 ; __subs
    000003E2 6183                   MOV         R8,R1
    000003E4 420B                   JSR         @R2
    000003E6 50F1                   MOV.L       @(4,R15),R0
    000003E8 D334                   MOV.L       L761+14,R3 ; __stoi
    000003EA 430B                   JSR         @R3
    000003EC 0009                   NOP
    000003EE D235                   MOV.L       L761+22,R2 ; _abs
    000003F0 420B                   JSR         @R2
    000003F2 6403                   MOV         R0,R4
    000003F4 D334                   MOV.L       L761+26,R3 ; __itos
    000003F6 430B                   JSR         @R3
    000003F8 0009                   NOP
    000003FA 6B03                   MOV         R0,R11
         Dodge.c   442                dy = abs(y2 - y1);
    000003FC 51F2                   MOV.L       @(8,R15),R1
    000003FE D230                   MOV.L       L761+18,R2 ; __subs
    00000400 420B                   JSR         @R2
    00000402 60F2                   MOV.L       @R15,R0
    00000404 D32D                   MOV.L       L761+14,R3 ; __stoi
    00000406 430B                   JSR         @R3
    00000408 0009                   NOP
    0000040A D22E                   MOV.L       L761+22,R2 ; _abs
    0000040C 420B                   JSR         @R2
    0000040E 6403                   MOV         R0,R4
    00000410 D32D                   MOV.L       L761+26,R3 ; __itos
    00000412 430B                   JSR         @R3
    00000414 0009                   NOP
    00000416 6403                   MOV         R0,R4
         Dodge.c   443    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   444                decide = (dx > dy);
    00000418 D22C                   MOV.L       L761+30,R2 ; __gts
    0000041A 420B                   JSR         @R2
    0000041C 61B3                   MOV         R11,R1
    0000041E 1F03                   MOV.L       R0,@(12,R15)
         Dodge.c   445                
         Dodge.c   446                pk = 2 * dy - dx;
    00000420 D02B                   MOV.L       L761+34,R0 ; H'40000000
    00000422 D22C                   MOV.L       L761+38,R2 ; __muls
    00000424 420B                   JSR         @R2
    00000426 6143                   MOV         R4,R1
    00000428 D325                   MOV.L       L761+18,R3 ; __subs
    0000042A 6C03                   MOV         R0,R12
    0000042C 6103                   MOV         R0,R1
    0000042E 430B                   JSR         @R3
    00000430 60B3                   MOV         R11,R0
    00000432 D222                   MOV.L       L761+14,R2 ; __stoi
    00000434 420B                   JSR         @R2
    00000436 0009                   NOP
    00000438 D226                   MOV.L       L761+38,R2 ; __muls
    0000043A 6E03                   MOV         R0,R14
    0000043C D024                   MOV.L       L761+34,R0 ; H'40000000
         Dodge.c   447                for (j = 0; j <= dx; j++) {
    0000043E E300                   MOV         #0,R3
    00000440 1F34                   MOV.L       R3,@(16,R15)
    00000442 420B                   JSR         @R2
    00000444 61B3                   MOV         R11,R1
    00000446 D31E                   MOV.L       L761+18,R3 ; __subs
    00000448 430B                   JSR         @R3
    0000044A 61C3                   MOV         R12,R1
    0000044C 1F05                   MOV.L       R0,@(20,R15)
    0000044E E100                   MOV         #0,R1
    00000450 D321                   MOV.L       L761+42,R3 ; __les
    00000452 430B                   JSR         @R3
    00000454 60B3                   MOV         R11,R0
    00000456 8800                   CMP/EQ      #0,R0
    00000458 8979                   BT          L642
    0000045A              L644:                             
         Dodge.c   448                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    0000045A E601                   MOV         #1,R6
    0000045C D217                   MOV.L       L761+14,R2 ; __stoi
    0000045E 420B                   JSR         @R2
    00000460 60F2                   MOV.L       @R15,R0
    00000462 6503                   MOV         R0,R5
    00000464 D315                   MOV.L       L761+14,R3 ; __stoi
    00000466 430B                   JSR         @R3
    00000468 50F1                   MOV.L       @(4,R15),R0
    0000046A 4A0B                   JSR         @R10
    0000046C 6403                   MOV         R0,R4
         Dodge.c   449                    
         Dodge.c   450                    // checking either to decrement or increment the
         Dodge.c   451                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   452                    x1 < x2 ? x1++ : x1--;
    0000046E 51F1                   MOV.L       @(4,R15),R1
    00000470 D31A                   MOV.L       L761+46,R3 ; __lts
    00000472 430B                   JSR         @R3
    00000474 6083                   MOV         R8,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000476 8800                   CMP/EQ      #0,R0
    00000478 8906                   BT          L645
    0000047A D119                   MOV.L       L761+50,R1 ; H'3F800000
    0000047C D20E                   MOV.L       L761+10,R2 ; __adds
    0000047E 420B                   JSR         @R2
    00000480 50F1                   MOV.L       @(4,R15),R0
    00000482 1F01                   MOV.L       R0,@(4,R15)
    00000484 A006                   BRA         L646
    00000486 0009                   NOP
    00000488              L645:                             
    00000488 51F1                   MOV.L       @(4,R15),R1
    0000048A D015                   MOV.L       L761+50,R0 ; H'3F800000
    0000048C D30C                   MOV.L       L761+18,R3 ; __subs
    0000048E 430B                   JSR         @R3
    00000490 0009                   NOP
    00000492 1F01                   MOV.L       R0,@(4,R15)
    00000494              L646:                             
         Dodge.c   453                    if (pk < 0) {
    00000494 4E11                   CMP/PZ      R14
    00000496 8930                   BT          L647
         Dodge.c   454                        // decision value will decide to plot
         Dodge.c   455                        // either  x1 or y1 in x's position
         Dodge.c   456                        if (decide == 0) {
    00000498 52F3                   MOV.L       @(12,R15),R2
    0000049A 2228                   TST         R2,R2
    0000049C 8B22                   BF          L648
         Dodge.c   457                            // putpixel(x1, y1, RED);
         Dodge.c   458                            pk = pk + 2 * dy;
    0000049E D30A                   MOV.L       L761+26,R3 ; __itos
    000004A0 430B                   JSR         @R3
    000004A2 60E3                   MOV         R14,R0
    000004A4 D204                   MOV.L       L761+10,R2 ; __adds
    000004A6 420B                   JSR         @R2
    000004A8 61C3                   MOV         R12,R1
    000004AA A021                   BRA         L752
    000004AC 0009                   NOP
    000004AE              L761:                             
    000004AE 1200                   .DATA.W     H'1200
    000004B0 <00000000>             .DATA.L     _projectiles
    000004B4 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000004B8 <00000000>             .DATA.L     __adds
    000004BC <00000000>             .DATA.L     __stoi
    000004C0 <00000000>             .DATA.L     __subs
    000004C4 <00000000>             .DATA.L     _abs
    000004C8 <00000000>             .DATA.L     __itos
    000004CC <00000000>             .DATA.L     __gts
    000004D0 40000000               .DATA.L     H'40000000
    000004D4 <00000000>             .DATA.L     __muls
    000004D8 <00000000>             .DATA.L     __les
    000004DC <00000000>             .DATA.L     __lts
    000004E0 3F800000               .DATA.L     H'3F800000
    000004E4              L648:                             
         Dodge.c   459                        }
         Dodge.c   460                        else {
         Dodge.c   461                            //(y1,x1) is passed in xt
         Dodge.c   462                            // putpixel(y1, x1, YELLOW);
         Dodge.c   463                            pk = pk + 2 * dy;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004E4 D357                   MOV.L       L763,R3    ; __itos
    000004E6 430B                   JSR         @R3
    000004E8 60E3                   MOV         R14,R0
    000004EA D257                   MOV.L       L763+4,R2  ; __adds
    000004EC 420B                   JSR         @R2
    000004EE 61C3                   MOV         R12,R1
    000004F0              L752:                             
    000004F0 D356                   MOV.L       L763+8,R3  ; __stoi
    000004F2 430B                   JSR         @R3
    000004F4 0009                   NOP
    000004F6 A01F                   BRA         L650
    000004F8 6E03                   MOV         R0,R14
    000004FA              L647:                             
         Dodge.c   464                        }
         Dodge.c   465                    }
         Dodge.c   466                    else {
         Dodge.c   467                        y1 < y2 ? y1++ : y1--;
    000004FA 61F2                   MOV.L       @R15,R1
    000004FC D354                   MOV.L       L763+12,R3 ; __lts
    000004FE 430B                   JSR         @R3
    00000500 50F2                   MOV.L       @(8,R15),R0
    00000502 8800                   CMP/EQ      #0,R0
    00000504 8906                   BT          L651
    00000506 D153                   MOV.L       L763+16,R1 ; H'3F800000
    00000508 D24F                   MOV.L       L763+4,R2  ; __adds
    0000050A 420B                   JSR         @R2
    0000050C 60F2                   MOV.L       @R15,R0
    0000050E 2F02                   MOV.L       R0,@R15
    00000510 A006                   BRA         L652
    00000512 0009                   NOP
    00000514              L651:                             
    00000514 61F2                   MOV.L       @R15,R1
    00000516 D04F                   MOV.L       L763+16,R0 ; H'3F800000
    00000518 D34F                   MOV.L       L763+20,R3 ; __subs
    0000051A 430B                   JSR         @R3
    0000051C 0009                   NOP
    0000051E 2F02                   MOV.L       R0,@R15
    00000520              L652:                             
         Dodge.c   468                        if (decide == 0) {
    00000520 53F3                   MOV.L       @(12,R15),R3
    00000522 2338                   TST         R3,R3
         Dodge.c   469            
         Dodge.c   470                            // putpixel(x1, y1, RED);
         Dodge.c   471                        }
         Dodge.c   472                        else {
         Dodge.c   473                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   474                        }
         Dodge.c   475                        pk = pk + 2 * dy - 2 * dx;
    00000524 D347                   MOV.L       L763,R3    ; __itos
    00000526 430B                   JSR         @R3
    00000528 60E3                   MOV         R14,R0
    0000052A D247                   MOV.L       L763+4,R2  ; __adds
    0000052C 420B                   JSR         @R2
    0000052E 51F5                   MOV.L       @(20,R15),R1
    00000530 D346                   MOV.L       L763+8,R3  ; __stoi
    00000532 430B                   JSR         @R3
    00000534 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000536 6E03                   MOV         R0,R14
    00000538              L650:                             
    00000538 52F4                   MOV.L       @(16,R15),R2
    0000053A 7201                   ADD         #1,R2
    0000053C 1F24                   MOV.L       R2,@(16,R15)
    0000053E D341                   MOV.L       L763,R3    ; __itos
    00000540 430B                   JSR         @R3
    00000542 6023                   MOV         R2,R0
    00000544 D345                   MOV.L       L763+24,R3 ; __ges
    00000546 430B                   JSR         @R3
    00000548 61B3                   MOV         R11,R1
    0000054A 8800                   CMP/EQ      #0,R0
    0000054C 8B85                   BF          L644
    0000054E              L642:                             
    0000054E 7924                   ADD         #36,R9
    00000550 52F6                   MOV.L       @(24,R15),R2
    00000552 3922                   CMP/HS      R2,R9
    00000554 8D02                   BT/S        L764
    00000556 7D24                   ADD         #36,R13
    00000558 AF1B                   BRA         L641
    0000055A 0009                   NOP
    0000055C              L764:                             
         Dodge.c   476                    }
         Dodge.c   477                }
         Dodge.c   478            }
         Dodge.c   479        }
         Dodge.c   480    }
    0000055C 7F1C                   ADD         #28,R15
    0000055E 4F26                   LDS.L       @R15+,PR
    00000560 68F6                   MOV.L       @R15+,R8
    00000562 69F6                   MOV.L       @R15+,R9
    00000564 6AF6                   MOV.L       @R15+,R10
    00000566 6BF6                   MOV.L       @R15+,R11
    00000568 6CF6                   MOV.L       @R15+,R12
    0000056A 6DF6                   MOV.L       @R15+,R13
    0000056C 000B                   RTS
    0000056E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   481    
         Dodge.c   482    /** Draws the player */
         Dodge.c   483    void DrawPlayer()
    00000570              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __modls
    00000570 2FE6                   MOV.L       R14,@-R15
    00000572 2FD6                   MOV.L       R13,@-R15
    00000574 2FC6                   MOV.L       R12,@-R15
    00000576 2FB6                   MOV.L       R11,@-R15
    00000578 4F22                   STS.L       PR,@-R15
         Dodge.c   484    {   
         Dodge.c   485        if(damaged) {
    0000057A DB39                   MOV.L       L763+28,R11; _flicker
    0000057C D239                   MOV.L       L763+32,R2 ; _damaged
    0000057E 6320                   MOV.B       @R2,R3
    00000580 2338                   TST         R3,R3
    00000582 890E                   BT          L655
         Dodge.c   486            if((timer - flickerOffset) % 10 == 0) { // damage flash animation




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000584 D038                   MOV.L       L763+36,R0 ; _flickerOffset
    00000586 6302                   MOV.L       @R0,R3
    00000588 D238                   MOV.L       L763+40,R2 ; _timer
    0000058A 6122                   MOV.L       @R2,R1
    0000058C D238                   MOV.L       L763+44,R2 ; __modls
    0000058E 3138                   SUB         R3,R1
    00000590 420B                   JSR         @R2
    00000592 E00A                   MOV         #10,R0
    00000594 2008                   TST         R0,R0
    00000596 8B06                   BF          L658
         Dodge.c   487                flicker = !flicker;
    00000598 60B0                   MOV.B       @R11,R0
    0000059A 2008                   TST         R0,R0
    0000059C 0029                   MOVT        R0
    0000059E A002                   BRA         L658
    000005A0 2B00                   MOV.B       R0,@R11
    000005A2              L655:                             
         Dodge.c   488            }
         Dodge.c   489        }
         Dodge.c   490        else
         Dodge.c   491            flicker = 1;
    000005A2 E101                   MOV         #1,R1
    000005A4 2B10                   MOV.B       R1,@R11
    000005A6              L658:                             
         Dodge.c   492        Bdisp_SetPoint_VRAM(playerX, playerY, flicker); // middle
    000005A6 DC33                   MOV.L       L763+48,R12; _playerY
    000005A8 DD33                   MOV.L       L763+52,R13; _Bdisp_SetPoint_VRAM
    000005AA DE34                   MOV.L       L763+56,R14; _playerX
    000005AC 66B0                   MOV.B       @R11,R6
    000005AE 65C2                   MOV.L       @R12,R5
    000005B0 4D0B                   JSR         @R13
    000005B2 64E2                   MOV.L       @R14,R4
         Dodge.c   493        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    000005B4 65C2                   MOV.L       @R12,R5
    000005B6 E601                   MOV         #1,R6
    000005B8 64E2                   MOV.L       @R14,R4
    000005BA 4D0B                   JSR         @R13
    000005BC 7401                   ADD         #1,R4
         Dodge.c   494        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    000005BE E601                   MOV         #1,R6
    000005C0 65C2                   MOV.L       @R12,R5
    000005C2 64E2                   MOV.L       @R14,R4
    000005C4 4D0B                   JSR         @R13
    000005C6 74FF                   ADD         #-1,R4
         Dodge.c   495        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    000005C8 65C2                   MOV.L       @R12,R5
    000005CA E601                   MOV         #1,R6
    000005CC 7501                   ADD         #1,R5
    000005CE 4D0B                   JSR         @R13
    000005D0 64E2                   MOV.L       @R14,R4
         Dodge.c   496        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000005D2 E601                   MOV         #1,R6
    000005D4 65C2                   MOV.L       @R12,R5
    000005D6 75FF                   ADD         #-1,R5
    000005D8 4D0B                   JSR         @R13
    000005DA 64E2                   MOV.L       @R14,R4
         Dodge.c   497    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005DC 4F26                   LDS.L       @R15+,PR
    000005DE 6BF6                   MOV.L       @R15+,R11
    000005E0 6CF6                   MOV.L       @R15+,R12
    000005E2 6DF6                   MOV.L       @R15+,R13
    000005E4 000B                   RTS
    000005E6 6EF6                   MOV.L       @R15+,R14
         Dodge.c   498    void NotDamaged() {
    000005E8              _NotDamaged:                     ; function: NotDamaged
                                                           ; frame size=0
         Dodge.c   499        damaged = false;
    000005E8 D225                   MOV.L       L763+60,R2 ; _false
    000005EA 6320                   MOV.B       @R2,R3
    000005EC D11D                   MOV.L       L763+32,R1 ; _damaged
    000005EE 2130                   MOV.B       R3,@R1
         Dodge.c   500        KillTimer(ID_USER_TIMER4);
    000005F0 D324                   MOV.L       L763+64,R3 ; _KillTimer
    000005F2 432B                   JMP         @R3
    000005F4 E404                   MOV         #4,R4
         Dodge.c   501        // if the player is damaged multiple times within one second, the animation will only play for 2 secon
                         +ds from the
         Dodge.c   502        // first hit. i can't really be bothered fixing this
         Dodge.c   503    }
         Dodge.c   504    
         Dodge.c   505    void DrawHealthBar() {
    000005F6              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __modls
    000005F6 2FE6                   MOV.L       R14,@-R15
    000005F8 2FD6                   MOV.L       R13,@-R15
    000005FA 2FC6                   MOV.L       R12,@-R15
    000005FC 2FB6                   MOV.L       R11,@-R15
    000005FE 4F22                   STS.L       PR,@-R15
         Dodge.c   506        size_t i;
         Dodge.c   507        for (i = 0; i < playerHealth; i++) // health bar
    00000600 DC21                   MOV.L       L763+68,R12; _playerHealth
    00000602 DD1D                   MOV.L       L763+52,R13; _Bdisp_SetPoint_VRAM
    00000604 A005                   BRA         L659
    00000606 EE00                   MOV         #0,R14
    00000608              L660:                             
         Dodge.c   508            Bdisp_SetPoint_VRAM(i, 63, 1);
    00000608 E601                   MOV         #1,R6
    0000060A E53F                   MOV         #63,R5
    0000060C 4D0B                   JSR         @R13
    0000060E 64E3                   MOV         R14,R4
    00000610 7E01                   ADD         #1,R14
    00000612              L659:                             
    00000612 62C2                   MOV.L       @R12,R2
    00000614 3E22                   CMP/HS      R2,R14
    00000616 8BF7                   BF          L660
         Dodge.c   509        for (i = 0; i < (timer % 100); i++) // bar until next attack
    00000618 DB14                   MOV.L       L763+40,R11; _timer
    0000061A EC64                   MOV         #100,R12
    0000061C A006                   BRA         L661
    0000061E EE00                   MOV         #0,R14
    00000620              L662:                             
         Dodge.c   510            Bdisp_SetPoint_VRAM(14 + i, 1, 1); // + 14 so that it's centered (half of 28) (128-100=28) (screen




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         + is 128 wide)
    00000620 E601                   MOV         #1,R6
    00000622 6563                   MOV         R6,R5
    00000624 64E3                   MOV         R14,R4
    00000626 4D0B                   JSR         @R13
    00000628 740E                   ADD         #14,R4
    0000062A 7E01                   ADD         #1,R14
    0000062C              L661:                             
    0000062C 61B2                   MOV.L       @R11,R1
    0000062E D310                   MOV.L       L763+44,R3 ; __modls
    00000630 430B                   JSR         @R3
    00000632 60C3                   MOV         R12,R0
    00000634 3E02                   CMP/HS      R0,R14
    00000636 8BF3                   BF          L662
         Dodge.c   511    }
    00000638 4F26                   LDS.L       @R15+,PR
    0000063A 6BF6                   MOV.L       @R15+,R11
    0000063C 6CF6                   MOV.L       @R15+,R12
    0000063E 6DF6                   MOV.L       @R15+,R13
    00000640 000B                   RTS
    00000642 6EF6                   MOV.L       @R15+,R14
    00000644              L763:                             
    00000644 <00000000>             .DATA.L     __itos
    00000648 <00000000>             .DATA.L     __adds
    0000064C <00000000>             .DATA.L     __stoi
    00000650 <00000000>             .DATA.L     __lts
    00000654 3F800000               .DATA.L     H'3F800000
    00000658 <00000000>             .DATA.L     __subs
    0000065C <00000000>             .DATA.L     __ges
    00000660 <00000000>             .DATA.L     _flicker
    00000664 <00000000>             .DATA.L     _damaged
    00000668 <00000000>             .DATA.L     _flickerOffset
    0000066C <00000000>             .DATA.L     _timer
    00000670 <00000000>             .DATA.L     __modls
    00000674 <00000000>             .DATA.L     _playerY
    00000678 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    0000067C <00000000>             .DATA.L     _playerX
    00000680 <00000000>             .DATA.L     _false
    00000684 <00000000>             .DATA.L     _KillTimer
    00000688 <00000000>             .DATA.L     _playerHealth
         Dodge.c   512    
         Dodge.c   513    #pragma endregion
         Dodge.c   514    
         Dodge.c   515    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   516    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration, float trackingForce) {
    0000068C              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=24
    0000068C 2FE6                   MOV.L       R14,@-R15
    0000068E 2FD6                   MOV.L       R13,@-R15
    00000690 2FC6                   MOV.L       R12,@-R15
    00000692 2FA6                   MOV.L       R10,@-R15
    00000694 DE2D                   MOV.L       L765+4,R14 ; _projectiles
    00000696 7FF8                   ADD         #-8,R15
    00000698 9356                   MOV.W       L765,R3    ; H'1200
    0000069A 6DE3                   MOV         R14,R13
         Dodge.c   517        size_t i;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   518        for (i = 0; i < 128; i++)
    0000069C DA2C                   MOV.L       L765+8,R10 ; _true
    0000069E 2FE2                   MOV.L       R14,@R15
    000006A0 1FE1                   MOV.L       R14,@(4,R15)
    000006A2 61F2                   MOV.L       @R15,R1
    000006A4 313C                   ADD         R3,R1
    000006A6 3D12                   CMP/HS      R1,R13
    000006A8 8D15                   BT/S        L666
    000006AA EC00                   MOV         #0,R12
    000006AC              L664:                             
         Dodge.c   519        {
         Dodge.c   520            if(!projectiles[i].enabled) { // found a free spot in the array
    000006AC 63D0                   MOV.B       @R13,R3
    000006AE 2338                   TST         R3,R3
    000006B0 8B0D                   BF          L665
         Dodge.c   521                // set up the projectile
         Dodge.c   522                projectiles[i].x = x;
    000006B2 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   523                projectiles[i].y = y;
    000006B4 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   524                projectiles[i].xVelocity = xVelocity;
    000006B6 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   525                projectiles[i].yVelocity = yVelocity;
    000006B8 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   526                projectiles[i].xAcceleration = xAcceleration;
    000006BA 53F6                   MOV.L       @(24,R15),R3
    000006BC 1E35                   MOV.L       R3,@(20,R14)
         Dodge.c   527                projectiles[i].yAcceleration = yAcceleration;
    000006BE 52F7                   MOV.L       @(28,R15),R2
    000006C0 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   528                projectiles[i].trackingForce = trackingForce;
    000006C2 53F8                   MOV.L       @(32,R15),R3
    000006C4 1E38                   MOV.L       R3,@(32,R14)
         Dodge.c   529                // enable it
         Dodge.c   530                projectiles[i].enabled = true;
    000006C6 62A0                   MOV.B       @R10,R2
    000006C8 2E20                   MOV.B       R2,@R14
         Dodge.c   531                projectiles[i].framesAlive = 0;
         Dodge.c   532                // stop the loop, we're done
         Dodge.c   533                return;
    000006CA A004                   BRA         L666
    000006CC 1EC7                   MOV.L       R12,@(28,R14)
    000006CE              L665:                             
    000006CE 7D24                   ADD         #36,R13
    000006D0 3D12                   CMP/HS      R1,R13
    000006D2 8FEB                   BF/S        L664
    000006D4 7E24                   ADD         #36,R14
    000006D6              L666:                             
         Dodge.c   534            }
         Dodge.c   535        }
         Dodge.c   536        
         Dodge.c   537    }
    000006D6 7F08                   ADD         #8,R15
    000006D8 6AF6                   MOV.L       @R15+,R10
    000006DA 6CF6                   MOV.L       @R15+,R12
    000006DC 6DF6                   MOV.L       @R15+,R13
    000006DE 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006E0 6EF6                   MOV.L       @R15+,R14
         Dodge.c   538    
         Dodge.c   539    int IsCollidingWithPlayer(int x, int y) {
    000006E2              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer
                                                           ; frame size=12
    000006E2 4F22                   STS.L       PR,@-R15
         Dodge.c   540        return (abs(x - playerX) < 2 && abs(y - playerY) < 2);
    000006E4 D21B                   MOV.L       L765+12,R2 ; _playerX
    000006E6 7FF8                   ADD         #-8,R15
    000006E8 D11B                   MOV.L       L765+16,R1 ; _abs
    000006EA 1F41                   MOV.L       R4,@(4,R15)
    000006EC 2F52                   MOV.L       R5,@R15
    000006EE 6322                   MOV.L       @R2,R3
    000006F0 54F1                   MOV.L       @(4,R15),R4
    000006F2 410B                   JSR         @R1
    000006F4 3438                   SUB         R3,R4
    000006F6 E302                   MOV         #2,R3
    000006F8 3033                   CMP/GE      R3,R0
    000006FA 890C                   BT          L667
    000006FC D117                   MOV.L       L765+20,R1 ; _playerY
    000006FE 6212                   MOV.L       @R1,R2
    00000700 64F2                   MOV.L       @R15,R4
    00000702 D315                   MOV.L       L765+16,R3 ; _abs
    00000704 430B                   JSR         @R3
    00000706 3428                   SUB         R2,R4
    00000708 E202                   MOV         #2,R2
    0000070A 3023                   CMP/GE      R2,R0
    0000070C 8903                   BT          L667
    0000070E 7F08                   ADD         #8,R15
    00000710 4F26                   LDS.L       @R15+,PR
    00000712 000B                   RTS
    00000714 E001                   MOV         #1,R0
    00000716              L667:                             
    00000716 E000                   MOV         #0,R0
         Dodge.c   541    }
    00000718              L669:                             
    00000718 7F08                   ADD         #8,R15
    0000071A 4F26                   LDS.L       @R15+,PR
    0000071C 000B                   RTS
    0000071E 0009                   NOP
         Dodge.c   542    
         Dodge.c   543    #pragma region Timer functions
         Dodge.c   544    
         Dodge.c   545    /** Timer #2: Renders screen */
         Dodge.c   546    void RenderScreen()
    00000720              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4
    00000720 4F22                   STS.L       PR,@-R15
         Dodge.c   547    {
         Dodge.c   548        if(!quit) {
    00000722 D10F                   MOV.L       L765+24,R1 ; _quit
    00000724 6310                   MOV.B       @R1,R3
    00000726 2338                   TST         R3,R3
    00000728 8B0B                   BF          L670
         Dodge.c   549            // Clear current screen
         Dodge.c   550            Bdisp_AllClr_VRAM();
    0000072A D30E                   MOV.L       L765+28,R3 ; _Bdisp_AllClr_VRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000072C 430B                   JSR         @R3
    0000072E 0009                   NOP
         Dodge.c   551                
         Dodge.c   552            // Draw the different parts of the screen
         Dodge.c   553            DrawProjectiles();
    00000730 BE1E                   BSR         _DrawProjectiles
    00000732 0009                   NOP
         Dodge.c   554            DrawPlayer();
    00000734 BF1C                   BSR         _DrawPlayer
    00000736 0009                   NOP
         Dodge.c   555            DrawHealthBar();
    00000738 BF5D                   BSR         _DrawHealthBar
    0000073A 0009                   NOP
         Dodge.c   556    
         Dodge.c   557            // Move VRAM to DD
         Dodge.c   558            Bdisp_PutDisp_DD();
    0000073C D30A                   MOV.L       L765+32,R3 ; _Bdisp_PutDisp_DD
    0000073E 432B                   JMP         @R3
    00000740 4F26                   LDS.L       @R15+,PR
    00000742              L670:                             
         Dodge.c   559        }
         Dodge.c   560    }
    00000742 4F26                   LDS.L       @R15+,PR
    00000744 000B                   RTS
    00000746 0009                   NOP
    00000748              L765:                             
    00000748 1200                   .DATA.W     H'1200
    0000074A 0000                   .DATA.W     0
    0000074C <00000000>             .DATA.L     _projectiles
    00000750 <00000000>             .DATA.L     _true
    00000754 <00000000>             .DATA.L     _playerX
    00000758 <00000000>             .DATA.L     _abs
    0000075C <00000000>             .DATA.L     _playerY
    00000760 <00000000>             .DATA.L     _quit
    00000764 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000768 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   561    
         Dodge.c   562    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    0000076C              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __modls, __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, _
                        +                                  _les
    0000076C 2FE6                   MOV.L       R14,@-R15
         Dodge.c   563        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   564        float dx;
         Dodge.c   565        float dy;
         Dodge.c   566        int decide;
         Dodge.c   567        int pk;
         Dodge.c   568        int j;
         Dodge.c   569    
         Dodge.c   570        dx = abs(x2 - x1);
    0000076E 6173                   MOV         R7,R1
    00000770 D343                   MOV.L       L766+2,R3  ; __subs
    00000772 2FD6                   MOV.L       R13,@-R15
    00000774 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000776 2FB6                   MOV.L       R11,@-R15
    00000778 2FA6                   MOV.L       R10,@-R15
    0000077A 2F96                   MOV.L       R9,@-R15
    0000077C 2F86                   MOV.L       R8,@-R15
    0000077E 4F22                   STS.L       PR,@-R15
    00000780 7FE8                   ADD         #-24,R15
    00000782 1F43                   MOV.L       R4,@(12,R15)
    00000784 1F51                   MOV.L       R5,@(4,R15)
    00000786 2F62                   MOV.L       R6,@R15
    00000788 1F72                   MOV.L       R7,@(8,R15)
    0000078A 430B                   JSR         @R3
    0000078C 50F1                   MOV.L       @(4,R15),R0
    0000078E D23D                   MOV.L       L766+6,R2  ; __stoi
    00000790 420B                   JSR         @R2
    00000792 0009                   NOP
    00000794 D33C                   MOV.L       L766+10,R3 ; _abs
    00000796 430B                   JSR         @R3
    00000798 6403                   MOV         R0,R4
    0000079A D23C                   MOV.L       L766+14,R2 ; __itos
    0000079C 420B                   JSR         @R2
    0000079E 0009                   NOP
         Dodge.c   571        dy = abs(y2 - y1);
    000007A0 51FE                   MOV.L       @(56,R15),R1
    000007A2 6D03                   MOV         R0,R13
    000007A4 D336                   MOV.L       L766+2,R3  ; __subs
    000007A6 430B                   JSR         @R3
    000007A8 60F2                   MOV.L       @R15,R0
    000007AA D236                   MOV.L       L766+6,R2  ; __stoi
    000007AC 420B                   JSR         @R2
    000007AE 0009                   NOP
    000007B0 D335                   MOV.L       L766+10,R3 ; _abs
    000007B2 430B                   JSR         @R3
    000007B4 6403                   MOV         R0,R4
    000007B6 D235                   MOV.L       L766+14,R2 ; __itos
    000007B8 420B                   JSR         @R2
    000007BA 0009                   NOP
         Dodge.c   572    
         Dodge.c   573        decide = (dx > dy);
    000007BC D334                   MOV.L       L766+18,R3 ; __gts
    000007BE 6403                   MOV         R0,R4
    000007C0 430B                   JSR         @R3
    000007C2 61D3                   MOV         R13,R1
         Dodge.c   574        
         Dodge.c   575        pk = 2 * dy - dx;
    000007C4 D234                   MOV.L       L766+26,R2 ; __muls
    000007C6 6903                   MOV         R0,R9
    000007C8 D032                   MOV.L       L766+22,R0 ; H'40000000
    000007CA 420B                   JSR         @R2
    000007CC 6143                   MOV         R4,R1
    000007CE 6A03                   MOV         R0,R10
    000007D0 D32B                   MOV.L       L766+2,R3  ; __subs
    000007D2 6103                   MOV         R0,R1
    000007D4 430B                   JSR         @R3
    000007D6 60D3                   MOV         R13,R0
    000007D8 D22A                   MOV.L       L766+6,R2  ; __stoi
    000007DA 420B                   JSR         @R2
    000007DC 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007DE 6E03                   MOV         R0,R14
    000007E0 53F3                   MOV.L       @(12,R15),R3
         Dodge.c   576        for (j = 0; j <= dx; j++) {
    000007E2 E800                   MOV         #0,R8
    000007E4 D02B                   MOV.L       L766+22,R0 ; H'40000000
    000007E6 6233                   MOV         R3,R2
    000007E8 4308                   SHLL2       R3
    000007EA 4300                   SHLL        R3
    000007EC 332C                   ADD         R2,R3
    000007EE 4308                   SHLL2       R3
    000007F0 D22A                   MOV.L       L766+30,R2 ; _projectiles
    000007F2 1F35                   MOV.L       R3,@(20,R15)
    000007F4 332C                   ADD         R2,R3
    000007F6 1F33                   MOV.L       R3,@(12,R15)
    000007F8 D227                   MOV.L       L766+26,R2 ; __muls
    000007FA 420B                   JSR         @R2
    000007FC 61D3                   MOV         R13,R1
    000007FE D220                   MOV.L       L766+2,R2  ; __subs
    00000800 420B                   JSR         @R2
    00000802 61A3                   MOV         R10,R1
    00000804 1F04                   MOV.L       R0,@(16,R15)
    00000806 6183                   MOV         R8,R1
    00000808 D225                   MOV.L       L766+34,R2 ; __les
    0000080A 420B                   JSR         @R2
    0000080C 60D3                   MOV         R13,R0
    0000080E 8800                   CMP/EQ      #0,R0
    00000810 8B01                   BF          L767
    00000812 A0A8                   BRA         L671
    00000814 0009                   NOP
    00000816              L767:                             
    00000816 DB23                   MOV.L       L766+38,R11; _false
    00000818 DC23                   MOV.L       L766+42,R12; _playerHealth
    0000081A              L672:                             
         Dodge.c   577            // check for collision
         Dodge.c   578            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    0000081A D31A                   MOV.L       L766+6,R3  ; __stoi
    0000081C 430B                   JSR         @R3
    0000081E 60F2                   MOV.L       @R15,R0
    00000820 D318                   MOV.L       L766+6,R3  ; __stoi
    00000822 6503                   MOV         R0,R5
    00000824 430B                   JSR         @R3
    00000826 50F1                   MOV.L       @(4,R15),R0
    00000828 BF5B                   BSR         _IsCollidingWithPlayer
    0000082A 6403                   MOV         R0,R4
    0000082C 2008                   TST         R0,R0
    0000082E 8919                   BT          L673
         Dodge.c   579                // damage player
         Dodge.c   580                playerHealth -= 1;
    00000830 63C2                   MOV.L       @R12,R3
    00000832 73FF                   ADD         #-1,R3
    00000834 2C32                   MOV.L       R3,@R12
         Dodge.c   581                damaged = true;
    00000836 D11D                   MOV.L       L766+46,R1 ; _true
    00000838 D01D                   MOV.L       L766+50,R0 ; _damaged
    0000083A 6210                   MOV.B       @R1,R2
    0000083C 2020                   MOV.B       R2,@R0
         Dodge.c   582                flicker = false;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000083E 63B0                   MOV.B       @R11,R3
    00000840 D21C                   MOV.L       L766+54,R2 ; _flicker
    00000842 2230                   MOV.B       R3,@R2
         Dodge.c   583                flickerOffset = timer % 10;
    00000844 D31C                   MOV.L       L766+58,R3 ; _timer
    00000846 6132                   MOV.L       @R3,R1
    00000848 D31C                   MOV.L       L766+62,R3 ; __modls
    0000084A 430B                   JSR         @R3
    0000084C E00A                   MOV         #10,R0
    0000084E D21C                   MOV.L       L766+66,R2 ; _flickerOffset
         Dodge.c   584                SetTimer(ID_USER_TIMER4, 2000, NotDamaged); // animate flicker for 2 second
    00000850 D61C                   MOV.L       L766+70,R6 ; _NotDamaged
    00000852 2202                   MOV.L       R0,@R2
    00000854 9513                   MOV.W       L766,R5    ; H'07D0
    00000856 D31C                   MOV.L       L766+74,R3 ; _SetTimer
    00000858 430B                   JSR         @R3
    0000085A E404                   MOV         #4,R4
         Dodge.c   585                // destroy projectile
         Dodge.c   586                projectiles[arrayIndex].enabled = false;
    0000085C 52F3                   MOV.L       @(12,R15),R2
    0000085E 63B0                   MOV.B       @R11,R3
         Dodge.c   587                return;
    00000860 A088                   BRA         L674
    00000862 2230                   MOV.B       R3,@R2
    00000864              L673:                             
         Dodge.c   588            }
         Dodge.c   589            
         Dodge.c   590            // checking either to decrement or increment the
         Dodge.c   591            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   592            x1 < x2 ? x1++ : x1--;
    00000864 51F1                   MOV.L       @(4,R15),R1
    00000866 D219                   MOV.L       L766+78,R2 ; __lts
    00000868 420B                   JSR         @R2
    0000086A 50F2                   MOV.L       @(8,R15),R0
    0000086C 8800                   CMP/EQ      #0,R0
    0000086E 8933                   BT          L675
    00000870 D117                   MOV.L       L766+82,R1 ; H'3F800000
    00000872 D318                   MOV.L       L766+86,R3 ; __adds
    00000874 430B                   JSR         @R3
    00000876 50F1                   MOV.L       @(4,R15),R0
    00000878 1F01                   MOV.L       R0,@(4,R15)
    0000087A A033                   BRA         L676
    0000087C 0009                   NOP
    0000087E              L766:                             
    0000087E 07D0                   .DATA.W     H'07D0
    00000880 <00000000>             .DATA.L     __subs
    00000884 <00000000>             .DATA.L     __stoi
    00000888 <00000000>             .DATA.L     _abs
    0000088C <00000000>             .DATA.L     __itos
    00000890 <00000000>             .DATA.L     __gts
    00000894 40000000               .DATA.L     H'40000000
    00000898 <00000000>             .DATA.L     __muls
    0000089C <00000000>             .DATA.L     _projectiles
    000008A0 <00000000>             .DATA.L     __les
    000008A4 <00000000>             .DATA.L     _false
    000008A8 <00000000>             .DATA.L     _playerHealth
    000008AC <00000000>             .DATA.L     _true




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008B0 <00000000>             .DATA.L     _damaged
    000008B4 <00000000>             .DATA.L     _flicker
    000008B8 <00000000>             .DATA.L     _timer
    000008BC <00000000>             .DATA.L     __modls
    000008C0 <00000000>             .DATA.L     _flickerOffset
    000008C4 <00000000>             .DATA.L     _NotDamaged
    000008C8 <00000000>             .DATA.L     _SetTimer
    000008CC <00000000>             .DATA.L     __lts
    000008D0 3F800000               .DATA.L     H'3F800000
    000008D4 <00000000>             .DATA.L     __adds
    000008D8              L675:                             
    000008D8 51F1                   MOV.L       @(4,R15),R1
    000008DA D047                   MOV.L       L768,R0    ; H'3F800000
    000008DC D247                   MOV.L       L768+4,R2  ; __subs
    000008DE 420B                   JSR         @R2
    000008E0 0009                   NOP
    000008E2 1F01                   MOV.L       R0,@(4,R15)
    000008E4              L676:                             
    000008E4 D346                   MOV.L       L768+8,R3  ; __itos
    000008E6 430B                   JSR         @R3
    000008E8 60E3                   MOV         R14,R0
    000008EA 4E11                   CMP/PZ      R14
    000008EC 8D14                   BT/S        L677
    000008EE 6403                   MOV         R0,R4
         Dodge.c   593            if (pk < 0) {
         Dodge.c   594                // decision value will decide to plot
         Dodge.c   595                // either  x1 or y1 in x's position
         Dodge.c   596                if (decide == 0) {
    000008F0 2998                   TST         R9,R9
    000008F2 8B08                   BF          L678
         Dodge.c   597                    // putpixel(x1, y1, RED);
         Dodge.c   598                    pk = pk + 2 * dy;
    000008F4 D243                   MOV.L       L768+12,R2 ; __adds
    000008F6 6143                   MOV         R4,R1
    000008F8 420B                   JSR         @R2
    000008FA 60A3                   MOV         R10,R0
    000008FC D342                   MOV.L       L768+16,R3 ; __stoi
    000008FE 430B                   JSR         @R3
    00000900 0009                   NOP
    00000902 A007                   BRA         L753
    00000904 0009                   NOP
    00000906              L678:                             
         Dodge.c   599                }
         Dodge.c   600                else {
         Dodge.c   601                    //(y1,x1) is passed in xt
         Dodge.c   602                    // putpixel(y1, x1, YELLOW);
         Dodge.c   603                    pk = pk + 2 * dy;
    00000906 6143                   MOV         R4,R1
    00000908 D33E                   MOV.L       L768+12,R3 ; __adds
    0000090A 430B                   JSR         @R3
    0000090C 60A3                   MOV         R10,R0
    0000090E D23E                   MOV.L       L768+16,R2 ; __stoi
    00000910 420B                   JSR         @R2
    00000912 0009                   NOP
    00000914              L753:                             
    00000914 A01C                   BRA         L680
    00000916 6E03                   MOV         R0,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000918              L677:                             
         Dodge.c   604                }
         Dodge.c   605            }
         Dodge.c   606            else {
         Dodge.c   607                y1 < y2 ? y1++ : y1--;
    00000918 61F2                   MOV.L       @R15,R1
    0000091A D23C                   MOV.L       L768+20,R2 ; __lts
    0000091C 420B                   JSR         @R2
    0000091E 50FE                   MOV.L       @(56,R15),R0
    00000920 8800                   CMP/EQ      #0,R0
    00000922 8906                   BT          L681
    00000924 D134                   MOV.L       L768,R1    ; H'3F800000
    00000926 D337                   MOV.L       L768+12,R3 ; __adds
    00000928 430B                   JSR         @R3
    0000092A 60F2                   MOV.L       @R15,R0
    0000092C 2F02                   MOV.L       R0,@R15
    0000092E A006                   BRA         L682
    00000930 0009                   NOP
    00000932              L681:                             
    00000932 61F2                   MOV.L       @R15,R1
    00000934 D030                   MOV.L       L768,R0    ; H'3F800000
    00000936 D231                   MOV.L       L768+4,R2  ; __subs
    00000938 420B                   JSR         @R2
    0000093A 0009                   NOP
    0000093C 2F02                   MOV.L       R0,@R15
    0000093E              L682:                             
         Dodge.c   608                if (decide == 0) {
    0000093E 2998                   TST         R9,R9
         Dodge.c   609    
         Dodge.c   610                    // putpixel(x1, y1, RED);
         Dodge.c   611                }
         Dodge.c   612                else {
         Dodge.c   613                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   614                }
         Dodge.c   615                pk = pk + 2 * dy - 2 * dx;
    00000940 D330                   MOV.L       L768+12,R3 ; __adds
    00000942 6143                   MOV         R4,R1
    00000944 430B                   JSR         @R3
    00000946 50F4                   MOV.L       @(16,R15),R0
    00000948 D22F                   MOV.L       L768+16,R2 ; __stoi
    0000094A 420B                   JSR         @R2
    0000094C 0009                   NOP
    0000094E 6E03                   MOV         R0,R14
    00000950              L680:                             
    00000950 D32B                   MOV.L       L768+8,R3  ; __itos
    00000952 7801                   ADD         #1,R8
    00000954 430B                   JSR         @R3
    00000956 6083                   MOV         R8,R0
    00000958 D22D                   MOV.L       L768+24,R2 ; __ges
    0000095A 420B                   JSR         @R2
    0000095C 61D3                   MOV         R13,R1
    0000095E 8800                   CMP/EQ      #0,R0
    00000960 8901                   BT          L769
    00000962 AF5A                   BRA         L672
    00000964 0009                   NOP
    00000966              L769:                             
    00000966              L671:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   616            }
         Dodge.c   617        }
         Dodge.c   618    
         Dodge.c   619        projectiles[arrayIndex].x = x2;
    00000966 D32B                   MOV.L       L768+28,R3 ; _projectiles
    00000968 54F5                   MOV.L       @(20,R15),R4
    0000096A 343C                   ADD         R3,R4
    0000096C 52F2                   MOV.L       @(8,R15),R2
    0000096E 1421                   MOV.L       R2,@(4,R4)
         Dodge.c   620        projectiles[arrayIndex].y = y2;
    00000970 51FE                   MOV.L       @(56,R15),R1
    00000972 1412                   MOV.L       R1,@(8,R4)
         Dodge.c   621    }
    00000974              L674:                             
    00000974 7F18                   ADD         #24,R15
    00000976 4F26                   LDS.L       @R15+,PR
    00000978 68F6                   MOV.L       @R15+,R8
    0000097A 69F6                   MOV.L       @R15+,R9
    0000097C 6AF6                   MOV.L       @R15+,R10
    0000097E 6BF6                   MOV.L       @R15+,R11
    00000980 6CF6                   MOV.L       @R15+,R12
    00000982 6DF6                   MOV.L       @R15+,R13
    00000984 000B                   RTS
    00000986 6EF6                   MOV.L       @R15+,R14
         Dodge.c   622    
         Dodge.c   623    void Physics()
    00000988              _Physics:                        ; function: Physics
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __itos, __gts, __lts
    00000988 2FE6                   MOV.L       R14,@-R15
    0000098A 2FD6                   MOV.L       R13,@-R15
    0000098C 2FC6                   MOV.L       R12,@-R15
    0000098E 2FB6                   MOV.L       R11,@-R15
    00000990 2FA6                   MOV.L       R10,@-R15
    00000992 2F96                   MOV.L       R9,@-R15
    00000994 2F86                   MOV.L       R8,@-R15
    00000996 4F22                   STS.L       PR,@-R15
         Dodge.c   624    {
         Dodge.c   625        size_t i;
         Dodge.c   626        for (i = 0; i < 128; i++)
    00000998 A09E                   BRA         L685
    0000099A ED00                   MOV         #0,R13
    0000099C              L686:                             
    0000099C DC1D                   MOV.L       L768+28,R12; _projectiles
    0000099E 6ED3                   MOV         R13,R14
    000009A0 63D3                   MOV         R13,R3
    000009A2 4E08                   SHLL2       R14
    000009A4 4E00                   SHLL        R14
    000009A6 3E3C                   ADD         R3,R14
    000009A8 4E08                   SHLL2       R14
    000009AA 3ECC                   ADD         R12,R14
    000009AC 62E0                   MOV.B       @R14,R2
    000009AE 2228                   TST         R2,R2
    000009B0 8B01                   BF          L770
    000009B2 A090                   BRA         L690
    000009B4 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009B6              L770:                             
         Dodge.c   627        {
         Dodge.c   628            if(projectiles[i].enabled) {
         Dodge.c   629                // collision with edge of map
         Dodge.c   630                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    000009B6 54E1                   MOV.L       @(4,R14),R4
    000009B8 D314                   MOV.L       L768+20,R3 ; __lts
    000009BA 6143                   MOV         R4,R1
    000009BC 430B                   JSR         @R3
    000009BE E000                   MOV         #0,R0
    000009C0 8800                   CMP/EQ      #0,R0
    000009C2 8B15                   BF          L587
    000009C4 D014                   MOV.L       L768+32,R0 ; H'43000000
    000009C6 D215                   MOV.L       L768+36,R2 ; __gts
    000009C8 420B                   JSR         @R2
    000009CA 6143                   MOV         R4,R1
    000009CC 8800                   CMP/EQ      #0,R0
    000009CE 8B0F                   BF          L587
    000009D0 51E2                   MOV.L       @(8,R14),R1
    000009D2 D30E                   MOV.L       L768+20,R3 ; __lts
    000009D4 430B                   JSR         @R3
    000009D6 E000                   MOV         #0,R0
    000009D8 8800                   CMP/EQ      #0,R0
    000009DA 8B09                   BF          L587
    000009DC D010                   MOV.L       L768+40,R0 ; H'42800000
    000009DE D20F                   MOV.L       L768+36,R2 ; __gts
    000009E0 420B                   JSR         @R2
    000009E2 51E2                   MOV.L       @(8,R14),R1
    000009E4 8800                   CMP/EQ      #0,R0
    000009E6 8B03                   BF          L587
         Dodge.c   631                    // destroy projectile
         Dodge.c   632                    projectiles[i].enabled = false;
         Dodge.c   633                    continue;
         Dodge.c   634                }
         Dodge.c   635                // destroy particles that have been alive for more than an attack cycle
         Dodge.c   636                if(projectiles[i].framesAlive >= 99) { // each frame is 50ms and each cycle is 5000ms
    000009E8 52E7                   MOV.L       @(28,R14),R2
    000009EA E463                   MOV         #99,R4
    000009EC 3243                   CMP/GE      R4,R2
    000009EE 8B1B                   BF          L691
    000009F0              L587:
         Dodge.c   637                    // destroy projectile
         Dodge.c   638                    projectiles[i].enabled = false;
    000009F0 D40C                   MOV.L       L768+44,R4 ; _false
    000009F2 6240                   MOV.B       @R4,R2
         Dodge.c   639                    continue;
    000009F4 A06F                   BRA         L690
    000009F6 2E20                   MOV.B       R2,@R14
    000009F8              L768:                             
    000009F8 3F800000               .DATA.L     H'3F800000
    000009FC <00000000>             .DATA.L     __subs
    00000A00 <00000000>             .DATA.L     __itos
    00000A04 <00000000>             .DATA.L     __adds
    00000A08 <00000000>             .DATA.L     __stoi
    00000A0C <00000000>             .DATA.L     __lts
    00000A10 <00000000>             .DATA.L     __ges




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A14 <00000000>             .DATA.L     _projectiles
    00000A18 43000000               .DATA.L     H'43000000
    00000A1C <00000000>             .DATA.L     __gts
    00000A20 42800000               .DATA.L     H'42800000
    00000A24 <00000000>             .DATA.L     _false
    00000A28              L691:                             
         Dodge.c   640                }
         Dodge.c   641                // move + detect player collisions
         Dodge.c   642                MoveProjectile(i,
         Dodge.c   643                    projectiles[i].x,
         Dodge.c   644                    projectiles[i].y,
         Dodge.c   645                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   646                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   647                );
    00000A28 58E2                   MOV.L       @(8,R14),R8
    00000A2A 6183                   MOV         R8,R1
    00000A2C D23C                   MOV.L       L771+2,R2  ; __adds
    00000A2E 420B                   JSR         @R2
    00000A30 50E4                   MOV.L       @(16,R14),R0
    00000A32 2F06                   MOV.L       R0,@-R15
    00000A34 59E1                   MOV.L       @(4,R14),R9
    00000A36 6193                   MOV         R9,R1
    00000A38 D339                   MOV.L       L771+2,R3  ; __adds
    00000A3A 430B                   JSR         @R3
    00000A3C 50E3                   MOV.L       @(12,R14),R0
    00000A3E 6703                   MOV         R0,R7
    00000A40 6683                   MOV         R8,R6
    00000A42 6593                   MOV         R9,R5
    00000A44 BE92                   BSR         _MoveProjectile
    00000A46 64D3                   MOV         R13,R4
         Dodge.c   648                // update acceleration if this is a tracking projectile
         Dodge.c   649                if(projectiles[i].trackingForce > 0) { // maybe != 0 is better but I don't see why I'd have a 
                         +projectile go away from the player
    00000A48 D336                   MOV.L       L771+6,R3  ; __gts
    00000A4A 7F04                   ADD         #4,R15
    00000A4C 51E8                   MOV.L       @(32,R14),R1
    00000A4E 430B                   JSR         @R3
    00000A50 E000                   MOV         #0,R0
    00000A52 8800                   CMP/EQ      #0,R0
    00000A54 892B                   BT          L692
         Dodge.c   650                    float xDif = (float)playerX - projectiles[i].x;
    00000A56 D234                   MOV.L       L771+10,R2 ; __itos
    00000A58 420B                   JSR         @R2
    00000A5A 60A2                   MOV.L       @R10,R0
    00000A5C D233                   MOV.L       L771+14,R2 ; __subs
    00000A5E 64D3                   MOV         R13,R4
    00000A60 63D3                   MOV         R13,R3
    00000A62 4408                   SHLL2       R4
    00000A64 4400                   SHLL        R4
    00000A66 343C                   ADD         R3,R4
    00000A68 4408                   SHLL2       R4
    00000A6A 34CC                   ADD         R12,R4
    00000A6C 6103                   MOV         R0,R1
    00000A6E 420B                   JSR         @R2
    00000A70 5041                   MOV.L       @(4,R4),R0
    00000A72 6603                   MOV         R0,R6
         Dodge.c   651                    float yDif = (float)playerY - projectiles[i].y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A74 D32C                   MOV.L       L771+10,R3 ; __itos
    00000A76 430B                   JSR         @R3
    00000A78 60B2                   MOV.L       @R11,R0
    00000A7A 6103                   MOV         R0,R1
    00000A7C D22B                   MOV.L       L771+14,R2 ; __subs
    00000A7E 420B                   JSR         @R2
    00000A80 5042                   MOV.L       @(8,R4),R0
    00000A82 6503                   MOV         R0,R5
         Dodge.c   652                    xDif = xDif * 0.01f * projectiles[i].trackingForce;
    00000A84 5748                   MOV.L       @(32,R4),R7
    00000A86 6163                   MOV         R6,R1
    00000A88 D329                   MOV.L       L771+18,R3 ; __muls
    00000A8A 430B                   JSR         @R3
    00000A8C 6073                   MOV         R7,R0
    00000A8E D129                   MOV.L       L771+22,R1 ; H'3C23D70A
    00000A90 D227                   MOV.L       L771+18,R2 ; __muls
    00000A92 420B                   JSR         @R2
    00000A94 0009                   NOP
    00000A96 6603                   MOV         R0,R6
         Dodge.c   653                    yDif = yDif * 0.01f * projectiles[i].trackingForce;
    00000A98 D325                   MOV.L       L771+18,R3 ; __muls
    00000A9A 6153                   MOV         R5,R1
    00000A9C 430B                   JSR         @R3
    00000A9E 6073                   MOV         R7,R0
    00000AA0 D124                   MOV.L       L771+22,R1 ; H'3C23D70A
    00000AA2 D223                   MOV.L       L771+18,R2 ; __muls
    00000AA4 420B                   JSR         @R2
    00000AA6 0009                   NOP
         Dodge.c   654                    projectiles[i].xAcceleration = xDif;
    00000AA8 1465                   MOV.L       R6,@(20,R4)
    00000AAA 6503                   MOV         R0,R5
         Dodge.c   655                    projectiles[i].yAcceleration = yDif;
    00000AAC 1456                   MOV.L       R5,@(24,R4)
    00000AAE              L692:                             
         Dodge.c   656                }
         Dodge.c   657                // update velocity
         Dodge.c   658                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    00000AAE 64D3                   MOV         R13,R4
    00000AB0 D21B                   MOV.L       L771+2,R2  ; __adds
    00000AB2 63D3                   MOV         R13,R3
    00000AB4 4408                   SHLL2       R4
    00000AB6 4400                   SHLL        R4
    00000AB8 343C                   ADD         R3,R4
    00000ABA 4408                   SHLL2       R4
    00000ABC 34CC                   ADD         R12,R4
    00000ABE 5045                   MOV.L       @(20,R4),R0
    00000AC0 420B                   JSR         @R2
    00000AC2 5143                   MOV.L       @(12,R4),R1
    00000AC4 1403                   MOV.L       R0,@(12,R4)
         Dodge.c   659                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    00000AC6 5046                   MOV.L       @(24,R4),R0
    00000AC8 D315                   MOV.L       L771+2,R3  ; __adds
    00000ACA 430B                   JSR         @R3
    00000ACC 5144                   MOV.L       @(16,R4),R1
    00000ACE 1404                   MOV.L       R0,@(16,R4)
         Dodge.c   660    
         Dodge.c   661                projectiles[i].framesAlive++;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AD0 5247                   MOV.L       @(28,R4),R2
    00000AD2 7201                   ADD         #1,R2
    00000AD4 1427                   MOV.L       R2,@(28,R4)
    00000AD6              L690:                             
    00000AD6 7D01                   ADD         #1,R13
    00000AD8              L685:                             
    00000AD8 9421                   MOV.W       L771,R4    ; H'0080
    00000ADA DA17                   MOV.L       L771+26,R10; _playerX
    00000ADC DB17                   MOV.L       L771+30,R11; _playerY
    00000ADE 3D42                   CMP/HS      R4,R13
    00000AE0 8901                   BT          L772
    00000AE2 AF5B                   BRA         L686
    00000AE4 0009                   NOP
    00000AE6              L772:                             
         Dodge.c   662            }
         Dodge.c   663        }
         Dodge.c   664    
         Dodge.c   665        // stop player from leaving map
         Dodge.c   666            if(playerX < 1)
    00000AE6 E401                   MOV         #1,R4
    00000AE8 62A2                   MOV.L       @R10,R2
    00000AEA 3243                   CMP/GE      R4,R2
    00000AEC 8D01                   BT/S        L693
         Dodge.c   667                playerX = 1;
         Dodge.c   668            if(playerX > 127)
    00000AEE E57F                   MOV         #127,R5
    00000AF0 2A42                   MOV.L       R4,@R10
    00000AF2              L693:                             
    00000AF2 62A2                   MOV.L       @R10,R2
    00000AF4 3257                   CMP/GT      R5,R2
    00000AF6 8B00                   BF          L694
         Dodge.c   669                playerX = 127;
    00000AF8 2A52                   MOV.L       R5,@R10
    00000AFA              L694:                             
         Dodge.c   670            if(playerY < 1)
    00000AFA 62B2                   MOV.L       @R11,R2
    00000AFC 3243                   CMP/GE      R4,R2
    00000AFE 8900                   BT          L695
         Dodge.c   671                playerY = 1;
    00000B00 2B42                   MOV.L       R4,@R11
    00000B02              L695:                             
         Dodge.c   672            if(playerY > 63)
    00000B02 E43F                   MOV         #63,R4
    00000B04 62B2                   MOV.L       @R11,R2
    00000B06 3247                   CMP/GT      R4,R2
    00000B08 8B00                   BF          L696
         Dodge.c   673                playerY = 63;
    00000B0A 2B42                   MOV.L       R4,@R11
    00000B0C              L696:                             
         Dodge.c   674    }
    00000B0C 4F26                   LDS.L       @R15+,PR
    00000B0E 68F6                   MOV.L       @R15+,R8
    00000B10 69F6                   MOV.L       @R15+,R9
    00000B12 6AF6                   MOV.L       @R15+,R10
    00000B14 6BF6                   MOV.L       @R15+,R11
    00000B16 6CF6                   MOV.L       @R15+,R12
    00000B18 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B1A 000B                   RTS
    00000B1C 6EF6                   MOV.L       @R15+,R14
    00000B1E              L771:                             
    00000B1E 0080                   .DATA.W     H'0080
    00000B20 <00000000>             .DATA.L     __adds
    00000B24 <00000000>             .DATA.L     __gts
    00000B28 <00000000>             .DATA.L     __itos
    00000B2C <00000000>             .DATA.L     __subs
    00000B30 <00000000>             .DATA.L     __muls
    00000B34 3C23D70A               .DATA.L     H'3C23D70A
    00000B38 <00000000>             .DATA.L     _playerX
    00000B3C <00000000>             .DATA.L     _playerY
         Dodge.c   675    
         Dodge.c   676    void Controls()
    00000B40              _Controls:                       ; function: Controls
                                                           ; frame size=8
    00000B40 2FE6                   MOV.L       R14,@-R15
    00000B42 4F22                   STS.L       PR,@-R15
         Dodge.c   677    {
         Dodge.c   678        if(!quit) {
    00000B44 D27F                   MOV.L       L773+2,R2  ; _quit
    00000B46 6320                   MOV.B       @R2,R3
    00000B48 2338                   TST         R3,R3
    00000B4A 8B23                   BF          L697
         Dodge.c   679            if(IsKeyDown(KEY_CTRL_LEFT)) {
    00000B4C DE7E                   MOV.L       L773+6,R14 ; _playerX
    00000B4E BAF5                   BSR         _KeyDown
    00000B50 E426                   MOV         #38,R4
    00000B52 600C                   EXTU.B      R0,R0
    00000B54 2008                   TST         R0,R0
    00000B56 8D03                   BT/S        L698
         Dodge.c   680                playerX--;
         Dodge.c   681            }
         Dodge.c   682            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    00000B58 E41B                   MOV         #27,R4
    00000B5A 63E2                   MOV.L       @R14,R3
    00000B5C 73FF                   ADD         #-1,R3
    00000B5E 2E32                   MOV.L       R3,@R14
    00000B60              L698:                             
    00000B60 BAEC                   BSR         _KeyDown
    00000B62 0009                   NOP
    00000B64 600C                   EXTU.B      R0,R0
    00000B66 2008                   TST         R0,R0
    00000B68 8902                   BT          L699
         Dodge.c   683                playerX++;
    00000B6A 62E2                   MOV.L       @R14,R2
    00000B6C 7201                   ADD         #1,R2
    00000B6E 2E22                   MOV.L       R2,@R14
    00000B70              L699:                             
         Dodge.c   684            }
         Dodge.c   685            if(IsKeyDown(KEY_CTRL_UP)) {
    00000B70 DE76                   MOV.L       L773+10,R14; _playerY
    00000B72 BAE3                   BSR         _KeyDown
    00000B74 E41C                   MOV         #28,R4
    00000B76 600C                   EXTU.B      R0,R0
    00000B78 2008                   TST         R0,R0
    00000B7A 8D03                   BT/S        L700




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   686                playerY--;
         Dodge.c   687            }
         Dodge.c   688            if(IsKeyDown(KEY_CTRL_DOWN)) {
    00000B7C E425                   MOV         #37,R4
    00000B7E 63E2                   MOV.L       @R14,R3
    00000B80 73FF                   ADD         #-1,R3
    00000B82 2E32                   MOV.L       R3,@R14
    00000B84              L700:                             
    00000B84 BADA                   BSR         _KeyDown
    00000B86 0009                   NOP
    00000B88 600C                   EXTU.B      R0,R0
    00000B8A 2008                   TST         R0,R0
    00000B8C 8902                   BT          L697
         Dodge.c   689                playerY++;
    00000B8E 62E2                   MOV.L       @R14,R2
    00000B90 7201                   ADD         #1,R2
    00000B92 2E22                   MOV.L       R2,@R14
    00000B94              L697:                             
         Dodge.c   690            }
         Dodge.c   691        }
         Dodge.c   692        
         Dodge.c   693    }
    00000B94 4F26                   LDS.L       @R15+,PR
    00000B96 000B                   RTS
    00000B98 6EF6                   MOV.L       @R15+,R14
         Dodge.c   694    
         Dodge.c   695    int randomInt(int max) {
    00000B9A              _randomInt:                      ; function: randomInt
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __muld, __divdr, __dtoi, __itod
    00000B9A 4F22                   STS.L       PR,@-R15
         Dodge.c   696        double normalized = (double)rand() / (double)RAND_MAX;
    00000B9C D36C                   MOV.L       L773+14,R3 ; _rand
    00000B9E 7FF4                   ADD         #-12,R15
    00000BA0 430B                   JSR         @R3
    00000BA2 2F42                   MOV.L       R4,@R15
    00000BA4 D26B                   MOV.L       L773+18,R2 ; __itod
    00000BA6 7FF8                   ADD         #-8,R15
    00000BA8 420B                   JSR         @R2
    00000BAA 2FF6                   MOV.L       R15,@-R15
    00000BAC D26B                   MOV.L       L773+26,R2 ; __divdr
    00000BAE E300                   MOV         #0,R3
    00000BB0 2F36                   MOV.L       R3,@-R15
    00000BB2 D369                   MOV.L       L773+22,R3 ; H'40DFFFC0
    00000BB4 2F36                   MOV.L       R3,@-R15
    00000BB6 61F3                   MOV         R15,R1
    00000BB8 7114                   ADD         #20,R1
    00000BBA 420B                   JSR         @R2
    00000BBC 2F16                   MOV.L       R1,@-R15
         Dodge.c   697        return (int)(normalized * (double)max);
    00000BBE 7FF8                   ADD         #-8,R15
    00000BC0 D364                   MOV.L       L773+18,R3 ; __itod
    00000BC2 50F2                   MOV.L       @(8,R15),R0
    00000BC4 7FF8                   ADD         #-8,R15
    00000BC6 430B                   JSR         @R3
    00000BC8 2FF6                   MOV.L       R15,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BCA 52F6                   MOV.L       @(24,R15),R2
    00000BCC D164                   MOV.L       L773+30,R1 ; __muld
    00000BCE 2F26                   MOV.L       R2,@-R15
    00000BD0 52F6                   MOV.L       @(24,R15),R2
    00000BD2 2F26                   MOV.L       R2,@-R15
    00000BD4 63F3                   MOV         R15,R3
    00000BD6 7310                   ADD         #16,R3
    00000BD8 410B                   JSR         @R1
    00000BDA 2F36                   MOV.L       R3,@-R15
    00000BDC D261                   MOV.L       L773+34,R2 ; __dtoi
    00000BDE 420B                   JSR         @R2
    00000BE0 0009                   NOP
         Dodge.c   698    }
    00000BE2 7F0C                   ADD         #12,R15
    00000BE4 4F26                   LDS.L       @R15+,PR
    00000BE6 000B                   RTS
    00000BE8 0009                   NOP
         Dodge.c   699    
         Dodge.c   700    #pragma region attacks
         Dodge.c   701    
         Dodge.c   702    // next projectile in this attack
         Dodge.c   703    void SpawnNext() {
    00000BEA              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __modls, __subs, __muls, __negs, __itos
    00000BEA E405                   MOV         #5,R4
    00000BEC 2FE6                   MOV.L       R14,@-R15
    00000BEE 2FD6                   MOV.L       R13,@-R15
    00000BF0 2FC6                   MOV.L       R12,@-R15
    00000BF2 6D43                   MOV         R4,R13
    00000BF4 2FB6                   MOV.L       R11,@-R15
    00000BF6 7D7B                   ADD         #123,R13
    00000BF8 DC5C                   MOV.L       L773+42,R12; _currentAttack
    00000BFA 2FA6                   MOV.L       R10,@-R15
    00000BFC 2F96                   MOV.L       R9,@-R15
    00000BFE 2F86                   MOV.L       R8,@-R15
    00000C00 4F22                   STS.L       PR,@-R15
    00000C02 E800                   MOV         #0,R8
    00000C04 D958                   MOV.L       L773+38,R9 ; _projectileIndex
    00000C06 7FFC                   ADD         #-4,R15
    00000C08 60C2                   MOV.L       @R12,R0
    00000C0A 8800                   CMP/EQ      #0,R0
    00000C0C 8D12                   BT/S        L591
    00000C0E 6E92                   MOV.L       @R9,R14
    00000C10 8801                   CMP/EQ      #1,R0
    00000C12 8925                   BT          L592
    00000C14 8802                   CMP/EQ      #2,R0
    00000C16 8957                   BT          L593
    00000C18 8803                   CMP/EQ      #3,R0
    00000C1A 8B01                   BF          L774
    00000C1C A08F                   BRA         L594
    00000C1E 0009                   NOP
    00000C20              L774:                             
    00000C20 8804                   CMP/EQ      #4,R0
    00000C22 8B01                   BF          L775
    00000C24 A0E7                   BRA         L595




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C26 0009                   NOP
    00000C28              L775:                             
    00000C28 8805                   CMP/EQ      #5,R0
    00000C2A 8B01                   BF          L776
    00000C2C A101                   BRA         L596
    00000C2E 0009                   NOP
    00000C30              L776:                             
    00000C30 A137                   BRA         L597
    00000C32 0009                   NOP
    00000C34              L591:                            ; case label 
         Dodge.c   704        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   705        #pragma region a whole bunch of variable declarations
         Dodge.c   706        int mod;
         Dodge.c   707        int mod2;
         Dodge.c   708        int xPos;
         Dodge.c   709        int yPos;
         Dodge.c   710        int direction;
         Dodge.c   711        float directionX;
         Dodge.c   712        float directionY;
         Dodge.c   713        int i;
         Dodge.c   714        int j;
         Dodge.c   715        int xToCenter;
         Dodge.c   716        int yToCenter;
         Dodge.c   717        #pragma endregion
         Dodge.c   718        switch (currentAttack)
         Dodge.c   719        {
         Dodge.c   720            case 0: // horizontally from either side, accelerating
         Dodge.c   721                mod = projectileIndex % 2;
    00000C34 60E3                   MOV         R14,R0
    00000C36 4011                   CMP/PZ      R0
    00000C38 8B01                   BF          L704
    00000C3A A005                   BRA         L705
    00000C3C C901                   AND         #1,R0
    00000C3E              L704:                             
    00000C3E 6007                   NOT         R0,R0
    00000C40 7001                   ADD         #1,R0
    00000C42 C901                   AND         #1,R0
    00000C44 6007                   NOT         R0,R0
    00000C46 7001                   ADD         #1,R0
    00000C48              L705:                             
    00000C48 6403                   MOV         R0,R4
         Dodge.c   722                xPos = mod == 0 ? 1 : 128 - 1;
    00000C4A 2448                   TST         R4,R4
    00000C4C 8B01                   BF          L706
    00000C4E A001                   BRA         L707
    00000C50 EB01                   MOV         #1,R11
    00000C52              L706:                             
    00000C52 EB7F                   MOV         #127,R11
    00000C54              L707:                             
         Dodge.c   723                direction = mod == 0 ? 1 : -1;
    00000C54 2448                   TST         R4,R4
    00000C56 8B01                   BF          L777
    00000C58 A135                   BRA         L754
    00000C5A 0009                   NOP
    00000C5C              L777:                             
    00000C5C A136                   BRA         L588
    00000C5E EDFF                   MOV         #-1,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C60              L592:                            ; case label 
         Dodge.c   724                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, direction * 0.1f, 0, 0);
         Dodge.c   725                break;
         Dodge.c   726            case 1: // circle, constant speed
         Dodge.c   727                directionX = (((projectileIndex + 8) % 16) - 8);
    00000C60 60E3                   MOV         R14,R0
    00000C62 7008                   ADD         #8,R0
    00000C64 4011                   CMP/PZ      R0
    00000C66 8B01                   BF          L710
    00000C68 A005                   BRA         L711
    00000C6A C90F                   AND         #15,R0
    00000C6C              L710:                             
    00000C6C 6007                   NOT         R0,R0
    00000C6E 7001                   ADD         #1,R0
    00000C70 C90F                   AND         #15,R0
    00000C72 6007                   NOT         R0,R0
    00000C74 7001                   ADD         #1,R0
    00000C76              L711:                             
    00000C76 D23E                   MOV.L       L773+46,R2 ; __itos
    00000C78 420B                   JSR         @R2
    00000C7A 70F8                   ADD         #-8,R0
    00000C7C 6D03                   MOV         R0,R13
         Dodge.c   728                directionY = ((projectileIndex % 16) - 8);
    00000C7E 60E3                   MOV         R14,R0
    00000C80 4011                   CMP/PZ      R0
    00000C82 8B01                   BF          L712
    00000C84 A005                   BRA         L713
    00000C86 C90F                   AND         #15,R0
    00000C88              L712:                             
    00000C88 6007                   NOT         R0,R0
    00000C8A 7001                   ADD         #1,R0
    00000C8C C90F                   AND         #15,R0
    00000C8E 6007                   NOT         R0,R0
    00000C90 7001                   ADD         #1,R0
    00000C92              L713:                             
    00000C92 D237                   MOV.L       L773+46,R2 ; __itos
    00000C94 420B                   JSR         @R2
    00000C96 70F8                   ADD         #-8,R0
         Dodge.c   729                SpawnProjectile(64, 32, directionX, directionY, 0, 0, 0);
    00000C98 D536                   MOV.L       L773+50,R5 ; H'42000000
    00000C9A 6E03                   MOV         R0,R14
    00000C9C D436                   MOV.L       L773+54,R4 ; H'42800000
    00000C9E E300                   MOV         #0,R3
    00000CA0 2F36                   MOV.L       R3,@-R15
    00000CA2 67E3                   MOV         R14,R7
    00000CA4 2F36                   MOV.L       R3,@-R15
    00000CA6 2F36                   MOV.L       R3,@-R15
    00000CA8 BCF0                   BSR         _SpawnProjectile
    00000CAA 66D3                   MOV         R13,R6
         Dodge.c   730                SpawnProjectile(64, 32, -directionX, directionY, 0, 0, 0);
    00000CAC D233                   MOV.L       L773+58,R2 ; __negs
    00000CAE E300                   MOV         #0,R3
    00000CB0 2F36                   MOV.L       R3,@-R15
    00000CB2 67E3                   MOV         R14,R7
    00000CB4 2F36                   MOV.L       R3,@-R15
    00000CB6 2F36                   MOV.L       R3,@-R15
    00000CB8 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CBA 60D3                   MOV         R13,R0
    00000CBC D52D                   MOV.L       L773+50,R5 ; H'42000000
    00000CBE D42E                   MOV.L       L773+54,R4 ; H'42800000
    00000CC0 BCE4                   BSR         _SpawnProjectile
    00000CC2 6603                   MOV         R0,R6
         Dodge.c   731                break;
    00000CC4 A11B                   BRA         L703
    00000CC6 7F18                   ADD         #24,R15
    00000CC8              L593:                            ; case label 
         Dodge.c   732            case 2: // vertically from either side, constant speed
         Dodge.c   733                if(projectileIndex % 5 == 0) {
    00000CC8 D22D                   MOV.L       L773+62,R2 ; __modls
    00000CCA 61E3                   MOV         R14,R1
    00000CCC 420B                   JSR         @R2
    00000CCE 6043                   MOV         R4,R0
    00000CD0 2008                   TST         R0,R0
    00000CD2 8901                   BT          L778
    00000CD4 A113                   BRA         L703
    00000CD6 0009                   NOP
    00000CD8              L778:                             
         Dodge.c   734                    if(projectileIndex % 10 == 0) {
    00000CD8 D229                   MOV.L       L773+62,R2 ; __modls
    00000CDA ED10                   MOV         #16,R13
    00000CDC 61E3                   MOV         R14,R1
    00000CDE 420B                   JSR         @R2
    00000CE0 E00A                   MOV         #10,R0
    00000CE2 2008                   TST         R0,R0
    00000CE4 8B15                   BF          L715
         Dodge.c   735                        for (i = 0; i < 16; i++)
    00000CE6 6B83                   MOV         R8,R11
    00000CE8 A00F                   BRA         L716
    00000CEA 6E83                   MOV         R8,R14
    00000CEC              L717:                             
         Dodge.c   736                        {
         Dodge.c   737                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0, 0);
    00000CEC D725                   MOV.L       L773+66,R7 ; H'40000000
    00000CEE E300                   MOV         #0,R3
    00000CF0 D21F                   MOV.L       L773+46,R2 ; __itos
    00000CF2 6633                   MOV         R3,R6
    00000CF4 2F36                   MOV.L       R3,@-R15
    00000CF6 6533                   MOV         R3,R5
    00000CF8 2F36                   MOV.L       R3,@-R15
    00000CFA 2F36                   MOV.L       R3,@-R15
    00000CFC 420B                   JSR         @R2
    00000CFE 60E3                   MOV         R14,R0
    00000D00 BCC4                   BSR         _SpawnProjectile
    00000D02 6403                   MOV         R0,R4
    00000D04 7F0C                   ADD         #12,R15
    00000D06 7B01                   ADD         #1,R11
    00000D08 7E08                   ADD         #8,R14
    00000D0A              L716:                             
    00000D0A 3BD3                   CMP/GE      R13,R11
    00000D0C 8BEE                   BF          L717
    00000D0E A0F6                   BRA         L703
    00000D10 0009                   NOP
    00000D12              L715:                             
         Dodge.c   738                        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   739                    }
         Dodge.c   740                    else {
         Dodge.c   741                        for (i = 0; i < 16; i++)
    00000D12 6B83                   MOV         R8,R11
    00000D14 A00F                   BRA         L719
    00000D16 EE04                   MOV         #4,R14
    00000D18              L720:                             
         Dodge.c   742                        {
         Dodge.c   743                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0, 0);
    00000D18 D71B                   MOV.L       L773+70,R7 ; H'C0000000
    00000D1A E200                   MOV         #0,R2
    00000D1C D516                   MOV.L       L773+54,R5 ; H'42800000
    00000D1E 6623                   MOV         R2,R6
    00000D20 D313                   MOV.L       L773+46,R3 ; __itos
    00000D22 2F26                   MOV.L       R2,@-R15
    00000D24 2F26                   MOV.L       R2,@-R15
    00000D26 2F26                   MOV.L       R2,@-R15
    00000D28 430B                   JSR         @R3
    00000D2A 60E3                   MOV         R14,R0
    00000D2C BCAE                   BSR         _SpawnProjectile
    00000D2E 6403                   MOV         R0,R4
    00000D30 7F0C                   ADD         #12,R15
    00000D32 7B01                   ADD         #1,R11
    00000D34 7E08                   ADD         #8,R14
    00000D36              L719:                             
    00000D36 3BD3                   CMP/GE      R13,R11
    00000D38 8BEE                   BF          L720
         Dodge.c   744                        }
         Dodge.c   745                    }
         Dodge.c   746                    
         Dodge.c   747                }
         Dodge.c   748                break;
    00000D3A A0E0                   BRA         L703
    00000D3C 0009                   NOP
    00000D3E              L594:                            ; case label 
         Dodge.c   749            case 3: // random directions, accelerate back to center
         Dodge.c   750                for (i = 0; i < 32; i++)
    00000D3E A056                   BRA         L721
    00000D40 EA20                   MOV         #32,R10
    00000D42              L773:                             
    00000D42 0000                   .DATA.W     0
    00000D44 <00000000>             .DATA.L     _quit
    00000D48 <00000000>             .DATA.L     _playerX
    00000D4C <00000000>             .DATA.L     _playerY
    00000D50 <00000000>             .DATA.L     _rand
    00000D54 <00000000>             .DATA.L     __itod
    00000D58 40DFFFC0               .DATA.L     H'40DFFFC0
    00000D5C <00000000>             .DATA.L     __divdr
    00000D60 <00000000>             .DATA.L     __muld
    00000D64 <00000000>             .DATA.L     __dtoi
    00000D68 <00000000>             .DATA.L     _projectileIndex
    00000D6C <00000000>             .DATA.L     _currentAttack
    00000D70 <00000000>             .DATA.L     __itos
    00000D74 42000000               .DATA.L     H'42000000
    00000D78 42800000               .DATA.L     H'42800000
    00000D7C <00000000>             .DATA.L     __negs
    00000D80 <00000000>             .DATA.L     __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D84 40000000               .DATA.L     H'40000000
    00000D88 C0000000               .DATA.L     H'C0000000
    00000D8C              L722:                             
         Dodge.c   751                {
         Dodge.c   752                    xPos = randomInt(128);
    00000D8C BF05                   BSR         _randomInt
    00000D8E 64D3                   MOV         R13,R4
    00000D90 6E03                   MOV         R0,R14
         Dodge.c   753                    yPos = randomInt(64);
    00000D92 BF02                   BSR         _randomInt
    00000D94 E440                   MOV         #64,R4
    00000D96 6403                   MOV         R0,R4
         Dodge.c   754                    directionX = (xPos - 64) * 0.01f  * 8;
    00000D98 D380                   MOV.L       L779+2,R3  ; __itos
    00000D9A 60E3                   MOV         R14,R0
    00000D9C 430B                   JSR         @R3
    00000D9E 70C0                   ADD         #-64,R0
    00000DA0 D17F                   MOV.L       L779+6,R1  ; H'3DA3D70A
    00000DA2 D280                   MOV.L       L779+10,R2 ; __muls
    00000DA4 420B                   JSR         @R2
    00000DA6 0009                   NOP
         Dodge.c   755                    directionY = (yPos - 32) * 0.02f * 8;
    00000DA8 D37C                   MOV.L       L779+2,R3  ; __itos
    00000DAA 6B03                   MOV         R0,R11
    00000DAC 6043                   MOV         R4,R0
    00000DAE 430B                   JSR         @R3
    00000DB0 70E0                   ADD         #-32,R0
    00000DB2 D17D                   MOV.L       L779+14,R1 ; H'3E23D70A
    00000DB4 D27B                   MOV.L       L779+10,R2 ; __muls
    00000DB6 420B                   JSR         @R2
    00000DB8 0009                   NOP
    00000DBA 6E03                   MOV         R0,R14
         Dodge.c   756                    SpawnProjectile(64, 32, directionX, directionY, -directionX * 0.04f, -directionY * 0.04f, 
                         +0);
    00000DBC D279                   MOV.L       L779+10,R2 ; __muls
    00000DBE E300                   MOV         #0,R3
    00000DC0 D07A                   MOV.L       L779+18,R0 ; H'3D23D70A
    00000DC2 2F36                   MOV.L       R3,@-R15
    00000DC4 420B                   JSR         @R2
    00000DC6 61E3                   MOV         R14,R1
    00000DC8 D279                   MOV.L       L779+22,R2 ; __negs
    00000DCA 420B                   JSR         @R2
    00000DCC 0009                   NOP
    00000DCE 2F06                   MOV.L       R0,@-R15
    00000DD0 D076                   MOV.L       L779+18,R0 ; H'3D23D70A
    00000DD2 D274                   MOV.L       L779+10,R2 ; __muls
    00000DD4 420B                   JSR         @R2
    00000DD6 61B3                   MOV         R11,R1
    00000DD8 D275                   MOV.L       L779+22,R2 ; __negs
    00000DDA 420B                   JSR         @R2
    00000DDC 0009                   NOP
    00000DDE 67E3                   MOV         R14,R7
    00000DE0 D574                   MOV.L       L779+26,R5 ; H'42000000
    00000DE2 2F06                   MOV.L       R0,@-R15
    00000DE4 D474                   MOV.L       L779+30,R4 ; H'42800000
    00000DE6 BC51                   BSR         _SpawnProjectile
    00000DE8 66B3                   MOV         R11,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DEA 7F0C                   ADD         #12,R15
    00000DEC 7AFF                   ADD         #-1,R10
    00000DEE              L721:                             
    00000DEE 2AA8                   TST         R10,R10
    00000DF0 8BCC                   BF          L722
         Dodge.c   757                }
         Dodge.c   758                
         Dodge.c   759                break;
    00000DF2 A084                   BRA         L703
    00000DF4 0009                   NOP
    00000DF6              L595:                            ; case label 
         Dodge.c   760            case 4: // spawn a bunch of tracking projectiles around the screen
         Dodge.c   761                for (i = 0; i < 8; i++)
    00000DF6 A018                   BRA         L723
    00000DF8 EE08                   MOV         #8,R14
    00000DFA              L724:                             
         Dodge.c   762                {
         Dodge.c   763                    xPos = randomInt(128);
    00000DFA BECE                   BSR         _randomInt
    00000DFC 64D3                   MOV         R13,R4
    00000DFE 6B03                   MOV         R0,R11
         Dodge.c   764                    yPos = randomInt(64);
    00000E00 BECB                   BSR         _randomInt
    00000E02 E440                   MOV         #64,R4
         Dodge.c   765                    SpawnProjectile(xPos, yPos, 0, 0, 0, 0, 0.5);
    00000E04 D26D                   MOV.L       L779+34,R2 ; H'3F000000
    00000E06 E300                   MOV         #0,R3
    00000E08 D164                   MOV.L       L779+2,R1  ; __itos
    00000E0A 6A03                   MOV         R0,R10
    00000E0C 2F26                   MOV.L       R2,@-R15
    00000E0E 6733                   MOV         R3,R7
    00000E10 2F36                   MOV.L       R3,@-R15
    00000E12 6633                   MOV         R3,R6
    00000E14 2F36                   MOV.L       R3,@-R15
    00000E16 410B                   JSR         @R1
    00000E18 60A3                   MOV         R10,R0
    00000E1A 6503                   MOV         R0,R5
    00000E1C D15F                   MOV.L       L779+2,R1  ; __itos
    00000E1E 410B                   JSR         @R1
    00000E20 60B3                   MOV         R11,R0
    00000E22 BC33                   BSR         _SpawnProjectile
    00000E24 6403                   MOV         R0,R4
    00000E26 7F0C                   ADD         #12,R15
    00000E28 7EFF                   ADD         #-1,R14
    00000E2A              L723:                             
    00000E2A 2EE8                   TST         R14,R14
    00000E2C 8BE5                   BF          L724
         Dodge.c   766                }
         Dodge.c   767                
         Dodge.c   768                break;
    00000E2E A066                   BRA         L703
    00000E30 0009                   NOP
    00000E32              L596:                            ; case label 
         Dodge.c   769            case 5: // continuously spawn projectiles with an initial direction towards the player
         Dodge.c   770                if(projectileIndex % 5 == 0)
    00000E32 61E3                   MOV         R14,R1
    00000E34 D362                   MOV.L       L779+38,R3 ; __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E36 430B                   JSR         @R3
    00000E38 6043                   MOV         R4,R0
    00000E3A 2008                   TST         R0,R0
    00000E3C 8B5F                   BF          L703
         Dodge.c   771                {
         Dodge.c   772                    xPos = randomInt(128);
    00000E3E BEAC                   BSR         _randomInt
    00000E40 64D3                   MOV         R13,R4
    00000E42 2F02                   MOV.L       R0,@R15
         Dodge.c   773                    yPos = randomInt(64);
    00000E44 BEA9                   BSR         _randomInt
    00000E46 E440                   MOV         #64,R4
         Dodge.c   774                    directionX = ((float)playerX - xPos) * 0.01f;
    00000E48 D35E                   MOV.L       L779+42,R3 ; _playerX
    00000E4A 6603                   MOV         R0,R6
    00000E4C D253                   MOV.L       L779+2,R2  ; __itos
    00000E4E 420B                   JSR         @R2
    00000E50 6032                   MOV.L       @R3,R0
    00000E52 6203                   MOV         R0,R2
    00000E54 D151                   MOV.L       L779+2,R1  ; __itos
    00000E56 60F2                   MOV.L       @R15,R0
    00000E58 410B                   JSR         @R1
    00000E5A 0009                   NOP
    00000E5C 6123                   MOV         R2,R1
    00000E5E D25A                   MOV.L       L779+46,R2 ; __subs
    00000E60 420B                   JSR         @R2
    00000E62 6403                   MOV         R0,R4
    00000E64 D159                   MOV.L       L779+50,R1 ; H'3C23D70A
    00000E66 D24F                   MOV.L       L779+10,R2 ; __muls
    00000E68 420B                   JSR         @R2
    00000E6A 0009                   NOP
         Dodge.c   775                    directionY = ((float)playerY - yPos) * 0.02f;
    00000E6C D258                   MOV.L       L779+54,R2 ; _playerY
    00000E6E 6703                   MOV         R0,R7
    00000E70 D14A                   MOV.L       L779+2,R1  ; __itos
    00000E72 410B                   JSR         @R1
    00000E74 6022                   MOV.L       @R2,R0
    00000E76 6303                   MOV         R0,R3
    00000E78 D148                   MOV.L       L779+2,R1  ; __itos
    00000E7A 410B                   JSR         @R1
    00000E7C 6063                   MOV         R6,R0
    00000E7E 6133                   MOV         R3,R1
    00000E80 D351                   MOV.L       L779+46,R3 ; __subs
    00000E82 430B                   JSR         @R3
    00000E84 6503                   MOV         R0,R5
    00000E86 D153                   MOV.L       L779+58,R1 ; H'3CA3D70A
    00000E88 D346                   MOV.L       L779+10,R3 ; __muls
    00000E8A 430B                   JSR         @R3
    00000E8C 0009                   NOP
    00000E8E 6603                   MOV         R0,R6
         Dodge.c   776                    SpawnProjectile(xPos, yPos, 0, 0, directionX, directionY, 0);
    00000E90 E100                   MOV         #0,R1
    00000E92 2F16                   MOV.L       R1,@-R15
    00000E94 2F66                   MOV.L       R6,@-R15
    00000E96 2F76                   MOV.L       R7,@-R15
    00000E98 6713                   MOV         R1,R7
    00000E9A BBF7                   BSR         _SpawnProjectile




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E9C 6613                   MOV         R1,R6
         Dodge.c   777                }
         Dodge.c   778                
         Dodge.c   779                break;
    00000E9E A02E                   BRA         L703
    00000EA0 7F0C                   ADD         #12,R15
    00000EA2              L597:                            ; default label 
         Dodge.c   780            default:
         Dodge.c   781                mod2 = projectileIndex % 2;
    00000EA2 60E3                   MOV         R14,R0
    00000EA4 4011                   CMP/PZ      R0
    00000EA6 8B01                   BF          L726
    00000EA8 A005                   BRA         L727
    00000EAA C901                   AND         #1,R0
    00000EAC              L726:                             
    00000EAC 6007                   NOT         R0,R0
    00000EAE 7001                   ADD         #1,R0
    00000EB0 C901                   AND         #1,R0
    00000EB2 6007                   NOT         R0,R0
    00000EB4 7001                   ADD         #1,R0
    00000EB6              L727:                             
    00000EB6 6403                   MOV         R0,R4
         Dodge.c   782                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000EB8 2448                   TST         R4,R4
    00000EBA 8B01                   BF          L728
    00000EBC A001                   BRA         L729
    00000EBE EB01                   MOV         #1,R11
    00000EC0              L728:                             
    00000EC0 EB7F                   MOV         #127,R11
    00000EC2              L729:                             
         Dodge.c   783                direction = mod2 == 0 ? 1 : -1;
    00000EC2 2448                   TST         R4,R4
    00000EC4 8B01                   BF          L730
    00000EC6              L754:                             
    00000EC6 A001                   BRA         L588
    00000EC8 ED01                   MOV         #1,R13
    00000ECA              L730:                             
    00000ECA EDFF                   MOV         #-1,R13
    00000ECC              L588:
         Dodge.c   784                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0, 0);
    00000ECC D333                   MOV.L       L779+2,R3  ; __itos
    00000ECE E200                   MOV         #0,R2
    00000ED0 2F26                   MOV.L       R2,@-R15
    00000ED2 2F26                   MOV.L       R2,@-R15
    00000ED4 430B                   JSR         @R3
    00000ED6 60D3                   MOV         R13,R0
    00000ED8 D13F                   MOV.L       L779+62,R1 ; H'3DCCCCCD
    00000EDA D332                   MOV.L       L779+10,R3 ; __muls
    00000EDC 430B                   JSR         @R3
    00000EDE 0009                   NOP
    00000EE0 2F06                   MOV.L       R0,@-R15
    00000EE2 6723                   MOV         R2,R7
    00000EE4 D32D                   MOV.L       L779+2,R3  ; __itos
    00000EE6 6623                   MOV         R2,R6
    00000EE8 60E3                   MOV         R14,R0
    00000EEA 7001                   ADD         #1,R0
    00000EEC 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EEE 4008                   SHLL2       R0
    00000EF0 D12A                   MOV.L       L779+2,R1  ; __itos
    00000EF2 6503                   MOV         R0,R5
    00000EF4 410B                   JSR         @R1
    00000EF6 60B3                   MOV         R11,R0
    00000EF8 BBC8                   BSR         _SpawnProjectile
    00000EFA 6403                   MOV         R0,R4
    00000EFC 7F0C                   ADD         #12,R15
         Dodge.c   785                break;
    00000EFE              L703:                             
         Dodge.c   786        }
         Dodge.c   787    
         Dodge.c   788        projectileIndex++;
    00000EFE 6392                   MOV.L       @R9,R3
         Dodge.c   789        if(projectileIndex > maxProjectiles) {
    00000F00 D036                   MOV.L       L779+66,R0 ; _maxProjectiles
    00000F02 7301                   ADD         #1,R3
    00000F04 2932                   MOV.L       R3,@R9
    00000F06 6133                   MOV         R3,R1
    00000F08 6202                   MOV.L       @R0,R2
    00000F0A 3127                   CMP/GT      R2,R1
    00000F0C 8B0B                   BF          L732
         Dodge.c   790            KillTimer(ID_USER_TIMER3); // stop this attack
    00000F0E D134                   MOV.L       L779+70,R1 ; _KillTimer
    00000F10 410B                   JSR         @R1
    00000F12 E403                   MOV         #3,R4
         Dodge.c   791            currentAttack++;
    00000F14 63C2                   MOV.L       @R12,R3
    00000F16 7301                   ADD         #1,R3
    00000F18 2C32                   MOV.L       R3,@R12
         Dodge.c   792            if(currentAttack >= attacksTotal)
    00000F1A 6133                   MOV         R3,R1
    00000F1C D031                   MOV.L       L779+74,R0 ; _attacksTotal
    00000F1E 6202                   MOV.L       @R0,R2
    00000F20 3123                   CMP/GE      R2,R1
    00000F22 8B00                   BF          L732
         Dodge.c   793                currentAttack = 0;
    00000F24 2C82                   MOV.L       R8,@R12
    00000F26              L732:                             
         Dodge.c   794        }
         Dodge.c   795    }
    00000F26 7F04                   ADD         #4,R15
    00000F28 4F26                   LDS.L       @R15+,PR
    00000F2A 68F6                   MOV.L       @R15+,R8
    00000F2C 69F6                   MOV.L       @R15+,R9
    00000F2E 6AF6                   MOV.L       @R15+,R10
    00000F30 6BF6                   MOV.L       @R15+,R11
    00000F32 6CF6                   MOV.L       @R15+,R12
    00000F34 6DF6                   MOV.L       @R15+,R13
    00000F36 000B                   RTS
    00000F38 6EF6                   MOV.L       @R15+,R14
         Dodge.c   796    // the next "attack"
         Dodge.c   797    void NextProjectiles() {
    00000F3A              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   798        projectileIndex = 0;
    00000F3A E300                   MOV         #0,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F3C D22A                   MOV.L       L779+78,R2 ; _projectileIndex
         Dodge.c   799    
         Dodge.c   800        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues
         Dodge.c   801        switch (currentAttack)
    00000F3E E610                   MOV         #16,R6
    00000F40 D426                   MOV.L       L779+66,R4 ; _maxProjectiles
    00000F42 2232                   MOV.L       R3,@R2
    00000F44 D329                   MOV.L       L779+82,R3 ; _currentAttack
    00000F46 6032                   MOV.L       @R3,R0
    00000F48 8800                   CMP/EQ      #0,R0
    00000F4A 8D16                   BT/S        L757
    00000F4C E501                   MOV         #1,R5
    00000F4E 8801                   CMP/EQ      #1,R0
    00000F50 8909                   BT          L599
    00000F52 8802                   CMP/EQ      #2,R0
    00000F54 890A                   BT          L600
    00000F56 8803                   CMP/EQ      #3,R0
    00000F58 890A                   BT          L755
    00000F5A 8804                   CMP/EQ      #4,R0
    00000F5C 8908                   BT          L602
    00000F5E 8805                   CMP/EQ      #5,R0
    00000F60 8908                   BT          L603
    00000F62 A00A                   BRA         L757
    00000F64 0009                   NOP
    00000F66              L599:                            ; case label 
         Dodge.c   802        {
         Dodge.c   803            case 0:
         Dodge.c   804                maxProjectiles = 16;
         Dodge.c   805                break;
         Dodge.c   806            case 1:
         Dodge.c   807                maxProjectiles = 32;
    00000F66 E020                   MOV         #32,R0
         Dodge.c   808                break;
    00000F68 A008                   BRA         L734
    00000F6A 2402                   MOV.L       R0,@R4
    00000F6C              L600:                            ; case label 
         Dodge.c   809            case 2:
         Dodge.c   810                maxProjectiles = 15;
         Dodge.c   811                break;
    00000F6C A003                   BRA         L756
    00000F6E E10F                   MOV         #15,R1
    00000F70              L602:                            ; case label 
         Dodge.c   812            case 3:
         Dodge.c   813                maxProjectiles = 1;
         Dodge.c   814                break;
         Dodge.c   815            case 4:
         Dodge.c   816                maxProjectiles = 1;
         Dodge.c   817                break;
    00000F70              L755:                             
    00000F70 A004                   BRA         L734
    00000F72 2452                   MOV.L       R5,@R4
    00000F74              L603:                            ; case label 
         Dodge.c   818            case 5:
         Dodge.c   819                maxProjectiles = 35;
    00000F74 E123                   MOV         #35,R1
         Dodge.c   820                break;
    00000F76              L756:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F76 A001                   BRA         L734
    00000F78 2412                   MOV.L       R1,@R4
    00000F7A              L757:                             
         Dodge.c   821            default:
         Dodge.c   822                maxProjectiles = 16;
    00000F7A 2462                   MOV.L       R6,@R4
    00000F7C              L734:                             
         Dodge.c   823                break;
         Dodge.c   824        }
         Dodge.c   825    
         Dodge.c   826        SetTimer(ID_USER_TIMER3, 100, SpawnNext);
    00000F7C D61C                   MOV.L       L779+86,R6 ; _SpawnNext
    00000F7E E564                   MOV         #100,R5
    00000F80 D31C                   MOV.L       L779+90,R3 ; _SetTimer
    00000F82 432B                   JMP         @R3
    00000F84 E403                   MOV         #3,R4
         Dodge.c   827    }
         Dodge.c   828    
         Dodge.c   829    #pragma endregion
         Dodge.c   830    
         Dodge.c   831    #pragma endregion
         Dodge.c   832    
         Dodge.c   833    void GameFrame() {
    00000F86              _GameFrame:                      ; function: GameFrame
                                                           ; frame size=4
    00000F86 4F22                   STS.L       PR,@-R15
         Dodge.c   834        // increment frame count
         Dodge.c   835        timer++;
    00000F88 D41B                   MOV.L       L779+94,R4 ; _timer
    00000F8A 6342                   MOV.L       @R4,R3
    00000F8C 7301                   ADD         #1,R3
         Dodge.c   836        RenderScreen();
    00000F8E BBC7                   BSR         _RenderScreen
    00000F90 2432                   MOV.L       R3,@R4
         Dodge.c   837        Controls();
    00000F92 BDD5                   BSR         _Controls
    00000F94 0009                   NOP
         Dodge.c   838        Physics();
    00000F96 ACF7                   BRA         _Physics
    00000F98 4F26                   LDS.L       @R15+,PR
    00000F9A              L779:                             
    00000F9A 0000                   .DATA.W     0
    00000F9C <00000000>             .DATA.L     __itos
    00000FA0 3DA3D70A               .DATA.L     H'3DA3D70A
    00000FA4 <00000000>             .DATA.L     __muls
    00000FA8 3E23D70A               .DATA.L     H'3E23D70A
    00000FAC 3D23D70A               .DATA.L     H'3D23D70A
    00000FB0 <00000000>             .DATA.L     __negs
    00000FB4 42000000               .DATA.L     H'42000000
    00000FB8 42800000               .DATA.L     H'42800000
    00000FBC 3F000000               .DATA.L     H'3F000000
    00000FC0 <00000000>             .DATA.L     __modls
    00000FC4 <00000000>             .DATA.L     _playerX
    00000FC8 <00000000>             .DATA.L     __subs
    00000FCC 3C23D70A               .DATA.L     H'3C23D70A
    00000FD0 <00000000>             .DATA.L     _playerY
    00000FD4 3CA3D70A               .DATA.L     H'3CA3D70A




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FD8 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000FDC <00000000>             .DATA.L     _maxProjectiles
    00000FE0 <00000000>             .DATA.L     _KillTimer
    00000FE4 <00000000>             .DATA.L     _attacksTotal
    00000FE8 <00000000>             .DATA.L     _projectileIndex
    00000FEC <00000000>             .DATA.L     _currentAttack
    00000FF0 <00000000>             .DATA.L     _SpawnNext
    00000FF4 <00000000>             .DATA.L     _SetTimer
    00000FF8 <00000000>             .DATA.L     _timer
         Dodge.c   839    }
         Dodge.c   840    
         Dodge.c   841    /** Add-in entry point
         Dodge.c   842     * 
         Dodge.c   843     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   844     *             strip_no - Strip number from eActivity
         Dodge.c   845     * 
         Dodge.c   846     * Returns:    NOT error
         Dodge.c   847     */
         Dodge.c   848    // Start function
         Dodge.c   849    int AddIn_main(int app_mode, unsigned short strip_no)
    00000FFC              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=20
    00000FFC 2FE6                   MOV.L       R14,@-R15
    00000FFE 2FD6                   MOV.L       R13,@-R15
    00001000 4F22                   STS.L       PR,@-R15
    00001002 7FF8                   ADD         #-8,R15
    00001004 DD31                   MOV.L       L780+2,R13 ; _true
         Dodge.c   850    {
         Dodge.c   851        unsigned int i, j; // Iteration variables
         Dodge.c   852        unsigned char str[3];
         Dodge.c   853        unsigned int key;  // Keyboard input
         Dodge.c   854    
         Dodge.c   855        // Clear out the display
         Dodge.c   856        Bdisp_AllClr_DDVRAM();
    00001006 D332                   MOV.L       L780+6,R3  ; _Bdisp_AllClr_DDVRAM
    00001008 430B                   JSR         @R3
    0000100A 0009                   NOP
         Dodge.c   857        RenderMainMenu();
    0000100C B98F                   BSR         _RenderMainMenu
    0000100E 0009                   NOP
    00001010 DE30                   MOV.L       L780+10,R14; _timer
         Dodge.c   858        
         Dodge.c   859        while(true) { // menu
    00001012 A016                   BRA         L735
    00001014 0009                   NOP
    00001016              L736:                             
         Dodge.c   860            timer++; // we will use number of cycles until the player starts as our random seed, as it is high
                         +ly unlikely to be the same
    00001016 62E2                   MOV.L       @R14,R2
    00001018 7201                   ADD         #1,R2
    0000101A 2E22                   MOV.L       R2,@R14
         Dodge.c   861            if(IsKeyDown(KEY_CTRL_EXE)) {
    0000101C B88E                   BSR         _KeyDown
    0000101E E41F                   MOV         #31,R4
    00001020 600C                   EXTU.B      R0,R0
    00001022 2008                   TST         R0,R0
    00001024 8B10                   BF          L738




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   862                break;
         Dodge.c   863            }
         Dodge.c   864            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00001026 B889                   BSR         _KeyDown
    00001028 E430                   MOV         #48,R4
    0000102A 600C                   EXTU.B      R0,R0
    0000102C 2008                   TST         R0,R0
    0000102E 8B04                   BF          L740
    00001030 B884                   BSR         _KeyDown
    00001032 E42F                   MOV         #47,R4
    00001034 600C                   EXTU.B      R0,R0
    00001036 2008                   TST         R0,R0
    00001038 8903                   BT          L735
    0000103A              L740:                             
         Dodge.c   865            {
         Dodge.c   866                AppQuit();
    0000103A B917                   BSR         _AppQuit
    0000103C 0009                   NOP
         Dodge.c   867                break;
    0000103E A003                   BRA         L738
    00001040 0009                   NOP
    00001042              L735:                             
    00001042 62D0                   MOV.B       @R13,R2
    00001044 2228                   TST         R2,R2
    00001046 8BE6                   BF          L736
    00001048              L738:                             
         Dodge.c   868            }
         Dodge.c   869        }
         Dodge.c   870        srand(timer);
    00001048 D323                   MOV.L       L780+14,R3 ; _srand
    0000104A 430B                   JSR         @R3
    0000104C 64E2                   MOV.L       @R14,R4
         Dodge.c   871        timer = 0;
    0000104E E200                   MOV         #0,R2
         Dodge.c   872    
         Dodge.c   873        Bdisp_AllClr_DDVRAM();
    00001050 D31F                   MOV.L       L780+6,R3  ; _Bdisp_AllClr_DDVRAM
    00001052 430B                   JSR         @R3
    00001054 2E22                   MOV.L       R2,@R14
         Dodge.c   874    
         Dodge.c   875        // Set up timers for game loop and attacks
         Dodge.c   876        SetTimer(ID_USER_TIMER1, 50, GameFrame);
    00001056 E532                   MOV         #50,R5
    00001058 D221                   MOV.L       L780+22,R2 ; _SetTimer
    0000105A D620                   MOV.L       L780+18,R6 ; _GameFrame
    0000105C 420B                   JSR         @R2
    0000105E E401                   MOV         #1,R4
         Dodge.c   877        SetTimer(ID_USER_TIMER2, 5000, NextProjectiles); // should be 5000, shortened for testing
    00001060 D620                   MOV.L       L780+26,R6 ; _NextProjectiles
    00001062 9532                   MOV.W       L780,R5    ; H'1388
    00001064 D31E                   MOV.L       L780+22,R3 ; _SetTimer
    00001066 430B                   JSR         @R3
    00001068 E402                   MOV         #2,R4
         Dodge.c   878    
         Dodge.c   879        // Set quit handler
         Dodge.c   880        SetQuitHandler(AppQuit);
    0000106A D41F                   MOV.L       L780+30,R4 ; _AppQuit




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000106C D21F                   MOV.L       L780+34,R2 ; _SetQuitHandler
    0000106E 420B                   JSR         @R2
    00001070 0009                   NOP
         Dodge.c   881    
         Dodge.c   882        // The main thread manages the keys
         Dodge.c   883        while (IsKeyUp(KEY_CTRL_MENU))
    00001072 A01D                   BRA         L741
    00001074 0009                   NOP
    00001076              L742:                             
         Dodge.c   884        {
         Dodge.c   885            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00001076 67F3                   MOV         R15,R7
    00001078 DE1D                   MOV.L       L780+38,R14; _GetKeyWait
    0000107A E600                   MOV         #0,R6
    0000107C 6563                   MOV         R6,R5
    0000107E 4E0B                   JSR         @R14
    00001080 6463                   MOV         R6,R4
         Dodge.c   886        
         Dodge.c   887            if (keyResp == KEYREP_KEYEVENT)
    00001082 8801                   CMP/EQ      #1,R0
    00001084 8F06                   BF/S        L743
    00001086 6403                   MOV         R0,R4
         Dodge.c   888            {
         Dodge.c   889                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    00001088 60F2                   MOV.L       @R15,R0
    0000108A 8830                   CMP/EQ      #48,R0
    0000108C 890C                   BT          L589
    0000108E 60F2                   MOV.L       @R15,R0
    00001090 882F                   CMP/EQ      #47,R0
    00001092 8909                   BT          L589
    00001094              L743:                             
         Dodge.c   890                {
         Dodge.c   891                    AppQuit();
         Dodge.c   892                    break;
         Dodge.c   893                }
         Dodge.c   894            }
         Dodge.c   895    
         Dodge.c   896            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00001094 B852                   BSR         _KeyDown
    00001096 E430                   MOV         #48,R4
    00001098 600C                   EXTU.B      R0,R0
    0000109A 2008                   TST         R0,R0
    0000109C 8B04                   BF          L589
    0000109E B84D                   BSR         _KeyDown
    000010A0 E42F                   MOV         #47,R4
    000010A2 600C                   EXTU.B      R0,R0
    000010A4 2008                   TST         R0,R0
    000010A6 8903                   BT          L741
    000010A8              L589:
         Dodge.c   897            {
         Dodge.c   898                AppQuit();
    000010A8 B8E0                   BSR         _AppQuit
    000010AA 0009                   NOP
         Dodge.c   899                break;
    000010AC A005                   BRA         L746
    000010AE 0009                   NOP
    000010B0              L741:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010B0 B844                   BSR         _KeyDown
    000010B2 E430                   MOV         #48,R4
    000010B4 600C                   EXTU.B      R0,R0
    000010B6 2008                   TST         R0,R0
    000010B8 89DD                   BT          L742
    000010BA              L746:                             
         Dodge.c   900            }
         Dodge.c   901        }
         Dodge.c   902    
         Dodge.c   903        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   904        AppQuit();
    000010BA B8D7                   BSR         _AppQuit
    000010BC 0009                   NOP
         Dodge.c   905    
         Dodge.c   906        // At the end, return application status
         Dodge.c   907        return true;
    000010BE 60D0                   MOV.B       @R13,R0
         Dodge.c   908    }
    000010C0 7F08                   ADD         #8,R15
    000010C2 4F26                   LDS.L       @R15+,PR
    000010C4 6DF6                   MOV.L       @R15+,R13
    000010C6 000B                   RTS
    000010C8 6EF6                   MOV.L       @R15+,R14
    000010CA              L780:                             
    000010CA 1388                   .DATA.W     H'1388
    000010CC <00000000>             .DATA.L     _true
    000010D0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000010D4 <00000000>             .DATA.L     _timer
    000010D8 <00000000>             .DATA.L     _srand
    000010DC <00000000>             .DATA.L     _GameFrame
    000010E0 <00000000>             .DATA.L     _SetTimer
    000010E4 <00000000>             .DATA.L     _NextProjectiles
    000010E8 <00000000>             .DATA.L     _AppQuit
    000010EC <00000000>             .DATA.L     _SetQuitHandler
    000010F0 <00000000>             .DATA.L     _GetKeyWait
         Dodge.c   909    
         Dodge.c   910    #pragma region Do not touch
         Dodge.c   911    
         Dodge.c   912    // Source code from here down should not be changed according to the
         Dodge.c   913    // CASIO SDK sample project.
         Dodge.c   914    
         Dodge.c   915    #pragma section _BR_Size
         Dodge.c   916    unsigned long BR_Size;
         Dodge.c   917    #pragma section
         Dodge.c   918    
         Dodge.c   919    #pragma section _TOP
         Dodge.c   920    
         Dodge.c   921    //****************************************************************************
         Dodge.c   922    //  InitializeSystem
         Dodge.c   923    //
         Dodge.c   924    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   925    //              OptionNum : Option Number (only eActivity)
         Dodge.c   926    //
         Dodge.c   927    //  retval  :   1 = No error / 0 = Error
         Dodge.c   928    //
         Dodge.c   929    //****************************************************************************
         Dodge.c   930    int InitializeSystem(int isAppli, unsigned short OptionNum)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   931    {
         Dodge.c   932        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L781+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L781:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   933    }
         Dodge.c   934    
         Dodge.c   935    #pragma section
         Dodge.c   936    
         Dodge.c   937    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _true:                           ; static: true
    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000006               .DATA.L     H'00000006
    0000001C              L445:
    0000001C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000000F0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000001C4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000298 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    0000036C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000440 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101010101   
             0101010101   
             0101         
    00000514 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000101   
             0101010101   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100010000   
             0001000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000005E8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010001 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000100   
             0000010000   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000006BC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0001000100   
             0000000001   
             0000010000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000100   
             0100         
    00000790 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000101 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,
             0001000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0001000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000864 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0000010100   
             0000000000   
             0100000000   
             0000000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000938 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0000000000   
             0100010101   
             0101010101   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0100         
    00000A0C 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'00,H'00,H'00
             0001000000   
             0000000000   
             0000000000   
             0000000101   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000         
    00000AE0 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000100   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000         
    00000BB4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0101010101   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000010000   
             0000000000   
             0000000000   
             0000         
    00000C88 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0100000001 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0001010100   
             0000000100   
             0100010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010101   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000         
    00000D5C 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010101 +                       H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000101 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0101010101 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,
             0100000000 +                       H'00,H'00,H'00,H'01
             0100000001   
             0000000100   
             0000000100   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000010000   
             0000000100   
             0000000000   
             0100000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000001   
             0000000001   
             0000000100   
             0000010000   
             0000010000   
             0001000000   
             0000010000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0001000000   
             0001         
    00000E30 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000001   
             0101010101   
             0000000000   
             0000000000   
             0000000101   
             0101010100   
             0000000000   
             0000000001   
             0000000001   
             0101010100   
             0000000001   
             0101000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0001000000   
             0000000100   
             0000000000   
             0000000100   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000F04 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000010000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000FD8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0100000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0100000001   
             0001000100   
             0000000001   
             0100000000   
             0100000000   
             0000010101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0101010000   
             0000000000   
             0000000001   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000         
    000010AC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0100010000   
             0000000000   
             0000000100   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000010000   
             0000000000   
             0000000000   
             0100010001   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0100000000   
             0000         
    00001180 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000100 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0001000000   
             0100000100   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000010000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0001010101   
             0101010000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    00001254 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0101000000   
             0000010100   
             0000000000   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010101   
             0100000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001328 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000010101   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    000013FC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000101 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0101010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0100         
    000014D0 0100000000             .DATA.B     H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0000000000   
             0000000000   
             0000000000   
             0101000100   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000015A4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0101010101   
             0101010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001678 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00
             0000000001   
             0000000000   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000100   
             0000000000   
             0000000100   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000010000   
             0000010000   
             0000000000   
             0000         
    0000174C 0100000100             .DATA.B     H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001820 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000018F4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000         
    000019C8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001A9C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001B70 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001C44 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000         
    00001D18 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001DEC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001EC0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001F94 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             00           
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040
    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _paused:                         ; static: paused
    00000010 01                     .DATA.B     H'01
    00000011              _quit:                           ; static: quit
    00000011 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000012 00000002               .RES.W      1
    00000014              _timer:                          ; static: timer
    00000014 00000000               .DATA.L     H'00000000
    00000018              _flicker:                        ; static: flicker
    00000018 01                     .DATA.B     H'01
    00000019              _damaged:                        ; static: damaged
    00000019 00                     .DATA.B     H'00
    0000001A 00000002               .RES.W      1
    0000001C              _flickerOffset:                  ; static: flickerOffset
    0000001C 00000000               .DATA.L     H'00000000
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00001200               .RES.L      1152
    00001200              _projectileIndex:                ; static: projectileIndex
    00001200 00000004               .RES.L      1
    00001204              _maxProjectiles:                 ; static: maxProjectiles
    00001204 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1











































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:38:26  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        58




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      937



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000010F4 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000201C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000020 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00001208 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00004348 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           31
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          50
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           229






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmk57AF.tmp 

