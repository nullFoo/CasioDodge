SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    // the skeleton of this code was stolen from https://github.com/itisrazza/casio-pong
         Dodge.c     2    
         Dodge.c     3    
         Dodge.c     4    // Import some libraries
         Dodge.c     5    #include "stdio.h"    // Standard IO
         Dodge.c     6    #include <stdlib.h>
         Dodge.c     7    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     8    #include "dispbios.h" // Display BIOS
         Dodge.c     9    #include "timer.h"    // Timer
         Dodge.c    10    
         Dodge.c    11    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    12    
         Dodge.c    13    #define __KEYBIOS_H__
         Dodge.c    14    #define KEY_CHAR_0 71
         Dodge.c    15    #define KEY_CHAR_1 72
         Dodge.c    16    #define KEY_CHAR_2 62
         Dodge.c    17    #define KEY_CHAR_3 52
         Dodge.c    18    #define KEY_CHAR_4 73
         Dodge.c    19    #define KEY_CHAR_5 63
         Dodge.c    20    #define KEY_CHAR_6 53
         Dodge.c    21    #define KEY_CHAR_7 74
         Dodge.c    22    #define KEY_CHAR_8 64
         Dodge.c    23    #define KEY_CHAR_9 54
         Dodge.c    24    #define KEY_CHAR_DP 61
         Dodge.c    25    #define KEY_CHAR_EXP 51
         Dodge.c    26    #define KEY_CHAR_PMINUS 41
         Dodge.c    27    #define KEY_CHAR_PLUS 42
         Dodge.c    28    #define KEY_CHAR_MINUS 32
         Dodge.c    29    #define KEY_CHAR_MULT 43
         Dodge.c    30    #define KEY_CHAR_DIV 33
         Dodge.c    31    #define KEY_CHAR_FRAC 75
         Dodge.c    32    #define KEY_CHAR_LPAR 55
         Dodge.c    33    #define KEY_CHAR_RPAR 45
         Dodge.c    34    #define KEY_CHAR_COMMA 35
         Dodge.c    35    #define KEY_CHAR_STORE 25
         Dodge.c    36    #define KEY_CHAR_LOG 66
         Dodge.c    37    #define KEY_CHAR_LN 56
         Dodge.c    38    #define KEY_CHAR_SIN 46
         Dodge.c    39    #define KEY_CHAR_COS 36
         Dodge.c    40    #define KEY_CHAR_TAN 26
         Dodge.c    41    #define KEY_CHAR_SQUARE 67
         Dodge.c    42    #define KEY_CHAR_POW 57
         Dodge.c    43    #define KEY_CTRL_EXE 31
         Dodge.c    44    #define KEY_CTRL_DEL 44
         Dodge.c    45    #define KEY_CTRL_AC 32
         Dodge.c    46    #define KEY_CTRL_FD 65
         Dodge.c    47    #define KEY_CTRL_EXIT 47
         Dodge.c    48    #define KEY_CTRL_SHIFT 78
         Dodge.c    49    #define KEY_CTRL_ALPHA 77
         Dodge.c    50    #define KEY_CTRL_OPTN 68
         Dodge.c    51    #define KEY_CTRL_VARS 58
         Dodge.c    52    #define KEY_CTRL_UP 28
         Dodge.c    53    #define KEY_CTRL_DOWN 37
         Dodge.c    54    #define KEY_CTRL_LEFT 38




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_RIGHT 27
         Dodge.c    56    #define KEY_CTRL_F1 79
         Dodge.c    57    #define KEY_CTRL_F2 69
         Dodge.c    58    #define KEY_CTRL_F3 59
         Dodge.c    59    #define KEY_CTRL_F4 49
         Dodge.c    60    #define KEY_CTRL_F5 39
         Dodge.c    61    #define KEY_CTRL_F6 29
         Dodge.c    62    #define KEY_CTRL_MENU 48
         Dodge.c    63    #ifndef OS2Change
         Dodge.c    64    #define OS2Change
         Dodge.c    65    #ifndef OS2Change_GetOS2
         Dodge.c    66    #define OS2Change_GetOS2
         Dodge.c    67    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    68    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    69    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    70    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    71    {
         Dodge.c    72    unsigned char mainversion;
         Dodge.c    73    unsigned char minorversion;
         Dodge.c    74    unsigned short release;
         Dodge.c    75    unsigned short build;
         Dodge.c    76    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L743+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    77    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L743+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L743+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    78    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 201B                   OR          R1,R0
         Dodge.c    79    #define isOS2 (OSVersionAsInt() >= 0x02020000)
         Dodge.c    80    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    81    #endif
         Dodge.c    82    #ifndef OS2Change_Keyboard
         Dodge.c    83    #define OS2Change_Keyboard
         Dodge.c    84    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    85    {
         Dodge.c    86    char i;
         Dodge.c    87    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L599:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L599
         Dodge.c    88    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    89    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    90    {
         Dodge.c    91    unsigned char result=0;
         Dodge.c    92    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    93    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    94    char*PORTB=(void*)0xA4000122;
         Dodge.c    95    char*PORTM=(void*)0xA4000138;
         Dodge.c    96    char*PORTA=(void*)0xA4000120;
         Dodge.c    97    short smask;
         Dodge.c    98    char cmask;
         Dodge.c    99    unsigned char column, row;
         Dodge.c   100    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c   101    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   102    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L600
    00000072 A005                   BRA         L601




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000074 C907                   AND         #7,R0
    00000076              L600:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L601:                             
         Dodge.c   103    cmask = ~( 1 << ( row %8) );
         Dodge.c   104    if(row <8)
    00000080 994B                   MOV.W       L743,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L743+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L743+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L743+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L602
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   105    {
         Dodge.c   106      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   107      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   108      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   109      *PORTB = cmask;
    000000AE D221                   MOV.L       L743+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   110      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L737
    000000B8 CB0F                   OR          #15,R0
    000000BA              L602:                             
         Dodge.c   111    }
         Dodge.c   112    else
         Dodge.c   113    {
         Dodge.c   114      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   115      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
         Dodge.c   116      delay();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
         Dodge.c   117      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L743+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   118      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L737:                             
         Dodge.c   119    }
         Dodge.c   120    
         Dodge.c   121    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   122    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L743+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   123    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   124    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   125    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   126    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   127    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L743+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   128    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   129    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   130    
         Dodge.c   131    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   132    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L743:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   133    
         Dodge.c   134    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   135    {
         Dodge.c   136    unsigned short key[8];
         Dodge.c   137    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L744,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L744+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L605
         Dodge.c   138    if(isOS2)
         Dodge.c   139    {
         Dodge.c   140      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L744+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   141      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L744+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   142     
         Dodge.c   143      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000174 D24B                   MOV.L       L744+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L607
    000001A4 CA01                   XOR         #1,R0
    000001A6              L605:                             
         Dodge.c   144    }
         Dodge.c   145    else
         Dodge.c   146    {
         Dodge.c   147      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L744+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L744+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   148    }
         Dodge.c   149    }
    000001C2              L607:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   150    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
         Dodge.c   151    {
         Dodge.c   152    unsigned char x, ret;
         Dodge.c   153    
         Dodge.c   154    ret = GetKey(key);
    000001D4 D334                   MOV.L       L744+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   155    
         Dodge.c   156    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L610:                             
         Dodge.c   157    {
         Dodge.c   158      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L611
         Dodge.c   159      {
         Dodge.c   160       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   161       break;
    000001EE A004                   BRA         L609
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L611:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L610
    000001FA              L609:                             
         Dodge.c   162      }
         Dodge.c   163    }
         Dodge.c   164    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   165    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   166    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   167    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   168    #define GetKey(x) GetKeyMod(x)
         Dodge.c   169    #endif
         Dodge.c   170    #endif
         Dodge.c   171    
         Dodge.c   172    #pragma endregion
         Dodge.c   173    
         Dodge.c   174    #pragma region Constants
         Dodge.c   175    
         Dodge.c   176    // true/false since it's 2018




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   178    const char false = 0;
         Dodge.c   179    
         Dodge.c   180    // Display properties
         Dodge.c   181    const char DISPLAY_WIDTH    = 128;
         Dodge.c   182    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   183    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   184    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   185    
         Dodge.c   186    #pragma endregion
         Dodge.c   187    
         Dodge.c   188    struct Projectile {
         Dodge.c   189        char enabled;
         Dodge.c   190        float x;
         Dodge.c   191        float y;
         Dodge.c   192        float xVelocity;
         Dodge.c   193        float yVelocity;
         Dodge.c   194        float xAcceleration;
         Dodge.c   195        float yAcceleration;
         Dodge.c   196        int framesAlive;
         Dodge.c   197    };
         Dodge.c   198    struct Projectile projectiles[128];
         Dodge.c   199    
         Dodge.c   200    #pragma region Variables
         Dodge.c   201    
         Dodge.c   202    int playerHealth = 128;
         Dodge.c   203    int playerX = 64;
         Dodge.c   204    int playerY = 32;
         Dodge.c   205    
         Dodge.c   206    int projectileIndex;
         Dodge.c   207    int maxProjectiles;
         Dodge.c   208    int currentAttack = 0;
         Dodge.c   209    const int attacksTotal = 4;
         Dodge.c   210    
         Dodge.c   211    char paused = 1;
         Dodge.c   212    
         Dodge.c   213    char quit = 0;
         Dodge.c   214    
         Dodge.c   215    int timer = 0;
         Dodge.c   216    
         Dodge.c   217    char flicker = 1;
         Dodge.c   218    char damaged = 0;
         Dodge.c   219    int flickerOffset = 0;
         Dodge.c   220    
         Dodge.c   221    #pragma endregion
         Dodge.c   222    
         Dodge.c   223    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   224        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L614
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L614:                             
         Dodge.c   225        if (x < 0) return -1;
    00000210 4411                   CMP/PZ      R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000212 8901                   BT          L616
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L616:                             
         Dodge.c   226        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   227    }
    0000021A              L615:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   228    float Signf(float x) {
    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   229        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L744+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L617
    0000022C D020                   MOV.L       L744+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L617:                             
         Dodge.c   230        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L744+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L619
    00000240 D01D                   MOV.L       L744+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L619:                             
         Dodge.c   231        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   232    }
    0000024A              L618:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   233    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   234        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L620
         Dodge.c   235            return a;
    00000254 000B                   RTS
    00000256 6043                   MOV         R4,R0
    00000258              L620:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   236        else
         Dodge.c   237            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   238    }
    0000025A              L621:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP
         Dodge.c   239    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   240        if(a < b)
    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L623
         Dodge.c   241            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L623:                             
         Dodge.c   242        else
         Dodge.c   243            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   244    }
    00000268              L624:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   245    
         Dodge.c   246    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   247    {
         Dodge.c   248        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L744+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   249        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   250        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   251        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   252        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   253    
         Dodge.c   254        quit = true;
    00000286 D20E                   MOV.L       L744+44,R2 ; _true
    00000288 D10E                   MOV.L       L744+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   255    
         Dodge.c   256        return;
         Dodge.c   257    }
    0000028E 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L744:                             
    00000294 A44B0000               .DATA.L     H'A44B0000
    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy
    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000
    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   258    
         Dodge.c   259    #pragma region Drawing functions
         Dodge.c   260    
         Dodge.c   261    // draw an image (from array) that covers the whole screen
         Dodge.c   262    // if drawWhite is false, white (0) pixels will be treated as transparent (i.e. not override whatever's be
                         +hind them)
         Dodge.c   263    void DrawImage(char sprite[128][64], char drawWhite) {
    000002C8              _DrawImage:                      ; function: DrawImage
                                                           ; frame size=40
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
         Dodge.c   264        size_t x;
         Dodge.c   265        size_t y;
         Dodge.c   266        for (x = 0; x < 128; x++)
    000002D2 EB00                   MOV         #0,R11
    000002D4 2F96                   MOV.L       R9,@-R15
    000002D6 EA40                   MOV         #64,R10
    000002D8 2F86                   MOV.L       R8,@-R15
    000002DA 6DB3                   MOV         R11,R13
    000002DC D91F                   MOV.L       L745+6,R9  ; _Bdisp_SetPoint_VRAM
    000002DE 4F22                   STS.L       PR,@-R15
    000002E0 9839                   MOV.W       L745,R8    ; H'0080
    000002E2 7FF8                   ADD         #-8,R15
    000002E4 1F41                   MOV.L       R4,@(4,R15)
    000002E6 2F50                   MOV.B       R5,@R15
    000002E8              L627:                             
    000002E8 53F1                   MOV.L       @(4,R15),R3
         Dodge.c   267        {
         Dodge.c   268            for (y = 0; y < 64; y++)
    000002EA 6EB3                   MOV         R11,R14
    000002EC 6CD3                   MOV         R13,R12
    000002EE 4C08                   SHLL2       R12
    000002F0 4C08                   SHLL2       R12
    000002F2 4C08                   SHLL2       R12
    000002F4 3C3C                   ADD         R3,R12
    000002F6              L628:                             
         Dodge.c   269            {
         Dodge.c   270                if(sprite[x][y] > 0 || drawWhite) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F6 60C3                   MOV         R12,R0
    000002F8 03EC                   MOV.B       @(R0,R14),R3
    000002FA 4315                   CMP/PL      R3
    000002FC 8902                   BT          L630
    000002FE 63F0                   MOV.B       @R15,R3
    00000300 2338                   TST         R3,R3
    00000302 8904                   BT          L629
    00000304              L630:                             
         Dodge.c   271                    Bdisp_SetPoint_VRAM(x, y, sprite[x][y]);
    00000304 60C3                   MOV         R12,R0
    00000306 65E3                   MOV         R14,R5
    00000308 06EC                   MOV.B       @(R0,R14),R6
    0000030A 490B                   JSR         @R9
    0000030C 64D3                   MOV         R13,R4
    0000030E              L629:                             
    0000030E 7E01                   ADD         #1,R14
    00000310 3EA2                   CMP/HS      R10,R14
    00000312 8BF0                   BF          L628
    00000314 7D01                   ADD         #1,R13
    00000316 3D82                   CMP/HS      R8,R13
    00000318 8BE6                   BF          L627
         Dodge.c   272                }
         Dodge.c   273            }
         Dodge.c   274        }
         Dodge.c   275        
         Dodge.c   276    }
    0000031A 7F08                   ADD         #8,R15
    0000031C 4F26                   LDS.L       @R15+,PR
    0000031E 68F6                   MOV.L       @R15+,R8
    00000320 69F6                   MOV.L       @R15+,R9
    00000322 6AF6                   MOV.L       @R15+,R10
    00000324 6BF6                   MOV.L       @R15+,R11
    00000326 6CF6                   MOV.L       @R15+,R12
    00000328 6DF6                   MOV.L       @R15+,R13
    0000032A 000B                   RTS
    0000032C 6EF6                   MOV.L       @R15+,R14
         Dodge.c   277    
         Dodge.c   278    void RenderMainMenu() {
    0000032E              _RenderMainMenu:                 ; function: RenderMainMenu
                                                           ; frame size=8196
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    0000032E 4F22                   STS.L       PR,@-R15
    00000330 9012                   MOV.W       L745+2,R0  ; H'E000
    00000332 3F0C                   ADD         R0,R15
         Dodge.c   279        char mainMenu[128][64] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                         +, 0, 0, 0, },
         Dodge.c   280    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   281    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   282    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   283    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   284    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   285    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   286    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   287    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   288    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   289    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   290    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   291    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   292    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   293    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   294    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   295    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   296    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   297    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   298    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   299    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   300    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   301    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   302    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   303    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   304    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   305    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   306    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   307    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   308    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   309    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   310    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   311    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   312    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   313    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   314    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   315    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   316    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   317    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   318    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   319    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   320    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   321    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   322    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   323    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   324    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   325    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   326    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   327    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   328    {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   329    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   330    {0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   331    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   332    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   333    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   334    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   335    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   336    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   337    {0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   338    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   339    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   340    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   341    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   342    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   343    {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   344    {0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   345    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   346    {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   347    {0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   348    {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   349    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   350    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   351    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   352    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   353    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   354    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   355    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   356    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   357    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   358    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   359    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   360    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   361    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   362    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   363    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   364    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   365    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   366    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   367    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   368    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   369    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   370    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   371    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   372    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   373    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   374    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   375    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   376    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   377    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   378    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   379    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   380    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   381    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   382    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   383    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   384    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   385    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   386    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   387    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   388    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   389    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   390    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   391    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   392    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   393    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   394    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   395    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   396    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   397    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   398    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   399    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   400    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   401    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   402    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   403    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   404    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   405    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   406    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   407    };
    00000334 D20A                   MOV.L       L745+10,R2 ; L445
    00000336 9010                   MOV.W       L745+4,R0  ; H'2000
    00000338 D30A                   MOV.L       L745+14,R3 ; __slow_mvn
    0000033A 430B                   JSR         @R3
    0000033C 61F3                   MOV         R15,R1
         Dodge.c   408        DrawImage(mainMenu, true);
    0000033E D10A                   MOV.L       L745+18,R1 ; _true
    00000340 6510                   MOV.B       @R1,R5
    00000342 BFC1                   BSR         _DrawImage
    00000344 64F3                   MOV         R15,R4
         Dodge.c   409        // Move VRAM to DD
         Dodge.c   410        Bdisp_PutDisp_DD();
    00000346 D209                   MOV.L       L745+22,R2 ; _Bdisp_PutDisp_DD
    00000348 420B                   JSR         @R2
    0000034A 0009                   NOP
         Dodge.c   411    }
    0000034C 9105                   MOV.W       L745+4,R1  ; H'2000
    0000034E 3F1C                   ADD         R1,R15
    00000350 4F26                   LDS.L       @R15+,PR
    00000352 000B                   RTS
    00000354 0009                   NOP
    00000356              L745:                             
    00000356 0080                   .DATA.W     H'0080
    00000358 E000                   .DATA.W     H'E000
    0000035A 2000                   .DATA.W     H'2000
    0000035C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000360 <00000000>             .DATA.L     L445
    00000364 <00000000>             .DATA.L     __slow_mvn
    00000368 <00000000>             .DATA.L     _true
    0000036C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   412    
         Dodge.c   413    /** Draws the projectils */
         Dodge.c   414    void DrawProjectiles()
    00000370              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    00000370 2FE6                   MOV.L       R14,@-R15
    00000372 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000374 2FC6                   MOV.L       R12,@-R15
    00000376 2FB6                   MOV.L       R11,@-R15
    00000378 2FA6                   MOV.L       R10,@-R15
    0000037A 2F96                   MOV.L       R9,@-R15
    0000037C 2F86                   MOV.L       R8,@-R15
    0000037E 4F22                   STS.L       PR,@-R15
    00000380 D44B                   MOV.L       L746+2,R4  ; _projectiles
    00000382 7FE4                   ADD         #-28,R15
    00000384 DA4B                   MOV.L       L746+6,R10 ; _Bdisp_SetPoint_VRAM
    00000386 6543                   MOV         R4,R5
    00000388 9391                   MOV.W       L746,R3    ; H'1000
    0000038A 6D43                   MOV         R4,R13
    0000038C 6943                   MOV         R4,R9
    0000038E 343C                   ADD         R3,R4
    00000390 1F46                   MOV.L       R4,@(24,R15)
         Dodge.c   415    {   
         Dodge.c   416        float x1;
         Dodge.c   417        float y1;
         Dodge.c   418        float x2;
         Dodge.c   419        float y2;
         Dodge.c   420        float dx;
         Dodge.c   421        float dy;
         Dodge.c   422        int x;
         Dodge.c   423        int y;
         Dodge.c   424        int decide;
         Dodge.c   425        int pk;
         Dodge.c   426        int j;
         Dodge.c   427    
         Dodge.c   428        size_t i;
         Dodge.c   429        for (i = 0; i < 128; i++)
    00000392              L631:                             
         Dodge.c   430        {
         Dodge.c   431            if(projectiles[i].enabled) {
    00000392 6390                   MOV.B       @R9,R3
    00000394 2338                   TST         R3,R3
    00000396 8B01                   BF          L747
    00000398 A0D9                   BRA         L632
    0000039A 0009                   NOP
    0000039C              L747:                             
         Dodge.c   432                x1 = projectiles[i].x;
    0000039C 54D1                   MOV.L       @(4,R13),R4
    0000039E 1F41                   MOV.L       R4,@(4,R15)
         Dodge.c   433                y1 = projectiles[i].y;
    000003A0 55D2                   MOV.L       @(8,R13),R5
         Dodge.c   434                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000003A2 6143                   MOV         R4,R1
    000003A4 D344                   MOV.L       L746+10,R3 ; __adds
    000003A6 2F52                   MOV.L       R5,@R15
    000003A8 430B                   JSR         @R3
    000003AA 50D3                   MOV.L       @(12,R13),R0
         Dodge.c   435                y2 = projectiles[i].y + projectiles[i].yVelocity;
    000003AC D242                   MOV.L       L746+10,R2 ; __adds
    000003AE 6803                   MOV         R0,R8
    000003B0 6153                   MOV         R5,R1
    000003B2 420B                   JSR         @R2
    000003B4 50D4                   MOV.L       @(16,R13),R0
         Dodge.c   436                Bdisp_SetPoint_VRAM(x1, y1, 1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003B6 E601                   MOV         #1,R6
    000003B8 D240                   MOV.L       L746+14,R2 ; __stoi
    000003BA 1F02                   MOV.L       R0,@(8,R15)
    000003BC 420B                   JSR         @R2
    000003BE 60F2                   MOV.L       @R15,R0
    000003C0 D33E                   MOV.L       L746+14,R3 ; __stoi
    000003C2 6503                   MOV         R0,R5
    000003C4 430B                   JSR         @R3
    000003C6 50F1                   MOV.L       @(4,R15),R0
    000003C8 4A0B                   JSR         @R10
    000003CA 6403                   MOV         R0,R4
         Dodge.c   437                Bdisp_SetPoint_VRAM(x2, y2, 1);
    000003CC D33B                   MOV.L       L746+14,R3 ; __stoi
    000003CE E601                   MOV         #1,R6
    000003D0 430B                   JSR         @R3
    000003D2 50F2                   MOV.L       @(8,R15),R0
    000003D4 D339                   MOV.L       L746+14,R3 ; __stoi
    000003D6 6503                   MOV         R0,R5
    000003D8 430B                   JSR         @R3
    000003DA 6083                   MOV         R8,R0
    000003DC 4A0B                   JSR         @R10
    000003DE 6403                   MOV         R0,R4
         Dodge.c   438    
         Dodge.c   439                // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.
                         +org/bresenhams-line-generation-algorithm/
         Dodge.c   440                dx = abs(x2 - x1);
    000003E0 D237                   MOV.L       L746+18,R2 ; __subs
    000003E2 6183                   MOV         R8,R1
    000003E4 420B                   JSR         @R2
    000003E6 50F1                   MOV.L       @(4,R15),R0
    000003E8 D334                   MOV.L       L746+14,R3 ; __stoi
    000003EA 430B                   JSR         @R3
    000003EC 0009                   NOP
    000003EE D235                   MOV.L       L746+22,R2 ; _abs
    000003F0 420B                   JSR         @R2
    000003F2 6403                   MOV         R0,R4
    000003F4 D334                   MOV.L       L746+26,R3 ; __itos
    000003F6 430B                   JSR         @R3
    000003F8 0009                   NOP
    000003FA 6B03                   MOV         R0,R11
         Dodge.c   441                dy = abs(y2 - y1);
    000003FC 51F2                   MOV.L       @(8,R15),R1
    000003FE D230                   MOV.L       L746+18,R2 ; __subs
    00000400 420B                   JSR         @R2
    00000402 60F2                   MOV.L       @R15,R0
    00000404 D32D                   MOV.L       L746+14,R3 ; __stoi
    00000406 430B                   JSR         @R3
    00000408 0009                   NOP
    0000040A D22E                   MOV.L       L746+22,R2 ; _abs
    0000040C 420B                   JSR         @R2
    0000040E 6403                   MOV         R0,R4
    00000410 D32D                   MOV.L       L746+26,R3 ; __itos
    00000412 430B                   JSR         @R3
    00000414 0009                   NOP
    00000416 6403                   MOV         R0,R4
         Dodge.c   442    
         Dodge.c   443                decide = (dx > dy);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000418 D22C                   MOV.L       L746+30,R2 ; __gts
    0000041A 420B                   JSR         @R2
    0000041C 61B3                   MOV         R11,R1
    0000041E 1F03                   MOV.L       R0,@(12,R15)
         Dodge.c   444                
         Dodge.c   445                pk = 2 * dy - dx;
    00000420 D02B                   MOV.L       L746+34,R0 ; H'40000000
    00000422 D22C                   MOV.L       L746+38,R2 ; __muls
    00000424 420B                   JSR         @R2
    00000426 6143                   MOV         R4,R1
    00000428 D325                   MOV.L       L746+18,R3 ; __subs
    0000042A 6C03                   MOV         R0,R12
    0000042C 6103                   MOV         R0,R1
    0000042E 430B                   JSR         @R3
    00000430 60B3                   MOV         R11,R0
    00000432 D222                   MOV.L       L746+14,R2 ; __stoi
    00000434 420B                   JSR         @R2
    00000436 0009                   NOP
    00000438 D226                   MOV.L       L746+38,R2 ; __muls
    0000043A 6E03                   MOV         R0,R14
    0000043C D024                   MOV.L       L746+34,R0 ; H'40000000
         Dodge.c   446                for (j = 0; j <= dx; j++) {
    0000043E E300                   MOV         #0,R3
    00000440 1F34                   MOV.L       R3,@(16,R15)
    00000442 420B                   JSR         @R2
    00000444 61B3                   MOV         R11,R1
    00000446 D31E                   MOV.L       L746+18,R3 ; __subs
    00000448 430B                   JSR         @R3
    0000044A 61C3                   MOV         R12,R1
    0000044C 1F05                   MOV.L       R0,@(20,R15)
    0000044E E100                   MOV         #0,R1
    00000450 D321                   MOV.L       L746+42,R3 ; __les
    00000452 430B                   JSR         @R3
    00000454 60B3                   MOV         R11,R0
    00000456 8800                   CMP/EQ      #0,R0
    00000458 8979                   BT          L632
    0000045A              L634:                             
         Dodge.c   447                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    0000045A E601                   MOV         #1,R6
    0000045C D217                   MOV.L       L746+14,R2 ; __stoi
    0000045E 420B                   JSR         @R2
    00000460 60F2                   MOV.L       @R15,R0
    00000462 6503                   MOV         R0,R5
    00000464 D315                   MOV.L       L746+14,R3 ; __stoi
    00000466 430B                   JSR         @R3
    00000468 50F1                   MOV.L       @(4,R15),R0
    0000046A 4A0B                   JSR         @R10
    0000046C 6403                   MOV         R0,R4
         Dodge.c   448                    
         Dodge.c   449                    // checking either to decrement or increment the
         Dodge.c   450                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   451                    x1 < x2 ? x1++ : x1--;
    0000046E 51F1                   MOV.L       @(4,R15),R1
    00000470 D31A                   MOV.L       L746+46,R3 ; __lts
    00000472 430B                   JSR         @R3
    00000474 6083                   MOV         R8,R0
    00000476 8800                   CMP/EQ      #0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000478 8906                   BT          L635
    0000047A D119                   MOV.L       L746+50,R1 ; H'3F800000
    0000047C D20E                   MOV.L       L746+10,R2 ; __adds
    0000047E 420B                   JSR         @R2
    00000480 50F1                   MOV.L       @(4,R15),R0
    00000482 1F01                   MOV.L       R0,@(4,R15)
    00000484 A006                   BRA         L636
    00000486 0009                   NOP
    00000488              L635:                             
    00000488 51F1                   MOV.L       @(4,R15),R1
    0000048A D015                   MOV.L       L746+50,R0 ; H'3F800000
    0000048C D30C                   MOV.L       L746+18,R3 ; __subs
    0000048E 430B                   JSR         @R3
    00000490 0009                   NOP
    00000492 1F01                   MOV.L       R0,@(4,R15)
    00000494              L636:                             
         Dodge.c   452                    if (pk < 0) {
    00000494 4E11                   CMP/PZ      R14
    00000496 8930                   BT          L637
         Dodge.c   453                        // decision value will decide to plot
         Dodge.c   454                        // either  x1 or y1 in x's position
         Dodge.c   455                        if (decide == 0) {
    00000498 52F3                   MOV.L       @(12,R15),R2
    0000049A 2228                   TST         R2,R2
    0000049C 8B22                   BF          L638
         Dodge.c   456                            // putpixel(x1, y1, RED);
         Dodge.c   457                            pk = pk + 2 * dy;
    0000049E D30A                   MOV.L       L746+26,R3 ; __itos
    000004A0 430B                   JSR         @R3
    000004A2 60E3                   MOV         R14,R0
    000004A4 D204                   MOV.L       L746+10,R2 ; __adds
    000004A6 420B                   JSR         @R2
    000004A8 61C3                   MOV         R12,R1
    000004AA A021                   BRA         L738
    000004AC 0009                   NOP
    000004AE              L746:                             
    000004AE 1000                   .DATA.W     H'1000
    000004B0 <00000000>             .DATA.L     _projectiles
    000004B4 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000004B8 <00000000>             .DATA.L     __adds
    000004BC <00000000>             .DATA.L     __stoi
    000004C0 <00000000>             .DATA.L     __subs
    000004C4 <00000000>             .DATA.L     _abs
    000004C8 <00000000>             .DATA.L     __itos
    000004CC <00000000>             .DATA.L     __gts
    000004D0 40000000               .DATA.L     H'40000000
    000004D4 <00000000>             .DATA.L     __muls
    000004D8 <00000000>             .DATA.L     __les
    000004DC <00000000>             .DATA.L     __lts
    000004E0 3F800000               .DATA.L     H'3F800000
    000004E4              L638:                             
         Dodge.c   458                        }
         Dodge.c   459                        else {
         Dodge.c   460                            //(y1,x1) is passed in xt
         Dodge.c   461                            // putpixel(y1, x1, YELLOW);
         Dodge.c   462                            pk = pk + 2 * dy;
    000004E4 D357                   MOV.L       L748,R3    ; __itos




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004E6 430B                   JSR         @R3
    000004E8 60E3                   MOV         R14,R0
    000004EA D257                   MOV.L       L748+4,R2  ; __adds
    000004EC 420B                   JSR         @R2
    000004EE 61C3                   MOV         R12,R1
    000004F0              L738:                             
    000004F0 D356                   MOV.L       L748+8,R3  ; __stoi
    000004F2 430B                   JSR         @R3
    000004F4 0009                   NOP
    000004F6 A01F                   BRA         L640
    000004F8 6E03                   MOV         R0,R14
    000004FA              L637:                             
         Dodge.c   463                        }
         Dodge.c   464                    }
         Dodge.c   465                    else {
         Dodge.c   466                        y1 < y2 ? y1++ : y1--;
    000004FA 61F2                   MOV.L       @R15,R1
    000004FC D354                   MOV.L       L748+12,R3 ; __lts
    000004FE 430B                   JSR         @R3
    00000500 50F2                   MOV.L       @(8,R15),R0
    00000502 8800                   CMP/EQ      #0,R0
    00000504 8906                   BT          L641
    00000506 D153                   MOV.L       L748+16,R1 ; H'3F800000
    00000508 D24F                   MOV.L       L748+4,R2  ; __adds
    0000050A 420B                   JSR         @R2
    0000050C 60F2                   MOV.L       @R15,R0
    0000050E 2F02                   MOV.L       R0,@R15
    00000510 A006                   BRA         L642
    00000512 0009                   NOP
    00000514              L641:                             
    00000514 61F2                   MOV.L       @R15,R1
    00000516 D04F                   MOV.L       L748+16,R0 ; H'3F800000
    00000518 D34F                   MOV.L       L748+20,R3 ; __subs
    0000051A 430B                   JSR         @R3
    0000051C 0009                   NOP
    0000051E 2F02                   MOV.L       R0,@R15
    00000520              L642:                             
         Dodge.c   467                        if (decide == 0) {
    00000520 53F3                   MOV.L       @(12,R15),R3
    00000522 2338                   TST         R3,R3
         Dodge.c   468            
         Dodge.c   469                            // putpixel(x1, y1, RED);
         Dodge.c   470                        }
         Dodge.c   471                        else {
         Dodge.c   472                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   473                        }
         Dodge.c   474                        pk = pk + 2 * dy - 2 * dx;
    00000524 D347                   MOV.L       L748,R3    ; __itos
    00000526 430B                   JSR         @R3
    00000528 60E3                   MOV         R14,R0
    0000052A D247                   MOV.L       L748+4,R2  ; __adds
    0000052C 420B                   JSR         @R2
    0000052E 51F5                   MOV.L       @(20,R15),R1
    00000530 D346                   MOV.L       L748+8,R3  ; __stoi
    00000532 430B                   JSR         @R3
    00000534 0009                   NOP
    00000536 6E03                   MOV         R0,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000538              L640:                             
    00000538 52F4                   MOV.L       @(16,R15),R2
    0000053A 7201                   ADD         #1,R2
    0000053C 1F24                   MOV.L       R2,@(16,R15)
    0000053E D341                   MOV.L       L748,R3    ; __itos
    00000540 430B                   JSR         @R3
    00000542 6023                   MOV         R2,R0
    00000544 D345                   MOV.L       L748+24,R3 ; __ges
    00000546 430B                   JSR         @R3
    00000548 61B3                   MOV         R11,R1
    0000054A 8800                   CMP/EQ      #0,R0
    0000054C 8B85                   BF          L634
    0000054E              L632:                             
    0000054E 7920                   ADD         #32,R9
    00000550 52F6                   MOV.L       @(24,R15),R2
    00000552 3922                   CMP/HS      R2,R9
    00000554 8D02                   BT/S        L749
    00000556 7D20                   ADD         #32,R13
    00000558 AF1B                   BRA         L631
    0000055A 0009                   NOP
    0000055C              L749:                             
         Dodge.c   475                    }
         Dodge.c   476                }
         Dodge.c   477            }
         Dodge.c   478        }
         Dodge.c   479    }
    0000055C 7F1C                   ADD         #28,R15
    0000055E 4F26                   LDS.L       @R15+,PR
    00000560 68F6                   MOV.L       @R15+,R8
    00000562 69F6                   MOV.L       @R15+,R9
    00000564 6AF6                   MOV.L       @R15+,R10
    00000566 6BF6                   MOV.L       @R15+,R11
    00000568 6CF6                   MOV.L       @R15+,R12
    0000056A 6DF6                   MOV.L       @R15+,R13
    0000056C 000B                   RTS
    0000056E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   480    
         Dodge.c   481    /** Draws the player */
         Dodge.c   482    void DrawPlayer()
    00000570              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __modls
    00000570 2FE6                   MOV.L       R14,@-R15
    00000572 2FD6                   MOV.L       R13,@-R15
    00000574 2FC6                   MOV.L       R12,@-R15
    00000576 2FB6                   MOV.L       R11,@-R15
    00000578 4F22                   STS.L       PR,@-R15
         Dodge.c   483    {   
         Dodge.c   484        if(damaged) {
    0000057A DB39                   MOV.L       L748+28,R11; _flicker
    0000057C D239                   MOV.L       L748+32,R2 ; _damaged
    0000057E 6320                   MOV.B       @R2,R3
    00000580 2338                   TST         R3,R3
    00000582 890E                   BT          L645
         Dodge.c   485            if((timer - flickerOffset) % 10 == 0) { // damage flash animation
    00000584 D038                   MOV.L       L748+36,R0 ; _flickerOffset




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000586 6302                   MOV.L       @R0,R3
    00000588 D238                   MOV.L       L748+40,R2 ; _timer
    0000058A 6122                   MOV.L       @R2,R1
    0000058C D238                   MOV.L       L748+44,R2 ; __modls
    0000058E 3138                   SUB         R3,R1
    00000590 420B                   JSR         @R2
    00000592 E00A                   MOV         #10,R0
    00000594 2008                   TST         R0,R0
    00000596 8B06                   BF          L648
         Dodge.c   486                flicker = !flicker;
    00000598 60B0                   MOV.B       @R11,R0
    0000059A 2008                   TST         R0,R0
    0000059C 0029                   MOVT        R0
    0000059E A002                   BRA         L648
    000005A0 2B00                   MOV.B       R0,@R11
    000005A2              L645:                             
         Dodge.c   487            }
         Dodge.c   488        }
         Dodge.c   489        else
         Dodge.c   490            flicker = 1;
    000005A2 E101                   MOV         #1,R1
    000005A4 2B10                   MOV.B       R1,@R11
    000005A6              L648:                             
         Dodge.c   491        Bdisp_SetPoint_VRAM(playerX, playerY, flicker); // middle
    000005A6 DC33                   MOV.L       L748+48,R12; _playerY
    000005A8 DD33                   MOV.L       L748+52,R13; _Bdisp_SetPoint_VRAM
    000005AA DE34                   MOV.L       L748+56,R14; _playerX
    000005AC 66B0                   MOV.B       @R11,R6
    000005AE 65C2                   MOV.L       @R12,R5
    000005B0 4D0B                   JSR         @R13
    000005B2 64E2                   MOV.L       @R14,R4
         Dodge.c   492        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    000005B4 65C2                   MOV.L       @R12,R5
    000005B6 E601                   MOV         #1,R6
    000005B8 64E2                   MOV.L       @R14,R4
    000005BA 4D0B                   JSR         @R13
    000005BC 7401                   ADD         #1,R4
         Dodge.c   493        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    000005BE E601                   MOV         #1,R6
    000005C0 65C2                   MOV.L       @R12,R5
    000005C2 64E2                   MOV.L       @R14,R4
    000005C4 4D0B                   JSR         @R13
    000005C6 74FF                   ADD         #-1,R4
         Dodge.c   494        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    000005C8 65C2                   MOV.L       @R12,R5
    000005CA E601                   MOV         #1,R6
    000005CC 7501                   ADD         #1,R5
    000005CE 4D0B                   JSR         @R13
    000005D0 64E2                   MOV.L       @R14,R4
         Dodge.c   495        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000005D2 E601                   MOV         #1,R6
    000005D4 65C2                   MOV.L       @R12,R5
    000005D6 75FF                   ADD         #-1,R5
    000005D8 4D0B                   JSR         @R13
    000005DA 64E2                   MOV.L       @R14,R4
         Dodge.c   496    }
    000005DC 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005DE 6BF6                   MOV.L       @R15+,R11
    000005E0 6CF6                   MOV.L       @R15+,R12
    000005E2 6DF6                   MOV.L       @R15+,R13
    000005E4 000B                   RTS
    000005E6 6EF6                   MOV.L       @R15+,R14
         Dodge.c   497    void NotDamaged() {
    000005E8              _NotDamaged:                     ; function: NotDamaged
                                                           ; frame size=0
         Dodge.c   498        damaged = false;
    000005E8 D225                   MOV.L       L748+60,R2 ; _false
    000005EA 6320                   MOV.B       @R2,R3
    000005EC D11D                   MOV.L       L748+32,R1 ; _damaged
    000005EE 2130                   MOV.B       R3,@R1
         Dodge.c   499        KillTimer(ID_USER_TIMER4);
    000005F0 D324                   MOV.L       L748+64,R3 ; _KillTimer
    000005F2 432B                   JMP         @R3
    000005F4 E404                   MOV         #4,R4
         Dodge.c   500        // if the player is damaged multiple times within one second, the animation will only play for 2 secon
                         +ds from the
         Dodge.c   501        // first hit. i can't really be bothered fixing this
         Dodge.c   502    }
         Dodge.c   503    
         Dodge.c   504    void DrawHealthBar() {
    000005F6              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __modls
    000005F6 2FE6                   MOV.L       R14,@-R15
    000005F8 2FD6                   MOV.L       R13,@-R15
    000005FA 2FC6                   MOV.L       R12,@-R15
    000005FC 2FB6                   MOV.L       R11,@-R15
    000005FE 4F22                   STS.L       PR,@-R15
         Dodge.c   505        size_t i;
         Dodge.c   506        for (i = 0; i < playerHealth; i++)
    00000600 DC21                   MOV.L       L748+68,R12; _playerHealth
    00000602 DD1D                   MOV.L       L748+52,R13; _Bdisp_SetPoint_VRAM
    00000604 A005                   BRA         L649
    00000606 EE00                   MOV         #0,R14
    00000608              L650:                             
         Dodge.c   507            Bdisp_SetPoint_VRAM(i, 63, 1);
    00000608 E601                   MOV         #1,R6
    0000060A E53F                   MOV         #63,R5
    0000060C 4D0B                   JSR         @R13
    0000060E 64E3                   MOV         R14,R4
    00000610 7E01                   ADD         #1,R14
    00000612              L649:                             
    00000612 62C2                   MOV.L       @R12,R2
    00000614 3E22                   CMP/HS      R2,R14
    00000616 8BF7                   BF          L650
         Dodge.c   508        for (i = 0; i < (timer % 100); i++) // bar until next attack
    00000618 DB14                   MOV.L       L748+40,R11; _timer
    0000061A EC64                   MOV         #100,R12
    0000061C A006                   BRA         L651
    0000061E EE00                   MOV         #0,R14
    00000620              L652:                             
         Dodge.c   509            Bdisp_SetPoint_VRAM(14 + i, 1, 1); // + 14 so that it's centered (half of 28) (128-100=28) (screen
                         + is 128 wide)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000620 E601                   MOV         #1,R6
    00000622 6563                   MOV         R6,R5
    00000624 64E3                   MOV         R14,R4
    00000626 4D0B                   JSR         @R13
    00000628 740E                   ADD         #14,R4
    0000062A 7E01                   ADD         #1,R14
    0000062C              L651:                             
    0000062C 61B2                   MOV.L       @R11,R1
    0000062E D310                   MOV.L       L748+44,R3 ; __modls
    00000630 430B                   JSR         @R3
    00000632 60C3                   MOV         R12,R0
    00000634 3E02                   CMP/HS      R0,R14
    00000636 8BF3                   BF          L652
         Dodge.c   510        // debug bars
         Dodge.c   511        // for (i = 0; i < projectileIndex; i++)
         Dodge.c   512        //     Bdisp_SetPoint_VRAM(i, 1, 1);
         Dodge.c   513        // for (i = 0; i < maxProjectiles; i++)
         Dodge.c   514        //     Bdisp_SetPoint_VRAM(i, 2, 1);
         Dodge.c   515    }
    00000638 4F26                   LDS.L       @R15+,PR
    0000063A 6BF6                   MOV.L       @R15+,R11
    0000063C 6CF6                   MOV.L       @R15+,R12
    0000063E 6DF6                   MOV.L       @R15+,R13
    00000640 000B                   RTS
    00000642 6EF6                   MOV.L       @R15+,R14
    00000644              L748:                             
    00000644 <00000000>             .DATA.L     __itos
    00000648 <00000000>             .DATA.L     __adds
    0000064C <00000000>             .DATA.L     __stoi
    00000650 <00000000>             .DATA.L     __lts
    00000654 3F800000               .DATA.L     H'3F800000
    00000658 <00000000>             .DATA.L     __subs
    0000065C <00000000>             .DATA.L     __ges
    00000660 <00000000>             .DATA.L     _flicker
    00000664 <00000000>             .DATA.L     _damaged
    00000668 <00000000>             .DATA.L     _flickerOffset
    0000066C <00000000>             .DATA.L     _timer
    00000670 <00000000>             .DATA.L     __modls
    00000674 <00000000>             .DATA.L     _playerY
    00000678 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    0000067C <00000000>             .DATA.L     _playerX
    00000680 <00000000>             .DATA.L     _false
    00000684 <00000000>             .DATA.L     _KillTimer
    00000688 <00000000>             .DATA.L     _playerHealth
         Dodge.c   516    
         Dodge.c   517    #pragma endregion
         Dodge.c   518    
         Dodge.c   519    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   520    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration) {
    0000068C              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=24
    0000068C 2FE6                   MOV.L       R14,@-R15
    0000068E 2FD6                   MOV.L       R13,@-R15
    00000690 2FC6                   MOV.L       R12,@-R15
    00000692 2FA6                   MOV.L       R10,@-R15
    00000694 DE2C                   MOV.L       L750+4,R14 ; _projectiles




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000696 7FF8                   ADD         #-8,R15
    00000698 9354                   MOV.W       L750,R3    ; H'1000
    0000069A 6DE3                   MOV         R14,R13
         Dodge.c   521        size_t i;
         Dodge.c   522        for (i = 0; i < 128; i++)
    0000069C DA2B                   MOV.L       L750+8,R10 ; _true
    0000069E 2FE2                   MOV.L       R14,@R15
    000006A0 1FE1                   MOV.L       R14,@(4,R15)
    000006A2 61F2                   MOV.L       @R15,R1
    000006A4 313C                   ADD         R3,R1
    000006A6 3D12                   CMP/HS      R1,R13
    000006A8 8D13                   BT/S        L656
    000006AA EC00                   MOV         #0,R12
    000006AC              L654:                             
         Dodge.c   523        {
         Dodge.c   524            if(!projectiles[i].enabled) { // found a free spot in the array
    000006AC 63D0                   MOV.B       @R13,R3
    000006AE 2338                   TST         R3,R3
    000006B0 8B0B                   BF          L655
         Dodge.c   525                // set up the projectile
         Dodge.c   526                projectiles[i].x = x;
    000006B2 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   527                projectiles[i].y = y;
    000006B4 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   528                projectiles[i].xVelocity = xVelocity;
    000006B6 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   529                projectiles[i].yVelocity = yVelocity;
    000006B8 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   530                projectiles[i].xAcceleration = xAcceleration;
    000006BA 53F6                   MOV.L       @(24,R15),R3
    000006BC 1E35                   MOV.L       R3,@(20,R14)
         Dodge.c   531                projectiles[i].yAcceleration = yAcceleration;
    000006BE 52F7                   MOV.L       @(28,R15),R2
    000006C0 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   532                // enable it
         Dodge.c   533                projectiles[i].enabled = true;
    000006C2 63A0                   MOV.B       @R10,R3
    000006C4 2E30                   MOV.B       R3,@R14
         Dodge.c   534                projectiles[i].framesAlive = 0;
         Dodge.c   535                // stop the loop, we're done
         Dodge.c   536                return;
    000006C6 A004                   BRA         L656
    000006C8 1EC7                   MOV.L       R12,@(28,R14)
    000006CA              L655:                             
    000006CA 7D20                   ADD         #32,R13
    000006CC 3D12                   CMP/HS      R1,R13
    000006CE 8FED                   BF/S        L654
    000006D0 7E20                   ADD         #32,R14
    000006D2              L656:                             
         Dodge.c   537            }
         Dodge.c   538        }
         Dodge.c   539        
         Dodge.c   540    }
    000006D2 7F08                   ADD         #8,R15
    000006D4 6AF6                   MOV.L       @R15+,R10
    000006D6 6CF6                   MOV.L       @R15+,R12
    000006D8 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006DA 000B                   RTS
    000006DC 6EF6                   MOV.L       @R15+,R14
         Dodge.c   541    
         Dodge.c   542    int IsCollidingWithPlayer(int x, int y) {
    000006DE              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer
                                                           ; frame size=12
    000006DE 4F22                   STS.L       PR,@-R15
         Dodge.c   543        return (abs(x - playerX) < 2 && abs(y - playerY) < 2);
    000006E0 D21B                   MOV.L       L750+12,R2 ; _playerX
    000006E2 7FF8                   ADD         #-8,R15
    000006E4 D11B                   MOV.L       L750+16,R1 ; _abs
    000006E6 1F41                   MOV.L       R4,@(4,R15)
    000006E8 2F52                   MOV.L       R5,@R15
    000006EA 6322                   MOV.L       @R2,R3
    000006EC 54F1                   MOV.L       @(4,R15),R4
    000006EE 410B                   JSR         @R1
    000006F0 3438                   SUB         R3,R4
    000006F2 E302                   MOV         #2,R3
    000006F4 3033                   CMP/GE      R3,R0
    000006F6 890C                   BT          L657
    000006F8 D117                   MOV.L       L750+20,R1 ; _playerY
    000006FA 6212                   MOV.L       @R1,R2
    000006FC 64F2                   MOV.L       @R15,R4
    000006FE D315                   MOV.L       L750+16,R3 ; _abs
    00000700 430B                   JSR         @R3
    00000702 3428                   SUB         R2,R4
    00000704 E202                   MOV         #2,R2
    00000706 3023                   CMP/GE      R2,R0
    00000708 8903                   BT          L657
    0000070A 7F08                   ADD         #8,R15
    0000070C 4F26                   LDS.L       @R15+,PR
    0000070E 000B                   RTS
    00000710 E001                   MOV         #1,R0
    00000712              L657:                             
    00000712 E000                   MOV         #0,R0
         Dodge.c   544    }
    00000714              L659:                             
    00000714 7F08                   ADD         #8,R15
    00000716 4F26                   LDS.L       @R15+,PR
    00000718 000B                   RTS
    0000071A 0009                   NOP
         Dodge.c   545    
         Dodge.c   546    #pragma region Timer functions
         Dodge.c   547    
         Dodge.c   548    /** Timer #2: Renders screen */
         Dodge.c   549    void RenderScreen()
    0000071C              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4
    0000071C 4F22                   STS.L       PR,@-R15
         Dodge.c   550    {
         Dodge.c   551        if(!quit) {
    0000071E D10F                   MOV.L       L750+24,R1 ; _quit
    00000720 6310                   MOV.B       @R1,R3
    00000722 2338                   TST         R3,R3
    00000724 8B0B                   BF          L660
         Dodge.c   552            // Clear current screen
         Dodge.c   553            Bdisp_AllClr_VRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000726 D30E                   MOV.L       L750+28,R3 ; _Bdisp_AllClr_VRAM
    00000728 430B                   JSR         @R3
    0000072A 0009                   NOP
         Dodge.c   554                
         Dodge.c   555            // Draw the different parts of the screen
         Dodge.c   556            DrawProjectiles();
    0000072C BE20                   BSR         _DrawProjectiles
    0000072E 0009                   NOP
         Dodge.c   557            DrawPlayer();
    00000730 BF1E                   BSR         _DrawPlayer
    00000732 0009                   NOP
         Dodge.c   558            DrawHealthBar();
    00000734 BF5F                   BSR         _DrawHealthBar
    00000736 0009                   NOP
         Dodge.c   559    
         Dodge.c   560            // Move VRAM to DD
         Dodge.c   561            Bdisp_PutDisp_DD();
    00000738 D30A                   MOV.L       L750+32,R3 ; _Bdisp_PutDisp_DD
    0000073A 432B                   JMP         @R3
    0000073C 4F26                   LDS.L       @R15+,PR
    0000073E              L660:                             
         Dodge.c   562        }
         Dodge.c   563    }
    0000073E 4F26                   LDS.L       @R15+,PR
    00000740 000B                   RTS
    00000742 0009                   NOP
    00000744              L750:                             
    00000744 1000                   .DATA.W     H'1000
    00000746 0000                   .DATA.W     0
    00000748 <00000000>             .DATA.L     _projectiles
    0000074C <00000000>             .DATA.L     _true
    00000750 <00000000>             .DATA.L     _playerX
    00000754 <00000000>             .DATA.L     _abs
    00000758 <00000000>             .DATA.L     _playerY
    0000075C <00000000>             .DATA.L     _quit
    00000760 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000764 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   564    
         Dodge.c   565    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    00000768              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __modls, __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, _
                        +                                  _les
    00000768 2FE6                   MOV.L       R14,@-R15
         Dodge.c   566        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   567        float dx;
         Dodge.c   568        float dy;
         Dodge.c   569        int decide;
         Dodge.c   570        int pk;
         Dodge.c   571        int j;
         Dodge.c   572    
         Dodge.c   573        dx = abs(x2 - x1);
    0000076A 6173                   MOV         R7,R1
    0000076C D342                   MOV.L       L751+2,R3  ; __subs
    0000076E 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000770 2FC6                   MOV.L       R12,@-R15
    00000772 2FB6                   MOV.L       R11,@-R15
    00000774 2FA6                   MOV.L       R10,@-R15
    00000776 2F96                   MOV.L       R9,@-R15
    00000778 2F86                   MOV.L       R8,@-R15
    0000077A 4F22                   STS.L       PR,@-R15
    0000077C 7FE8                   ADD         #-24,R15
    0000077E 1F43                   MOV.L       R4,@(12,R15)
    00000780 1F51                   MOV.L       R5,@(4,R15)
    00000782 2F62                   MOV.L       R6,@R15
    00000784 1F72                   MOV.L       R7,@(8,R15)
    00000786 430B                   JSR         @R3
    00000788 50F1                   MOV.L       @(4,R15),R0
    0000078A D23C                   MOV.L       L751+6,R2  ; __stoi
    0000078C 420B                   JSR         @R2
    0000078E 0009                   NOP
    00000790 D33B                   MOV.L       L751+10,R3 ; _abs
    00000792 430B                   JSR         @R3
    00000794 6403                   MOV         R0,R4
    00000796 D23B                   MOV.L       L751+14,R2 ; __itos
    00000798 420B                   JSR         @R2
    0000079A 0009                   NOP
         Dodge.c   574        dy = abs(y2 - y1);
    0000079C 51FE                   MOV.L       @(56,R15),R1
    0000079E 6D03                   MOV         R0,R13
    000007A0 D335                   MOV.L       L751+2,R3  ; __subs
    000007A2 430B                   JSR         @R3
    000007A4 60F2                   MOV.L       @R15,R0
    000007A6 D235                   MOV.L       L751+6,R2  ; __stoi
    000007A8 420B                   JSR         @R2
    000007AA 0009                   NOP
    000007AC D334                   MOV.L       L751+10,R3 ; _abs
    000007AE 430B                   JSR         @R3
    000007B0 6403                   MOV         R0,R4
    000007B2 D234                   MOV.L       L751+14,R2 ; __itos
    000007B4 420B                   JSR         @R2
    000007B6 0009                   NOP
         Dodge.c   575    
         Dodge.c   576        decide = (dx > dy);
    000007B8 D333                   MOV.L       L751+18,R3 ; __gts
    000007BA 6403                   MOV         R0,R4
    000007BC 430B                   JSR         @R3
    000007BE 61D3                   MOV         R13,R1
         Dodge.c   577        
         Dodge.c   578        pk = 2 * dy - dx;
    000007C0 D233                   MOV.L       L751+26,R2 ; __muls
    000007C2 6903                   MOV         R0,R9
    000007C4 D031                   MOV.L       L751+22,R0 ; H'40000000
    000007C6 420B                   JSR         @R2
    000007C8 6143                   MOV         R4,R1
    000007CA 6A03                   MOV         R0,R10
    000007CC D32A                   MOV.L       L751+2,R3  ; __subs
    000007CE 6103                   MOV         R0,R1
    000007D0 430B                   JSR         @R3
    000007D2 60D3                   MOV         R13,R0
    000007D4 D229                   MOV.L       L751+6,R2  ; __stoi
    000007D6 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007D8 0009                   NOP
    000007DA 6E03                   MOV         R0,R14
    000007DC 53F3                   MOV.L       @(12,R15),R3
         Dodge.c   579        for (j = 0; j <= dx; j++) {
    000007DE E800                   MOV         #0,R8
    000007E0 D22C                   MOV.L       L751+30,R2 ; _projectiles
    000007E2 4308                   SHLL2       R3
    000007E4 D029                   MOV.L       L751+22,R0 ; H'40000000
    000007E6 4308                   SHLL2       R3
    000007E8 4300                   SHLL        R3
    000007EA 1F35                   MOV.L       R3,@(20,R15)
    000007EC 332C                   ADD         R2,R3
    000007EE 1F33                   MOV.L       R3,@(12,R15)
    000007F0 D227                   MOV.L       L751+26,R2 ; __muls
    000007F2 420B                   JSR         @R2
    000007F4 61D3                   MOV         R13,R1
    000007F6 D220                   MOV.L       L751+2,R2  ; __subs
    000007F8 420B                   JSR         @R2
    000007FA 61A3                   MOV         R10,R1
    000007FC 1F04                   MOV.L       R0,@(16,R15)
    000007FE 6183                   MOV         R8,R1
    00000800 D225                   MOV.L       L751+34,R2 ; __les
    00000802 420B                   JSR         @R2
    00000804 60D3                   MOV         R13,R0
    00000806 8800                   CMP/EQ      #0,R0
    00000808 8B01                   BF          L752
    0000080A A0A8                   BRA         L661
    0000080C 0009                   NOP
    0000080E              L752:                             
    0000080E DB23                   MOV.L       L751+38,R11; _false
    00000810 DC23                   MOV.L       L751+42,R12; _playerHealth
    00000812              L662:                             
         Dodge.c   580            // check for collision
         Dodge.c   581            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    00000812 D31A                   MOV.L       L751+6,R3  ; __stoi
    00000814 430B                   JSR         @R3
    00000816 60F2                   MOV.L       @R15,R0
    00000818 D318                   MOV.L       L751+6,R3  ; __stoi
    0000081A 6503                   MOV         R0,R5
    0000081C 430B                   JSR         @R3
    0000081E 50F1                   MOV.L       @(4,R15),R0
    00000820 BF5D                   BSR         _IsCollidingWithPlayer
    00000822 6403                   MOV         R0,R4
    00000824 2008                   TST         R0,R0
    00000826 8919                   BT          L663
         Dodge.c   582                // damage player
         Dodge.c   583                playerHealth -= 1;
    00000828 63C2                   MOV.L       @R12,R3
    0000082A 73FF                   ADD         #-1,R3
    0000082C 2C32                   MOV.L       R3,@R12
         Dodge.c   584                damaged = true;
    0000082E D11D                   MOV.L       L751+46,R1 ; _true
    00000830 D01D                   MOV.L       L751+50,R0 ; _damaged
    00000832 6210                   MOV.B       @R1,R2
    00000834 2020                   MOV.B       R2,@R0
         Dodge.c   585                flicker = false;
    00000836 63B0                   MOV.B       @R11,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000838 D21C                   MOV.L       L751+54,R2 ; _flicker
    0000083A 2230                   MOV.B       R3,@R2
         Dodge.c   586                flickerOffset = timer % 10;
    0000083C D31C                   MOV.L       L751+58,R3 ; _timer
    0000083E 6132                   MOV.L       @R3,R1
    00000840 D31C                   MOV.L       L751+62,R3 ; __modls
    00000842 430B                   JSR         @R3
    00000844 E00A                   MOV         #10,R0
    00000846 D21C                   MOV.L       L751+66,R2 ; _flickerOffset
         Dodge.c   587                SetTimer(ID_USER_TIMER4, 2000, NotDamaged); // animate flicker for 2 second
    00000848 D61C                   MOV.L       L751+70,R6 ; _NotDamaged
    0000084A 2202                   MOV.L       R0,@R2
    0000084C 9513                   MOV.W       L751,R5    ; H'07D0
    0000084E D31C                   MOV.L       L751+74,R3 ; _SetTimer
    00000850 430B                   JSR         @R3
    00000852 E404                   MOV         #4,R4
         Dodge.c   588                // destroy projectile
         Dodge.c   589                projectiles[arrayIndex].enabled = false;
    00000854 52F3                   MOV.L       @(12,R15),R2
    00000856 63B0                   MOV.B       @R11,R3
         Dodge.c   590                return;
    00000858 A088                   BRA         L664
    0000085A 2230                   MOV.B       R3,@R2
    0000085C              L663:                             
         Dodge.c   591            }
         Dodge.c   592            
         Dodge.c   593            // checking either to decrement or increment the
         Dodge.c   594            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   595            x1 < x2 ? x1++ : x1--;
    0000085C 51F1                   MOV.L       @(4,R15),R1
    0000085E D219                   MOV.L       L751+78,R2 ; __lts
    00000860 420B                   JSR         @R2
    00000862 50F2                   MOV.L       @(8,R15),R0
    00000864 8800                   CMP/EQ      #0,R0
    00000866 8933                   BT          L665
    00000868 D117                   MOV.L       L751+82,R1 ; H'3F800000
    0000086A D318                   MOV.L       L751+86,R3 ; __adds
    0000086C 430B                   JSR         @R3
    0000086E 50F1                   MOV.L       @(4,R15),R0
    00000870 1F01                   MOV.L       R0,@(4,R15)
    00000872 A033                   BRA         L666
    00000874 0009                   NOP
    00000876              L751:                             
    00000876 07D0                   .DATA.W     H'07D0
    00000878 <00000000>             .DATA.L     __subs
    0000087C <00000000>             .DATA.L     __stoi
    00000880 <00000000>             .DATA.L     _abs
    00000884 <00000000>             .DATA.L     __itos
    00000888 <00000000>             .DATA.L     __gts
    0000088C 40000000               .DATA.L     H'40000000
    00000890 <00000000>             .DATA.L     __muls
    00000894 <00000000>             .DATA.L     _projectiles
    00000898 <00000000>             .DATA.L     __les
    0000089C <00000000>             .DATA.L     _false
    000008A0 <00000000>             .DATA.L     _playerHealth
    000008A4 <00000000>             .DATA.L     _true
    000008A8 <00000000>             .DATA.L     _damaged




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008AC <00000000>             .DATA.L     _flicker
    000008B0 <00000000>             .DATA.L     _timer
    000008B4 <00000000>             .DATA.L     __modls
    000008B8 <00000000>             .DATA.L     _flickerOffset
    000008BC <00000000>             .DATA.L     _NotDamaged
    000008C0 <00000000>             .DATA.L     _SetTimer
    000008C4 <00000000>             .DATA.L     __lts
    000008C8 3F800000               .DATA.L     H'3F800000
    000008CC <00000000>             .DATA.L     __adds
    000008D0              L665:                             
    000008D0 51F1                   MOV.L       @(4,R15),R1
    000008D2 D044                   MOV.L       L753+2,R0  ; H'3F800000
    000008D4 D244                   MOV.L       L753+6,R2  ; __subs
    000008D6 420B                   JSR         @R2
    000008D8 0009                   NOP
    000008DA 1F01                   MOV.L       R0,@(4,R15)
    000008DC              L666:                             
    000008DC D343                   MOV.L       L753+10,R3 ; __itos
    000008DE 430B                   JSR         @R3
    000008E0 60E3                   MOV         R14,R0
    000008E2 4E11                   CMP/PZ      R14
    000008E4 8D14                   BT/S        L667
    000008E6 6403                   MOV         R0,R4
         Dodge.c   596            if (pk < 0) {
         Dodge.c   597                // decision value will decide to plot
         Dodge.c   598                // either  x1 or y1 in x's position
         Dodge.c   599                if (decide == 0) {
    000008E8 2998                   TST         R9,R9
    000008EA 8B08                   BF          L668
         Dodge.c   600                    // putpixel(x1, y1, RED);
         Dodge.c   601                    pk = pk + 2 * dy;
    000008EC D240                   MOV.L       L753+14,R2 ; __adds
    000008EE 6143                   MOV         R4,R1
    000008F0 420B                   JSR         @R2
    000008F2 60A3                   MOV         R10,R0
    000008F4 D33F                   MOV.L       L753+18,R3 ; __stoi
    000008F6 430B                   JSR         @R3
    000008F8 0009                   NOP
    000008FA A007                   BRA         L739
    000008FC 0009                   NOP
    000008FE              L668:                             
         Dodge.c   602                }
         Dodge.c   603                else {
         Dodge.c   604                    //(y1,x1) is passed in xt
         Dodge.c   605                    // putpixel(y1, x1, YELLOW);
         Dodge.c   606                    pk = pk + 2 * dy;
    000008FE 6143                   MOV         R4,R1
    00000900 D33B                   MOV.L       L753+14,R3 ; __adds
    00000902 430B                   JSR         @R3
    00000904 60A3                   MOV         R10,R0
    00000906 D23B                   MOV.L       L753+18,R2 ; __stoi
    00000908 420B                   JSR         @R2
    0000090A 0009                   NOP
    0000090C              L739:                             
    0000090C A01C                   BRA         L670
    0000090E 6E03                   MOV         R0,R14
    00000910              L667:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   607                }
         Dodge.c   608            }
         Dodge.c   609            else {
         Dodge.c   610                y1 < y2 ? y1++ : y1--;
    00000910 61F2                   MOV.L       @R15,R1
    00000912 D239                   MOV.L       L753+22,R2 ; __lts
    00000914 420B                   JSR         @R2
    00000916 50FE                   MOV.L       @(56,R15),R0
    00000918 8800                   CMP/EQ      #0,R0
    0000091A 8906                   BT          L671
    0000091C D131                   MOV.L       L753+2,R1  ; H'3F800000
    0000091E D334                   MOV.L       L753+14,R3 ; __adds
    00000920 430B                   JSR         @R3
    00000922 60F2                   MOV.L       @R15,R0
    00000924 2F02                   MOV.L       R0,@R15
    00000926 A006                   BRA         L672
    00000928 0009                   NOP
    0000092A              L671:                             
    0000092A 61F2                   MOV.L       @R15,R1
    0000092C D02D                   MOV.L       L753+2,R0  ; H'3F800000
    0000092E D22E                   MOV.L       L753+6,R2  ; __subs
    00000930 420B                   JSR         @R2
    00000932 0009                   NOP
    00000934 2F02                   MOV.L       R0,@R15
    00000936              L672:                             
         Dodge.c   611                if (decide == 0) {
    00000936 2998                   TST         R9,R9
         Dodge.c   612    
         Dodge.c   613                    // putpixel(x1, y1, RED);
         Dodge.c   614                }
         Dodge.c   615                else {
         Dodge.c   616                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   617                }
         Dodge.c   618                pk = pk + 2 * dy - 2 * dx;
    00000938 D32D                   MOV.L       L753+14,R3 ; __adds
    0000093A 6143                   MOV         R4,R1
    0000093C 430B                   JSR         @R3
    0000093E 50F4                   MOV.L       @(16,R15),R0
    00000940 D22C                   MOV.L       L753+18,R2 ; __stoi
    00000942 420B                   JSR         @R2
    00000944 0009                   NOP
    00000946 6E03                   MOV         R0,R14
    00000948              L670:                             
    00000948 D328                   MOV.L       L753+10,R3 ; __itos
    0000094A 7801                   ADD         #1,R8
    0000094C 430B                   JSR         @R3
    0000094E 6083                   MOV         R8,R0
    00000950 D22A                   MOV.L       L753+26,R2 ; __ges
    00000952 420B                   JSR         @R2
    00000954 61D3                   MOV         R13,R1
    00000956 8800                   CMP/EQ      #0,R0
    00000958 8901                   BT          L754
    0000095A AF5A                   BRA         L662
    0000095C 0009                   NOP
    0000095E              L754:                             
    0000095E              L661:                             
         Dodge.c   619            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   620        }
         Dodge.c   621    
         Dodge.c   622        projectiles[arrayIndex].x = x2;
    0000095E D328                   MOV.L       L753+30,R3 ; _projectiles
    00000960 54F5                   MOV.L       @(20,R15),R4
    00000962 343C                   ADD         R3,R4
    00000964 52F2                   MOV.L       @(8,R15),R2
    00000966 1421                   MOV.L       R2,@(4,R4)
         Dodge.c   623        projectiles[arrayIndex].y = y2;
    00000968 51FE                   MOV.L       @(56,R15),R1
    0000096A 1412                   MOV.L       R1,@(8,R4)
         Dodge.c   624    }
    0000096C              L664:                             
    0000096C 7F18                   ADD         #24,R15
    0000096E 4F26                   LDS.L       @R15+,PR
    00000970 68F6                   MOV.L       @R15+,R8
    00000972 69F6                   MOV.L       @R15+,R9
    00000974 6AF6                   MOV.L       @R15+,R10
    00000976 6BF6                   MOV.L       @R15+,R11
    00000978 6CF6                   MOV.L       @R15+,R12
    0000097A 6DF6                   MOV.L       @R15+,R13
    0000097C 000B                   RTS
    0000097E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   625    
         Dodge.c   626    void Physics()
    00000980              _Physics:                        ; function: Physics
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __gts, __lts
    00000980 2FE6                   MOV.L       R14,@-R15
    00000982 2FD6                   MOV.L       R13,@-R15
    00000984 2FC6                   MOV.L       R12,@-R15
    00000986 2FB6                   MOV.L       R11,@-R15
    00000988 4F22                   STS.L       PR,@-R15
         Dodge.c   627    {
         Dodge.c   628        size_t i;
         Dodge.c   629        for (i = 0; i < 128; i++)
    0000098A A062                   BRA         L675
    0000098C ED00                   MOV         #0,R13
    0000098E              L676:                             
    0000098E 6ED3                   MOV         R13,R14
    00000990 D41B                   MOV.L       L753+30,R4 ; _projectiles
    00000992 4E08                   SHLL2       R14
    00000994 4E08                   SHLL2       R14
    00000996 4E00                   SHLL        R14
    00000998 3E4C                   ADD         R4,R14
    0000099A 63E0                   MOV.B       @R14,R3
    0000099C 2338                   TST         R3,R3
    0000099E 8957                   BT          L680
         Dodge.c   630        {
         Dodge.c   631            if(projectiles[i].enabled) {
         Dodge.c   632                // collision with edge of map
         Dodge.c   633                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    000009A0 54E1                   MOV.L       @(4,R14),R4
    000009A2 6143                   MOV         R4,R1
    000009A4 D314                   MOV.L       L753+22,R3 ; __lts




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009A6 430B                   JSR         @R3
    000009A8 E000                   MOV         #0,R0
    000009AA 8800                   CMP/EQ      #0,R0
    000009AC 8B15                   BF          L581
    000009AE D015                   MOV.L       L753+34,R0 ; H'43000000
    000009B0 D215                   MOV.L       L753+38,R2 ; __gts
    000009B2 420B                   JSR         @R2
    000009B4 6143                   MOV         R4,R1
    000009B6 8800                   CMP/EQ      #0,R0
    000009B8 8B0F                   BF          L581
    000009BA 51E2                   MOV.L       @(8,R14),R1
    000009BC D30E                   MOV.L       L753+22,R3 ; __lts
    000009BE 430B                   JSR         @R3
    000009C0 E000                   MOV         #0,R0
    000009C2 8800                   CMP/EQ      #0,R0
    000009C4 8B09                   BF          L581
    000009C6 D011                   MOV.L       L753+42,R0 ; H'42800000
    000009C8 D20F                   MOV.L       L753+38,R2 ; __gts
    000009CA 420B                   JSR         @R2
    000009CC 51E2                   MOV.L       @(8,R14),R1
    000009CE 8800                   CMP/EQ      #0,R0
    000009D0 8B03                   BF          L581
         Dodge.c   634                    // destroy projectile
         Dodge.c   635                    projectiles[i].enabled = false;
         Dodge.c   636                    continue;
         Dodge.c   637                }
         Dodge.c   638                // destroy particles that have been alive for more than an attack cycle
         Dodge.c   639                if(projectiles[i].framesAlive >= 99) { // each frame is 50ms and each cycle is 5000ms
    000009D2 E463                   MOV         #99,R4
    000009D4 52E7                   MOV.L       @(28,R14),R2
    000009D6 3243                   CMP/GE      R4,R2
    000009D8 8B1C                   BF          L681
    000009DA              L581:
         Dodge.c   640                    // destroy projectile
         Dodge.c   641                    projectiles[i].enabled = false;
    000009DA D40D                   MOV.L       L753+46,R4 ; _false
    000009DC 6240                   MOV.B       @R4,R2
         Dodge.c   642                    continue;
    000009DE A037                   BRA         L680
    000009E0 2E20                   MOV.B       R2,@R14
    000009E2              L753:                             
    000009E2 0000                   .DATA.W     0
    000009E4 3F800000               .DATA.L     H'3F800000
    000009E8 <00000000>             .DATA.L     __subs
    000009EC <00000000>             .DATA.L     __itos
    000009F0 <00000000>             .DATA.L     __adds
    000009F4 <00000000>             .DATA.L     __stoi
    000009F8 <00000000>             .DATA.L     __lts
    000009FC <00000000>             .DATA.L     __ges
    00000A00 <00000000>             .DATA.L     _projectiles
    00000A04 43000000               .DATA.L     H'43000000
    00000A08 <00000000>             .DATA.L     __gts
    00000A0C 42800000               .DATA.L     H'42800000
    00000A10 <00000000>             .DATA.L     _false
    00000A14              L681:                             
         Dodge.c   643                }
         Dodge.c   644                // move + detect player collisions




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   645                MoveProjectile(i,
         Dodge.c   646                    projectiles[i].x,
         Dodge.c   647                    projectiles[i].y,
         Dodge.c   648                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   649                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   650                );
    00000A14 5CE2                   MOV.L       @(8,R14),R12
    00000A16 61C3                   MOV         R12,R1
    00000A18 D234                   MOV.L       L755+4,R2  ; __adds
    00000A1A 420B                   JSR         @R2
    00000A1C 50E4                   MOV.L       @(16,R14),R0
    00000A1E 2F06                   MOV.L       R0,@-R15
    00000A20 5BE1                   MOV.L       @(4,R14),R11
    00000A22 61B3                   MOV         R11,R1
    00000A24 D331                   MOV.L       L755+4,R3  ; __adds
    00000A26 430B                   JSR         @R3
    00000A28 50E3                   MOV.L       @(12,R14),R0
    00000A2A 6703                   MOV         R0,R7
    00000A2C 66C3                   MOV         R12,R6
    00000A2E 65B3                   MOV         R11,R5
    00000A30 BE9A                   BSR         _MoveProjectile
    00000A32 64D3                   MOV         R13,R4
         Dodge.c   651                // update velocity
         Dodge.c   652                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    00000A34 D32D                   MOV.L       L755+4,R3  ; __adds
    00000A36 7F04                   ADD         #4,R15
    00000A38 50E5                   MOV.L       @(20,R14),R0
    00000A3A 430B                   JSR         @R3
    00000A3C 51E3                   MOV.L       @(12,R14),R1
    00000A3E 1E03                   MOV.L       R0,@(12,R14)
         Dodge.c   653                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    00000A40 50E6                   MOV.L       @(24,R14),R0
    00000A42 D22A                   MOV.L       L755+4,R2  ; __adds
    00000A44 420B                   JSR         @R2
    00000A46 51E4                   MOV.L       @(16,R14),R1
    00000A48 1E04                   MOV.L       R0,@(16,R14)
         Dodge.c   654    
         Dodge.c   655                projectiles[i].framesAlive++;
    00000A4A 53E7                   MOV.L       @(28,R14),R3
    00000A4C 7301                   ADD         #1,R3
    00000A4E 1E37                   MOV.L       R3,@(28,R14)
    00000A50              L680:                             
    00000A50 7D01                   ADD         #1,R13
    00000A52              L675:                             
    00000A52 9449                   MOV.W       L755,R4    ; H'0080
    00000A54 3D42                   CMP/HS      R4,R13
    00000A56 8B9A                   BF          L676
         Dodge.c   656            }
         Dodge.c   657        }
         Dodge.c   658    
         Dodge.c   659        // stop player from leaving map
         Dodge.c   660            if(playerX < 1)
    00000A58 D425                   MOV.L       L755+8,R4  ; _playerX
    00000A5A E501                   MOV         #1,R5
    00000A5C 6342                   MOV.L       @R4,R3
    00000A5E 3353                   CMP/GE      R5,R3
    00000A60 8D01                   BT/S        L682




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   661                playerX = 1;
         Dodge.c   662            if(playerX > 127)
    00000A62 E67F                   MOV         #127,R6
    00000A64 2452                   MOV.L       R5,@R4
    00000A66              L682:                             
    00000A66 6342                   MOV.L       @R4,R3
    00000A68 3367                   CMP/GT      R6,R3
    00000A6A 8B00                   BF          L683
         Dodge.c   663                playerX = 127;
    00000A6C 2462                   MOV.L       R6,@R4
    00000A6E              L683:                             
         Dodge.c   664            if(playerY < 1)
    00000A6E D421                   MOV.L       L755+12,R4 ; _playerY
    00000A70 6342                   MOV.L       @R4,R3
    00000A72 3353                   CMP/GE      R5,R3
    00000A74 8900                   BT          L684
         Dodge.c   665                playerY = 1;
    00000A76 2452                   MOV.L       R5,@R4
    00000A78              L684:                             
         Dodge.c   666            if(playerY > 63)
    00000A78 6342                   MOV.L       @R4,R3
    00000A7A E53F                   MOV         #63,R5
    00000A7C 3357                   CMP/GT      R5,R3
    00000A7E 8B00                   BF          L685
         Dodge.c   667                playerY = 63;
    00000A80 2452                   MOV.L       R5,@R4
    00000A82              L685:                             
         Dodge.c   668    }
    00000A82 4F26                   LDS.L       @R15+,PR
    00000A84 6BF6                   MOV.L       @R15+,R11
    00000A86 6CF6                   MOV.L       @R15+,R12
    00000A88 6DF6                   MOV.L       @R15+,R13
    00000A8A 000B                   RTS
    00000A8C 6EF6                   MOV.L       @R15+,R14
         Dodge.c   669    
         Dodge.c   670    void Controls()
    00000A8E              _Controls:                       ; function: Controls
                                                           ; frame size=8
    00000A8E 2FE6                   MOV.L       R14,@-R15
    00000A90 4F22                   STS.L       PR,@-R15
         Dodge.c   671    {
         Dodge.c   672        if(!quit) {
    00000A92 D219                   MOV.L       L755+16,R2 ; _quit
    00000A94 6320                   MOV.B       @R2,R3
    00000A96 2338                   TST         R3,R3
    00000A98 8B23                   BF          L686
         Dodge.c   673            if(IsKeyDown(KEY_CTRL_LEFT)) {
    00000A9A DE15                   MOV.L       L755+8,R14 ; _playerX
    00000A9C BB4E                   BSR         _KeyDown
    00000A9E E426                   MOV         #38,R4
    00000AA0 600C                   EXTU.B      R0,R0
    00000AA2 2008                   TST         R0,R0
    00000AA4 8D03                   BT/S        L687
         Dodge.c   674                playerX--;
         Dodge.c   675            }
         Dodge.c   676            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    00000AA6 E41B                   MOV         #27,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AA8 63E2                   MOV.L       @R14,R3
    00000AAA 73FF                   ADD         #-1,R3
    00000AAC 2E32                   MOV.L       R3,@R14
    00000AAE              L687:                             
    00000AAE BB45                   BSR         _KeyDown
    00000AB0 0009                   NOP
    00000AB2 600C                   EXTU.B      R0,R0
    00000AB4 2008                   TST         R0,R0
    00000AB6 8902                   BT          L688
         Dodge.c   677                playerX++;
    00000AB8 62E2                   MOV.L       @R14,R2
    00000ABA 7201                   ADD         #1,R2
    00000ABC 2E22                   MOV.L       R2,@R14
    00000ABE              L688:                             
         Dodge.c   678            }
         Dodge.c   679            if(IsKeyDown(KEY_CTRL_UP)) {
    00000ABE DE0D                   MOV.L       L755+12,R14; _playerY
    00000AC0 BB3C                   BSR         _KeyDown
    00000AC2 E41C                   MOV         #28,R4
    00000AC4 600C                   EXTU.B      R0,R0
    00000AC6 2008                   TST         R0,R0
    00000AC8 8D03                   BT/S        L689
         Dodge.c   680                playerY--;
         Dodge.c   681            }
         Dodge.c   682            if(IsKeyDown(KEY_CTRL_DOWN)) {
    00000ACA E425                   MOV         #37,R4
    00000ACC 63E2                   MOV.L       @R14,R3
    00000ACE 73FF                   ADD         #-1,R3
    00000AD0 2E32                   MOV.L       R3,@R14
    00000AD2              L689:                             
    00000AD2 BB33                   BSR         _KeyDown
    00000AD4 0009                   NOP
    00000AD6 600C                   EXTU.B      R0,R0
    00000AD8 2008                   TST         R0,R0
    00000ADA 8902                   BT          L686
         Dodge.c   683                playerY++;
    00000ADC 62E2                   MOV.L       @R14,R2
    00000ADE 7201                   ADD         #1,R2
    00000AE0 2E22                   MOV.L       R2,@R14
    00000AE2              L686:                             
         Dodge.c   684            }
         Dodge.c   685        }
         Dodge.c   686        
         Dodge.c   687    }
    00000AE2 4F26                   LDS.L       @R15+,PR
    00000AE4 000B                   RTS
    00000AE6 6EF6                   MOV.L       @R15+,R14
    00000AE8              L755:                             
    00000AE8 0080                   .DATA.W     H'0080
    00000AEA 0000                   .DATA.W     0
    00000AEC <00000000>             .DATA.L     __adds
    00000AF0 <00000000>             .DATA.L     _playerX
    00000AF4 <00000000>             .DATA.L     _playerY
    00000AF8 <00000000>             .DATA.L     _quit
         Dodge.c   688    
         Dodge.c   689    int randomInt(int max) {
    00000AFC              _randomInt:                      ; function: randomInt




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __muld, __divdr, __dtoi, __itod
    00000AFC 4F22                   STS.L       PR,@-R15
    00000AFE 7FF4                   ADD         #-12,R15
         Dodge.c   690        double normalized = (double)rand() / (double)RAND_MAX;
    00000B00 D35F                   MOV.L       L756,R3    ; _rand
    00000B02 430B                   JSR         @R3
    00000B04 2F42                   MOV.L       R4,@R15
    00000B06 7FF8                   ADD         #-8,R15
    00000B08 D25E                   MOV.L       L756+4,R2  ; __itod
    00000B0A 420B                   JSR         @R2
    00000B0C 2FF6                   MOV.L       R15,@-R15
    00000B0E E300                   MOV         #0,R3
    00000B10 D25E                   MOV.L       L756+12,R2 ; __divdr
    00000B12 2F36                   MOV.L       R3,@-R15
    00000B14 D35C                   MOV.L       L756+8,R3  ; H'40DFFFC0
    00000B16 2F36                   MOV.L       R3,@-R15
    00000B18 61F3                   MOV         R15,R1
    00000B1A 7114                   ADD         #20,R1
    00000B1C 420B                   JSR         @R2
    00000B1E 2F16                   MOV.L       R1,@-R15
         Dodge.c   691        return (int)(normalized * (double)max);
    00000B20 D358                   MOV.L       L756+4,R3  ; __itod
    00000B22 7FF8                   ADD         #-8,R15
    00000B24 50F2                   MOV.L       @(8,R15),R0
    00000B26 7FF8                   ADD         #-8,R15
    00000B28 430B                   JSR         @R3
    00000B2A 2FF6                   MOV.L       R15,@-R15
    00000B2C 52F6                   MOV.L       @(24,R15),R2
    00000B2E 2F26                   MOV.L       R2,@-R15
    00000B30 52F6                   MOV.L       @(24,R15),R2
    00000B32 2F26                   MOV.L       R2,@-R15
    00000B34 D156                   MOV.L       L756+16,R1 ; __muld
    00000B36 63F3                   MOV         R15,R3
    00000B38 7310                   ADD         #16,R3
    00000B3A 410B                   JSR         @R1
    00000B3C 2F36                   MOV.L       R3,@-R15
    00000B3E D255                   MOV.L       L756+20,R2 ; __dtoi
    00000B40 420B                   JSR         @R2
    00000B42 0009                   NOP
         Dodge.c   692    }
    00000B44 7F0C                   ADD         #12,R15
    00000B46 4F26                   LDS.L       @R15+,PR
    00000B48 000B                   RTS
    00000B4A 0009                   NOP
         Dodge.c   693    
         Dodge.c   694    #pragma region attacks
         Dodge.c   695    
         Dodge.c   696    // next projectile in this attack
         Dodge.c   697    void SpawnNext() {
    00000B4C              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=48
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __negs, __itos
    00000B4C 2FE6                   MOV.L       R14,@-R15
    00000B4E 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B50 2FC6                   MOV.L       R12,@-R15
    00000B52 ED10                   MOV         #16,R13
    00000B54 2FB6                   MOV.L       R11,@-R15
    00000B56 EB00                   MOV         #0,R11
    00000B58 DC50                   MOV.L       L756+28,R12; _currentAttack
    00000B5A 2FA6                   MOV.L       R10,@-R15
    00000B5C 2F96                   MOV.L       R9,@-R15
    00000B5E 2F86                   MOV.L       R8,@-R15
    00000B60 4F22                   STS.L       PR,@-R15
    00000B62 D94D                   MOV.L       L756+24,R9 ; _projectileIndex
    00000B64 60C2                   MOV.L       @R12,R0
    00000B66 8800                   CMP/EQ      #0,R0
    00000B68 8D0A                   BT/S        L585
    00000B6A 6E92                   MOV.L       @R9,R14
    00000B6C 8801                   CMP/EQ      #1,R0
    00000B6E 891D                   BT          L586
    00000B70 8802                   CMP/EQ      #2,R0
    00000B72 894D                   BT          L587
    00000B74 8803                   CMP/EQ      #3,R0
    00000B76 8B01                   BF          L757
    00000B78 A0A0                   BRA         L588
    00000B7A 0009                   NOP
    00000B7C              L757:                             
    00000B7C A0D5                   BRA         L589
    00000B7E 0009                   NOP
    00000B80              L585:                            ; case label 
         Dodge.c   698        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   699        #pragma region a whole bunch of variable declarations
         Dodge.c   700        int mod;
         Dodge.c   701        int mod2;
         Dodge.c   702        int xPos;
         Dodge.c   703        int yPos;
         Dodge.c   704        int direction;
         Dodge.c   705        float directionX;
         Dodge.c   706        float directionY;
         Dodge.c   707        int i;
         Dodge.c   708        int j;
         Dodge.c   709        int xToCenter;
         Dodge.c   710        int yToCenter;
         Dodge.c   711        #pragma endregion
         Dodge.c   712        switch (currentAttack)
         Dodge.c   713        {
         Dodge.c   714            case 0: // horizontally from either side, accelerating
         Dodge.c   715                mod = projectileIndex % 2;
    00000B80 60E3                   MOV         R14,R0
    00000B82 4011                   CMP/PZ      R0
    00000B84 8B01                   BF          L693
    00000B86 A005                   BRA         L694
    00000B88 C901                   AND         #1,R0
    00000B8A              L693:                             
    00000B8A 6007                   NOT         R0,R0
    00000B8C 7001                   ADD         #1,R0
    00000B8E C901                   AND         #1,R0
    00000B90 6007                   NOT         R0,R0
    00000B92 7001                   ADD         #1,R0
    00000B94              L694:                             
    00000B94 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   716                xPos = mod == 0 ? 1 : 128 - 1;
    00000B96 2448                   TST         R4,R4
    00000B98 8B01                   BF          L695
    00000B9A A001                   BRA         L696
    00000B9C ED01                   MOV         #1,R13
    00000B9E              L695:                             
    00000B9E ED7F                   MOV         #127,R13
    00000BA0              L696:                             
         Dodge.c   717                direction = mod == 0 ? 1 : -1;
    00000BA0 2448                   TST         R4,R4
    00000BA2 8B01                   BF          L758
    00000BA4 A0D3                   BRA         L740
    00000BA6 0009                   NOP
    00000BA8              L758:                             
    00000BA8 A0D4                   BRA         L582
    00000BAA EAFF                   MOV         #-1,R10
    00000BAC              L586:                            ; case label 
         Dodge.c   718                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, direction * 0.1f, 0);
         Dodge.c   719                break;
         Dodge.c   720            case 1: // circle, constant speed
         Dodge.c   721                directionX = (((projectileIndex + 8) % 16) - 8);
    00000BAC 60E3                   MOV         R14,R0
    00000BAE 7008                   ADD         #8,R0
    00000BB0 4011                   CMP/PZ      R0
    00000BB2 8B01                   BF          L699
    00000BB4 A005                   BRA         L700
    00000BB6 C90F                   AND         #15,R0
    00000BB8              L699:                             
    00000BB8 6007                   NOT         R0,R0
    00000BBA 7001                   ADD         #1,R0
    00000BBC C90F                   AND         #15,R0
    00000BBE 6007                   NOT         R0,R0
    00000BC0 7001                   ADD         #1,R0
    00000BC2              L700:                             
    00000BC2 D237                   MOV.L       L756+32,R2 ; __itos
    00000BC4 420B                   JSR         @R2
    00000BC6 70F8                   ADD         #-8,R0
    00000BC8 6D03                   MOV         R0,R13
         Dodge.c   722                directionY = ((projectileIndex % 16) - 8);
    00000BCA 60E3                   MOV         R14,R0
    00000BCC 4011                   CMP/PZ      R0
    00000BCE 8B01                   BF          L701
    00000BD0 A005                   BRA         L702
    00000BD2 C90F                   AND         #15,R0
    00000BD4              L701:                             
    00000BD4 6007                   NOT         R0,R0
    00000BD6 7001                   ADD         #1,R0
    00000BD8 C90F                   AND         #15,R0
    00000BDA 6007                   NOT         R0,R0
    00000BDC 7001                   ADD         #1,R0
    00000BDE              L702:                             
    00000BDE D230                   MOV.L       L756+32,R2 ; __itos
    00000BE0 420B                   JSR         @R2
    00000BE2 70F8                   ADD         #-8,R0
         Dodge.c   723                SpawnProjectile(64, 32, directionX, directionY, 0, 0);
    00000BE4 D52F                   MOV.L       L756+36,R5 ; H'42000000
    00000BE6 6E03                   MOV         R0,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BE8 D42F                   MOV.L       L756+40,R4 ; H'42800000
    00000BEA E300                   MOV         #0,R3
    00000BEC 2F36                   MOV.L       R3,@-R15
    00000BEE 67E3                   MOV         R14,R7
    00000BF0 2F36                   MOV.L       R3,@-R15
    00000BF2 BD4B                   BSR         _SpawnProjectile
    00000BF4 66D3                   MOV         R13,R6
         Dodge.c   724                SpawnProjectile(64, 32, -directionX, directionY, 0, 0);
    00000BF6 E300                   MOV         #0,R3
    00000BF8 D22C                   MOV.L       L756+44,R2 ; __negs
    00000BFA 67E3                   MOV         R14,R7
    00000BFC 2F36                   MOV.L       R3,@-R15
    00000BFE 2F36                   MOV.L       R3,@-R15
    00000C00 420B                   JSR         @R2
    00000C02 60D3                   MOV         R13,R0
    00000C04 D527                   MOV.L       L756+36,R5 ; H'42000000
    00000C06 D428                   MOV.L       L756+40,R4 ; H'42800000
    00000C08 BD40                   BSR         _SpawnProjectile
    00000C0A 6603                   MOV         R0,R6
         Dodge.c   725                break;
    00000C0C A0BA                   BRA         L692
    00000C0E 7F10                   ADD         #16,R15
    00000C10              L587:                            ; case label 
         Dodge.c   726            case 2: // vertically from either side, constant speed
         Dodge.c   727                if(projectileIndex % 5 == 0) {
    00000C10 D227                   MOV.L       L756+48,R2 ; __modls
    00000C12 61E3                   MOV         R14,R1
    00000C14 420B                   JSR         @R2
    00000C16 E005                   MOV         #5,R0
    00000C18 2008                   TST         R0,R0
    00000C1A 8901                   BT          L759
    00000C1C A0B2                   BRA         L692
    00000C1E 0009                   NOP
    00000C20              L759:                             
         Dodge.c   728                    if(projectileIndex % 10 == 0) {
    00000C20 D323                   MOV.L       L756+48,R3 ; __modls
    00000C22 61E3                   MOV         R14,R1
    00000C24 430B                   JSR         @R3
    00000C26 E00A                   MOV         #10,R0
    00000C28 2008                   TST         R0,R0
    00000C2A 8B14                   BF          L704
         Dodge.c   729                        for (i = 0; i < 16; i++)
    00000C2C 6AB3                   MOV         R11,R10
    00000C2E A00E                   BRA         L705
    00000C30 6EB3                   MOV         R11,R14
    00000C32              L706:                             
         Dodge.c   730                        {
         Dodge.c   731                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0);
    00000C32 E200                   MOV         #0,R2
    00000C34 D71F                   MOV.L       L756+52,R7 ; H'40000000
    00000C36 6623                   MOV         R2,R6
    00000C38 D319                   MOV.L       L756+32,R3 ; __itos
    00000C3A 6523                   MOV         R2,R5
    00000C3C 2F26                   MOV.L       R2,@-R15
    00000C3E 2F26                   MOV.L       R2,@-R15
    00000C40 430B                   JSR         @R3
    00000C42 60E3                   MOV         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C44 BD22                   BSR         _SpawnProjectile
    00000C46 6403                   MOV         R0,R4
    00000C48 7F08                   ADD         #8,R15
    00000C4A 7A01                   ADD         #1,R10
    00000C4C 7E08                   ADD         #8,R14
    00000C4E              L705:                             
    00000C4E 3AD3                   CMP/GE      R13,R10
    00000C50 8BEF                   BF          L706
    00000C52 A097                   BRA         L692
    00000C54 0009                   NOP
    00000C56              L704:                             
         Dodge.c   732                        }
         Dodge.c   733                    }
         Dodge.c   734                    else {
         Dodge.c   735                        for (i = 0; i < 16; i++)
    00000C56 6AB3                   MOV         R11,R10
    00000C58 A00E                   BRA         L708
    00000C5A EE04                   MOV         #4,R14
    00000C5C              L709:                             
         Dodge.c   736                        {
         Dodge.c   737                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0);
    00000C5C D716                   MOV.L       L756+56,R7 ; H'C0000000
    00000C5E E200                   MOV         #0,R2
    00000C60 D511                   MOV.L       L756+40,R5 ; H'42800000
    00000C62 6623                   MOV         R2,R6
    00000C64 D30E                   MOV.L       L756+32,R3 ; __itos
    00000C66 2F26                   MOV.L       R2,@-R15
    00000C68 2F26                   MOV.L       R2,@-R15
    00000C6A 430B                   JSR         @R3
    00000C6C 60E3                   MOV         R14,R0
    00000C6E BD0D                   BSR         _SpawnProjectile
    00000C70 6403                   MOV         R0,R4
    00000C72 7F08                   ADD         #8,R15
    00000C74 7A01                   ADD         #1,R10
    00000C76 7E08                   ADD         #8,R14
    00000C78              L708:                             
    00000C78 3AD3                   CMP/GE      R13,R10
    00000C7A 8BEF                   BF          L709
         Dodge.c   738                        }
         Dodge.c   739                    }
         Dodge.c   740                    
         Dodge.c   741                }
         Dodge.c   742                break;
    00000C7C A082                   BRA         L692
    00000C7E 0009                   NOP
    00000C80              L756:                             
    00000C80 <00000000>             .DATA.L     _rand
    00000C84 <00000000>             .DATA.L     __itod
    00000C88 40DFFFC0               .DATA.L     H'40DFFFC0
    00000C8C <00000000>             .DATA.L     __divdr
    00000C90 <00000000>             .DATA.L     __muld
    00000C94 <00000000>             .DATA.L     __dtoi
    00000C98 <00000000>             .DATA.L     _projectileIndex
    00000C9C <00000000>             .DATA.L     _currentAttack
    00000CA0 <00000000>             .DATA.L     __itos
    00000CA4 42000000               .DATA.L     H'42000000
    00000CA8 42800000               .DATA.L     H'42800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CAC <00000000>             .DATA.L     __negs
    00000CB0 <00000000>             .DATA.L     __modls
    00000CB4 40000000               .DATA.L     H'40000000
    00000CB8 C0000000               .DATA.L     H'C0000000
    00000CBC              L588:                            ; case label 
    00000CBC 987F                   MOV.W       L760,R8    ; H'0080
         Dodge.c   743            case 3: // random directions, accelerate back to center
         Dodge.c   744                for (i = 0; i < 16; i++)
    00000CBE A030                   BRA         L710
    00000CC0 6AD3                   MOV         R13,R10
    00000CC2              L711:                             
         Dodge.c   745                {
         Dodge.c   746                    xPos = randomInt(128);
    00000CC2 BF1B                   BSR         _randomInt
    00000CC4 6483                   MOV         R8,R4
    00000CC6 6E03                   MOV         R0,R14
         Dodge.c   747                    yPos = randomInt(64);
    00000CC8 BF18                   BSR         _randomInt
    00000CCA E440                   MOV         #64,R4
         Dodge.c   748                    directionX = (xPos - 64) * 0.01f  * 8;
    00000CCC D33C                   MOV.L       L760+2,R3  ; __itos
    00000CCE 6403                   MOV         R0,R4
    00000CD0 60E3                   MOV         R14,R0
    00000CD2 430B                   JSR         @R3
    00000CD4 70C0                   ADD         #-64,R0
    00000CD6 D13B                   MOV.L       L760+6,R1  ; H'3DA3D70A
    00000CD8 D23B                   MOV.L       L760+10,R2 ; __muls
    00000CDA 420B                   JSR         @R2
    00000CDC 0009                   NOP
    00000CDE 6D03                   MOV         R0,R13
         Dodge.c   749                    directionY = (yPos - 32) * 0.02f * 8;
    00000CE0 D337                   MOV.L       L760+2,R3  ; __itos
    00000CE2 6043                   MOV         R4,R0
    00000CE4 430B                   JSR         @R3
    00000CE6 70E0                   ADD         #-32,R0
    00000CE8 D138                   MOV.L       L760+14,R1 ; H'3E23D70A
    00000CEA D237                   MOV.L       L760+10,R2 ; __muls
    00000CEC 420B                   JSR         @R2
    00000CEE 0009                   NOP
         Dodge.c   750                    SpawnProjectile(64, 32, directionX, directionY, -directionX * 0.04f, -directionY * 0.04f);
    00000CF0 D335                   MOV.L       L760+10,R3 ; __muls
    00000CF2 6E03                   MOV         R0,R14
    00000CF4 6103                   MOV         R0,R1
    00000CF6 D036                   MOV.L       L760+18,R0 ; H'3D23D70A
    00000CF8 430B                   JSR         @R3
    00000CFA 0009                   NOP
    00000CFC D235                   MOV.L       L760+22,R2 ; __negs
    00000CFE 420B                   JSR         @R2
    00000D00 0009                   NOP
    00000D02 2F06                   MOV.L       R0,@-R15
    00000D04 D032                   MOV.L       L760+18,R0 ; H'3D23D70A
    00000D06 D330                   MOV.L       L760+10,R3 ; __muls
    00000D08 430B                   JSR         @R3
    00000D0A 61D3                   MOV         R13,R1
    00000D0C D231                   MOV.L       L760+22,R2 ; __negs
    00000D0E 420B                   JSR         @R2
    00000D10 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D12 67E3                   MOV         R14,R7
    00000D14 D530                   MOV.L       L760+26,R5 ; H'42000000
    00000D16 2F06                   MOV.L       R0,@-R15
    00000D18 D430                   MOV.L       L760+30,R4 ; H'42800000
    00000D1A BCB7                   BSR         _SpawnProjectile
    00000D1C 66D3                   MOV         R13,R6
    00000D1E 7F08                   ADD         #8,R15
    00000D20 7AFF                   ADD         #-1,R10
    00000D22              L710:                             
    00000D22 2AA8                   TST         R10,R10
    00000D24 8BCD                   BF          L711
         Dodge.c   751                }
         Dodge.c   752                
         Dodge.c   753                break;
    00000D26 A02D                   BRA         L692
    00000D28 0009                   NOP
    00000D2A              L589:                            ; default label 
         Dodge.c   754            default:
         Dodge.c   755                mod2 = projectileIndex % 2;
    00000D2A 60E3                   MOV         R14,R0
    00000D2C 4011                   CMP/PZ      R0
    00000D2E 8B01                   BF          L712
    00000D30 A005                   BRA         L713
    00000D32 C901                   AND         #1,R0
    00000D34              L712:                             
    00000D34 6007                   NOT         R0,R0
    00000D36 7001                   ADD         #1,R0
    00000D38 C901                   AND         #1,R0
    00000D3A 6007                   NOT         R0,R0
    00000D3C 7001                   ADD         #1,R0
    00000D3E              L713:                             
    00000D3E 6403                   MOV         R0,R4
         Dodge.c   756                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000D40 2448                   TST         R4,R4
    00000D42 8B01                   BF          L714
    00000D44 A001                   BRA         L715
    00000D46 ED01                   MOV         #1,R13
    00000D48              L714:                             
    00000D48 ED7F                   MOV         #127,R13
    00000D4A              L715:                             
         Dodge.c   757                direction = mod2 == 0 ? 1 : -1;
    00000D4A 2448                   TST         R4,R4
    00000D4C 8B01                   BF          L716
    00000D4E              L740:                             
    00000D4E A001                   BRA         L582
    00000D50 EA01                   MOV         #1,R10
    00000D52              L716:                             
    00000D52 EAFF                   MOV         #-1,R10
    00000D54              L582:
         Dodge.c   758                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
    00000D54 D21A                   MOV.L       L760+2,R2  ; __itos
    00000D56 E300                   MOV         #0,R3
    00000D58 2F36                   MOV.L       R3,@-R15
    00000D5A 420B                   JSR         @R2
    00000D5C 60A3                   MOV         R10,R0
    00000D5E D120                   MOV.L       L760+34,R1 ; H'3DCCCCCD
    00000D60 D219                   MOV.L       L760+10,R2 ; __muls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D62 420B                   JSR         @R2
    00000D64 0009                   NOP
    00000D66 6733                   MOV         R3,R7
    00000D68 D215                   MOV.L       L760+2,R2  ; __itos
    00000D6A 6633                   MOV         R3,R6
    00000D6C 2F06                   MOV.L       R0,@-R15
    00000D6E 60E3                   MOV         R14,R0
    00000D70 7001                   ADD         #1,R0
    00000D72 420B                   JSR         @R2
    00000D74 4008                   SHLL2       R0
    00000D76 6503                   MOV         R0,R5
    00000D78 D111                   MOV.L       L760+2,R1  ; __itos
    00000D7A 410B                   JSR         @R1
    00000D7C 60D3                   MOV         R13,R0
    00000D7E BC85                   BSR         _SpawnProjectile
    00000D80 6403                   MOV         R0,R4
    00000D82 7F08                   ADD         #8,R15
         Dodge.c   759                break;
    00000D84              L692:                             
         Dodge.c   760        }
         Dodge.c   761    
         Dodge.c   762        projectileIndex++;
    00000D84 6292                   MOV.L       @R9,R2
    00000D86 7201                   ADD         #1,R2
    00000D88 2922                   MOV.L       R2,@R9
         Dodge.c   763        if(projectileIndex > maxProjectiles) {
    00000D8A 6123                   MOV         R2,R1
    00000D8C D015                   MOV.L       L760+38,R0 ; _maxProjectiles
    00000D8E 6302                   MOV.L       @R0,R3
    00000D90 3137                   CMP/GT      R3,R1
    00000D92 8B0B                   BF          L718
         Dodge.c   764            KillTimer(ID_USER_TIMER3); // stop this attack
    00000D94 D114                   MOV.L       L760+42,R1 ; _KillTimer
    00000D96 410B                   JSR         @R1
    00000D98 E403                   MOV         #3,R4
         Dodge.c   765            currentAttack++;
    00000D9A 63C2                   MOV.L       @R12,R3
         Dodge.c   766            if(currentAttack >= attacksTotal)
    00000D9C D013                   MOV.L       L760+46,R0 ; _attacksTotal
    00000D9E 7301                   ADD         #1,R3
    00000DA0 2C32                   MOV.L       R3,@R12
    00000DA2 6133                   MOV         R3,R1
    00000DA4 6202                   MOV.L       @R0,R2
    00000DA6 3123                   CMP/GE      R2,R1
    00000DA8 8B00                   BF          L718
         Dodge.c   767                currentAttack = 0;
    00000DAA 2CB2                   MOV.L       R11,@R12
    00000DAC              L718:                             
         Dodge.c   768        }
         Dodge.c   769    }
    00000DAC 4F26                   LDS.L       @R15+,PR
    00000DAE 68F6                   MOV.L       @R15+,R8
    00000DB0 69F6                   MOV.L       @R15+,R9
    00000DB2 6AF6                   MOV.L       @R15+,R10
    00000DB4 6BF6                   MOV.L       @R15+,R11
    00000DB6 6CF6                   MOV.L       @R15+,R12
    00000DB8 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DBA 000B                   RTS
    00000DBC 6EF6                   MOV.L       @R15+,R14
    00000DBE              L760:                             
    00000DBE 0080                   .DATA.W     H'0080
    00000DC0 <00000000>             .DATA.L     __itos
    00000DC4 3DA3D70A               .DATA.L     H'3DA3D70A
    00000DC8 <00000000>             .DATA.L     __muls
    00000DCC 3E23D70A               .DATA.L     H'3E23D70A
    00000DD0 3D23D70A               .DATA.L     H'3D23D70A
    00000DD4 <00000000>             .DATA.L     __negs
    00000DD8 42000000               .DATA.L     H'42000000
    00000DDC 42800000               .DATA.L     H'42800000
    00000DE0 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000DE4 <00000000>             .DATA.L     _maxProjectiles
    00000DE8 <00000000>             .DATA.L     _KillTimer
    00000DEC <00000000>             .DATA.L     _attacksTotal
         Dodge.c   770    // the next "attack"
         Dodge.c   771    void NextProjectiles() {
    00000DF0              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   772        projectileIndex = 0;
    00000DF0 D233                   MOV.L       L761+4,R2  ; _projectileIndex
    00000DF2 E300                   MOV         #0,R3
         Dodge.c   773    
         Dodge.c   774        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues
         Dodge.c   775        switch (currentAttack)
    00000DF4 D433                   MOV.L       L761+8,R4  ; _maxProjectiles
    00000DF6 2232                   MOV.L       R3,@R2
    00000DF8 D333                   MOV.L       L761+12,R3 ; _currentAttack
    00000DFA 6032                   MOV.L       @R3,R0
    00000DFC 8800                   CMP/EQ      #0,R0
    00000DFE 8D10                   BT/S        L742
    00000E00 E510                   MOV         #16,R5
    00000E02 8801                   CMP/EQ      #1,R0
    00000E04 8905                   BT          L591
    00000E06 8802                   CMP/EQ      #2,R0
    00000E08 8906                   BT          L592
    00000E0A 8803                   CMP/EQ      #3,R0
    00000E0C 8906                   BT          L593
    00000E0E A008                   BRA         L742
    00000E10 0009                   NOP
    00000E12              L591:                            ; case label 
         Dodge.c   776        {
         Dodge.c   777            case 0:
         Dodge.c   778                maxProjectiles = 16;
         Dodge.c   779                break;
         Dodge.c   780            case 1:
         Dodge.c   781                maxProjectiles = 32;
    00000E12 E020                   MOV         #32,R0
         Dodge.c   782                break;
    00000E14 A006                   BRA         L720
    00000E16 2402                   MOV.L       R0,@R4
    00000E18              L592:                            ; case label 
         Dodge.c   783            case 2:
         Dodge.c   784                maxProjectiles = 15;
         Dodge.c   785                break;
    00000E18 A001                   BRA         L741




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E1A E10F                   MOV         #15,R1
    00000E1C              L593:                            ; case label 
         Dodge.c   786            case 3:
         Dodge.c   787                maxProjectiles = 2;
    00000E1C E102                   MOV         #2,R1
         Dodge.c   788                break;
    00000E1E              L741:                             
    00000E1E A001                   BRA         L720
    00000E20 2412                   MOV.L       R1,@R4
    00000E22              L742:                             
         Dodge.c   789            default:
         Dodge.c   790                maxProjectiles = 16;
    00000E22 2452                   MOV.L       R5,@R4
    00000E24              L720:                             
         Dodge.c   791                break;
         Dodge.c   792        }
         Dodge.c   793    
         Dodge.c   794        SetTimer(ID_USER_TIMER3, 100, SpawnNext);
    00000E24 D629                   MOV.L       L761+16,R6 ; _SpawnNext
    00000E26 E564                   MOV         #100,R5
    00000E28 D329                   MOV.L       L761+20,R3 ; _SetTimer
    00000E2A 432B                   JMP         @R3
    00000E2C E403                   MOV         #3,R4
         Dodge.c   795    }
         Dodge.c   796    
         Dodge.c   797    #pragma endregion
         Dodge.c   798    
         Dodge.c   799    #pragma endregion
         Dodge.c   800    
         Dodge.c   801    void GameFrame() {
    00000E2E              _GameFrame:                      ; function: GameFrame
                                                           ; frame size=4
    00000E2E 4F22                   STS.L       PR,@-R15
         Dodge.c   802        // increment frame count
         Dodge.c   803        timer++;
    00000E30 D428                   MOV.L       L761+24,R4 ; _timer
    00000E32 6342                   MOV.L       @R4,R3
    00000E34 7301                   ADD         #1,R3
         Dodge.c   804        RenderScreen();
    00000E36 BC71                   BSR         _RenderScreen
    00000E38 2432                   MOV.L       R3,@R4
         Dodge.c   805        Controls();
    00000E3A BE28                   BSR         _Controls
    00000E3C 0009                   NOP
         Dodge.c   806        Physics();
    00000E3E AD9F                   BRA         _Physics
    00000E40 4F26                   LDS.L       @R15+,PR
         Dodge.c   807    }
         Dodge.c   808    
         Dodge.c   809    /** Add-in entry point
         Dodge.c   810     * 
         Dodge.c   811     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   812     *             strip_no - Strip number from eActivity
         Dodge.c   813     * 
         Dodge.c   814     * Returns:    NOT error
         Dodge.c   815     */
         Dodge.c   816    // Start function




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   817    int AddIn_main(int app_mode, unsigned short strip_no)
    00000E42              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=20
    00000E42 2FE6                   MOV.L       R14,@-R15
    00000E44 2FD6                   MOV.L       R13,@-R15
    00000E46 4F22                   STS.L       PR,@-R15
    00000E48 DD23                   MOV.L       L761+28,R13; _true
    00000E4A 7FF8                   ADD         #-8,R15
         Dodge.c   818    {
         Dodge.c   819        unsigned int i, j; // Iteration variables
         Dodge.c   820        unsigned char str[3];
         Dodge.c   821        unsigned int key;  // Keyboard input
         Dodge.c   822    
         Dodge.c   823        // Clear out the display
         Dodge.c   824        Bdisp_AllClr_DDVRAM();
    00000E4C D323                   MOV.L       L761+32,R3 ; _Bdisp_AllClr_DDVRAM
    00000E4E 430B                   JSR         @R3
    00000E50 0009                   NOP
         Dodge.c   825        RenderMainMenu();
    00000E52 BA6C                   BSR         _RenderMainMenu
    00000E54 0009                   NOP
    00000E56 DE1F                   MOV.L       L761+24,R14; _timer
         Dodge.c   826        
         Dodge.c   827        while(true) { // menu
    00000E58 A016                   BRA         L721
    00000E5A 0009                   NOP
    00000E5C              L722:                             
         Dodge.c   828            timer++; // we will use number of cycles until the player starts as our random seed, as it is high
                         +ly unlikely to be the same
    00000E5C 62E2                   MOV.L       @R14,R2
    00000E5E 7201                   ADD         #1,R2
    00000E60 2E22                   MOV.L       R2,@R14
         Dodge.c   829            if(IsKeyDown(KEY_CTRL_EXE)) {
    00000E62 B96B                   BSR         _KeyDown
    00000E64 E41F                   MOV         #31,R4
    00000E66 600C                   EXTU.B      R0,R0
    00000E68 2008                   TST         R0,R0
    00000E6A 8B10                   BF          L724
         Dodge.c   830                break;
         Dodge.c   831            }
         Dodge.c   832            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000E6C B966                   BSR         _KeyDown
    00000E6E E430                   MOV         #48,R4
    00000E70 600C                   EXTU.B      R0,R0
    00000E72 2008                   TST         R0,R0
    00000E74 8B04                   BF          L726
    00000E76 B961                   BSR         _KeyDown
    00000E78 E42F                   MOV         #47,R4
    00000E7A 600C                   EXTU.B      R0,R0
    00000E7C 2008                   TST         R0,R0
    00000E7E 8903                   BT          L721
    00000E80              L726:                             
         Dodge.c   833            {
         Dodge.c   834                AppQuit();
    00000E80 B9F4                   BSR         _AppQuit
    00000E82 0009                   NOP
         Dodge.c   835                break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E84 A003                   BRA         L724
    00000E86 0009                   NOP
    00000E88              L721:                             
    00000E88 62D0                   MOV.B       @R13,R2
    00000E8A 2228                   TST         R2,R2
    00000E8C 8BE6                   BF          L722
    00000E8E              L724:                             
         Dodge.c   836            }
         Dodge.c   837        }
         Dodge.c   838        srand(timer);
    00000E8E D314                   MOV.L       L761+36,R3 ; _srand
    00000E90 430B                   JSR         @R3
    00000E92 64E2                   MOV.L       @R14,R4
         Dodge.c   839        timer = 0;
         Dodge.c   840    
         Dodge.c   841        Bdisp_AllClr_DDVRAM();
    00000E94 D311                   MOV.L       L761+32,R3 ; _Bdisp_AllClr_DDVRAM
    00000E96 E200                   MOV         #0,R2
    00000E98 430B                   JSR         @R3
    00000E9A 2E22                   MOV.L       R2,@R14
         Dodge.c   842    
         Dodge.c   843        // Set up timers for game loop and attacks
         Dodge.c   844        SetTimer(ID_USER_TIMER1, 50, GameFrame);
    00000E9C D611                   MOV.L       L761+40,R6 ; _GameFrame
    00000E9E E532                   MOV         #50,R5
    00000EA0 D20B                   MOV.L       L761+20,R2 ; _SetTimer
    00000EA2 420B                   JSR         @R2
    00000EA4 E401                   MOV         #1,R4
         Dodge.c   845        SetTimer(ID_USER_TIMER2, 5000, NextProjectiles); // should be 5000, shortened for testing
    00000EA6 D610                   MOV.L       L761+44,R6 ; _NextProjectiles
    00000EA8 9508                   MOV.W       L761,R5    ; H'1388
    00000EAA D309                   MOV.L       L761+20,R3 ; _SetTimer
    00000EAC 430B                   JSR         @R3
    00000EAE E402                   MOV         #2,R4
         Dodge.c   846    
         Dodge.c   847        // Set quit handler
         Dodge.c   848        SetQuitHandler(AppQuit);
    00000EB0 D40E                   MOV.L       L761+48,R4 ; _AppQuit
    00000EB2 D20F                   MOV.L       L761+52,R2 ; _SetQuitHandler
    00000EB4 420B                   JSR         @R2
    00000EB6 0009                   NOP
         Dodge.c   849    
         Dodge.c   850        // The main thread manages the keys
         Dodge.c   851        while (IsKeyUp(KEY_CTRL_MENU))
    00000EB8 A039                   BRA         L727
    00000EBA 0009                   NOP
    00000EBC              L761:                             
    00000EBC 1388                   .DATA.W     H'1388
    00000EBE 0000                   .DATA.W     0
    00000EC0 <00000000>             .DATA.L     _projectileIndex
    00000EC4 <00000000>             .DATA.L     _maxProjectiles
    00000EC8 <00000000>             .DATA.L     _currentAttack
    00000ECC <00000000>             .DATA.L     _SpawnNext
    00000ED0 <00000000>             .DATA.L     _SetTimer
    00000ED4 <00000000>             .DATA.L     _timer
    00000ED8 <00000000>             .DATA.L     _true
    00000EDC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EE0 <00000000>             .DATA.L     _srand
    00000EE4 <00000000>             .DATA.L     _GameFrame
    00000EE8 <00000000>             .DATA.L     _NextProjectiles
    00000EEC <00000000>             .DATA.L     _AppQuit
    00000EF0 <00000000>             .DATA.L     _SetQuitHandler
    00000EF4              L728:                             
         Dodge.c   852        {
         Dodge.c   853            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00000EF4 DE14                   MOV.L       L762,R14   ; _GetKeyWait
    00000EF6 67F3                   MOV         R15,R7
    00000EF8 E600                   MOV         #0,R6
    00000EFA 6563                   MOV         R6,R5
    00000EFC 4E0B                   JSR         @R14
    00000EFE 6463                   MOV         R6,R4
         Dodge.c   854        
         Dodge.c   855            if (keyResp == KEYREP_KEYEVENT)
    00000F00 8801                   CMP/EQ      #1,R0
    00000F02 8F06                   BF/S        L729
    00000F04 6403                   MOV         R0,R4
         Dodge.c   856            {
         Dodge.c   857                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    00000F06 60F2                   MOV.L       @R15,R0
    00000F08 8830                   CMP/EQ      #48,R0
    00000F0A 890C                   BT          L583
    00000F0C 60F2                   MOV.L       @R15,R0
    00000F0E 882F                   CMP/EQ      #47,R0
    00000F10 8909                   BT          L583
    00000F12              L729:                             
         Dodge.c   858                {
         Dodge.c   859                    AppQuit();
         Dodge.c   860                    break;
         Dodge.c   861                }
         Dodge.c   862            }
         Dodge.c   863    
         Dodge.c   864            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000F12 B913                   BSR         _KeyDown
    00000F14 E430                   MOV         #48,R4
    00000F16 600C                   EXTU.B      R0,R0
    00000F18 2008                   TST         R0,R0
    00000F1A 8B04                   BF          L583
    00000F1C B90E                   BSR         _KeyDown
    00000F1E E42F                   MOV         #47,R4
    00000F20 600C                   EXTU.B      R0,R0
    00000F22 2008                   TST         R0,R0
    00000F24 8903                   BT          L727
    00000F26              L583:
         Dodge.c   865            {
         Dodge.c   866                AppQuit();
    00000F26 B9A1                   BSR         _AppQuit
    00000F28 0009                   NOP
         Dodge.c   867                break;
    00000F2A A005                   BRA         L732
    00000F2C 0009                   NOP
    00000F2E              L727:                             
    00000F2E B905                   BSR         _KeyDown
    00000F30 E430                   MOV         #48,R4
    00000F32 600C                   EXTU.B      R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F34 2008                   TST         R0,R0
    00000F36 89DD                   BT          L728
    00000F38              L732:                             
         Dodge.c   868            }
         Dodge.c   869        }
         Dodge.c   870    
         Dodge.c   871        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   872        AppQuit();
    00000F38 B998                   BSR         _AppQuit
    00000F3A 0009                   NOP
         Dodge.c   873    
         Dodge.c   874        // At the end, return application status
         Dodge.c   875        return true;
    00000F3C 60D0                   MOV.B       @R13,R0
         Dodge.c   876    }
    00000F3E 7F08                   ADD         #8,R15
    00000F40 4F26                   LDS.L       @R15+,PR
    00000F42 6DF6                   MOV.L       @R15+,R13
    00000F44 000B                   RTS
    00000F46 6EF6                   MOV.L       @R15+,R14
    00000F48              L762:                             
    00000F48 <00000000>             .DATA.L     _GetKeyWait
         Dodge.c   877    
         Dodge.c   878    #pragma region Do not touch
         Dodge.c   879    
         Dodge.c   880    // Source code from here down should not be changed according to the
         Dodge.c   881    // CASIO SDK sample project.
         Dodge.c   882    
         Dodge.c   883    #pragma section _BR_Size
         Dodge.c   884    unsigned long BR_Size;
         Dodge.c   885    #pragma section
         Dodge.c   886    
         Dodge.c   887    #pragma section _TOP
         Dodge.c   888    
         Dodge.c   889    //****************************************************************************
         Dodge.c   890    //  InitializeSystem
         Dodge.c   891    //
         Dodge.c   892    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   893    //              OptionNum : Option Number (only eActivity)
         Dodge.c   894    //
         Dodge.c   895    //  retval  :   1 = No error / 0 = Error
         Dodge.c   896    //
         Dodge.c   897    //****************************************************************************
         Dodge.c   898    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   899    {
         Dodge.c   900        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L763+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L763:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   901    }
         Dodge.c   902    
         Dodge.c   903    #pragma section




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   904    
         Dodge.c   905    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _true:                           ; static: true
    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000004               .DATA.L     H'00000004
    0000001C              L445:
    0000001C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000000F0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000001C4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000298 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    0000036C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000440 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101010101   
             0101010101   
             0101         
    00000514 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000101   
             0101010101   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100010000   
             0001000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000005E8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010001 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0001000100   
             0000010000   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000006BC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0001000100   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0000010000   
             0001000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000100   
             0100         
    00000790 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000101 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,
             0001000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0001000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000864 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0000010100   
             0000000000   
             0100000000   
             0000000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000938 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0000000000   
             0100010101   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0101010101   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0100         
    00000A0C 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'00,H'00,H'00
             0001000000   
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0001000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000         
    00000AE0 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000         
    00000BB4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0101010101   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000010000   
             0000000000   
             0000000000   
             0000         
    00000C88 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0100000001 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0001000000   
             0001010100   
             0000000100   
             0100010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010101   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000         
    00000D5C 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010101 +                       H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000101 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0101010101 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,
             0100000000 +                       H'00,H'00,H'00,H'01
             0100000001   
             0000000100   
             0000000100   
             0000010000   
             0000000100   
             0000000000   
             0100000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000001   
             0000000001   
             0000000100   
             0000010000   
             0000010000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0001000000   
             0000010000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0001000000   
             0001         
    00000E30 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000001   
             0101010101   
             0000000000   
             0000000000   
             0000000101   
             0101010100   
             0000000000   
             0000000001   
             0000000001   
             0101010100   
             0000000001   
             0101000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000100   
             0000000000   
             0000000100   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000F04 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000010000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000FD8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0100000001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0001000100   
             0000000001   
             0100000000   
             0100000000   
             0000010101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0101010000   
             0000000000   
             0000000001   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000         
    000010AC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0100010000   
             0000000000   
             0000000100   
             0000000000   
             0000010000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000010000   
             0000000000   
             0000000000   
             0100010001   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0100000000   
             0000         
    00001180 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000100 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0001000000   
             0100000100   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000010000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0001010101   
             0101010000   
             0000000000   
             0000000000   
             0000000001   
             0100         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001254 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0101000000   
             0000010100   
             0000000000   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010101   
             0100000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001328 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000010101   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    000013FC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000101 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000000000   
             0101010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0100         
    000014D0 0100000000             .DATA.B     H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0000000000   
             0000000000   
             0000000000   
             0101000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0001010000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000         
    000015A4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0101010101   
             0101010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001678 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0100000001 +                       H'00,H'00,H'00,H'00
             0000000001   
             0000000000   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000100   
             0000000000   
             0000000100   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000010000   
             0000010000   
             0000000000   
             0000         
    0000174C 0100000100             .DATA.B     H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001820 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000         
    000018F4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000019C8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001A9C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001B70 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000         
    00001C44 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001D18 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001DEC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001EC0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000         
    00001F94 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             00           
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040
    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _paused:                         ; static: paused
    00000010 01                     .DATA.B     H'01
    00000011              _quit:                           ; static: quit
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              _timer:                          ; static: timer
    00000014 00000000               .DATA.L     H'00000000
    00000018              _flicker:                        ; static: flicker
    00000018 01                     .DATA.B     H'01
    00000019              _damaged:                        ; static: damaged
    00000019 00                     .DATA.B     H'00
    0000001A 00000002               .RES.W      1
    0000001C              _flickerOffset:                  ; static: flickerOffset
    0000001C 00000000               .DATA.L     H'00000000
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00001000               .RES.L      1024
    00001000              _projectileIndex:                ; static: projectileIndex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001000 00000004               .RES.L      1
    00001004              _maxProjectiles:                 ; static: maxProjectiles
    00001004 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1
























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 18-Mar-2023 11:07:40  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        58




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      905



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000F4C Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000201C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000020 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00001008 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00003FA0 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           31
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          50
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           219






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmk2C71.tmp 

