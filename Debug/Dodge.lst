SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    // the skeleton of this code was stolen from https://github.com/itisrazza/casio-pong
         Dodge.c     2    
         Dodge.c     3    
         Dodge.c     4    // Import some libraries
         Dodge.c     5    #include "stdio.h"    // Standard IO
         Dodge.c     6    #include <stdlib.h>
         Dodge.c     7    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     8    #include "dispbios.h" // Display BIOS
         Dodge.c     9    #include "timer.h"    // Timer
         Dodge.c    10    
         Dodge.c    11    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    12    
         Dodge.c    13    #define __KEYBIOS_H__
         Dodge.c    14    #define KEY_CHAR_0 71
         Dodge.c    15    #define KEY_CHAR_1 72
         Dodge.c    16    #define KEY_CHAR_2 62
         Dodge.c    17    #define KEY_CHAR_3 52
         Dodge.c    18    #define KEY_CHAR_4 73
         Dodge.c    19    #define KEY_CHAR_5 63
         Dodge.c    20    #define KEY_CHAR_6 53
         Dodge.c    21    #define KEY_CHAR_7 74
         Dodge.c    22    #define KEY_CHAR_8 64
         Dodge.c    23    #define KEY_CHAR_9 54
         Dodge.c    24    #define KEY_CHAR_DP 61
         Dodge.c    25    #define KEY_CHAR_EXP 51
         Dodge.c    26    #define KEY_CHAR_PMINUS 41
         Dodge.c    27    #define KEY_CHAR_PLUS 42
         Dodge.c    28    #define KEY_CHAR_MINUS 32
         Dodge.c    29    #define KEY_CHAR_MULT 43
         Dodge.c    30    #define KEY_CHAR_DIV 33
         Dodge.c    31    #define KEY_CHAR_FRAC 75
         Dodge.c    32    #define KEY_CHAR_LPAR 55
         Dodge.c    33    #define KEY_CHAR_RPAR 45
         Dodge.c    34    #define KEY_CHAR_COMMA 35
         Dodge.c    35    #define KEY_CHAR_STORE 25
         Dodge.c    36    #define KEY_CHAR_LOG 66
         Dodge.c    37    #define KEY_CHAR_LN 56
         Dodge.c    38    #define KEY_CHAR_SIN 46
         Dodge.c    39    #define KEY_CHAR_COS 36
         Dodge.c    40    #define KEY_CHAR_TAN 26
         Dodge.c    41    #define KEY_CHAR_SQUARE 67
         Dodge.c    42    #define KEY_CHAR_POW 57
         Dodge.c    43    #define KEY_CTRL_EXE 31
         Dodge.c    44    #define KEY_CTRL_DEL 44
         Dodge.c    45    #define KEY_CTRL_AC 32
         Dodge.c    46    #define KEY_CTRL_FD 65
         Dodge.c    47    #define KEY_CTRL_EXIT 47
         Dodge.c    48    #define KEY_CTRL_SHIFT 78
         Dodge.c    49    #define KEY_CTRL_ALPHA 77
         Dodge.c    50    #define KEY_CTRL_OPTN 68
         Dodge.c    51    #define KEY_CTRL_VARS 58
         Dodge.c    52    #define KEY_CTRL_UP 28
         Dodge.c    53    #define KEY_CTRL_DOWN 37
         Dodge.c    54    #define KEY_CTRL_LEFT 38




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_RIGHT 27
         Dodge.c    56    #define KEY_CTRL_F1 79
         Dodge.c    57    #define KEY_CTRL_F2 69
         Dodge.c    58    #define KEY_CTRL_F3 59
         Dodge.c    59    #define KEY_CTRL_F4 49
         Dodge.c    60    #define KEY_CTRL_F5 39
         Dodge.c    61    #define KEY_CTRL_F6 29
         Dodge.c    62    #define KEY_CTRL_MENU 48
         Dodge.c    63    #ifndef OS2Change
         Dodge.c    64    #define OS2Change
         Dodge.c    65    #ifndef OS2Change_GetOS2
         Dodge.c    66    #define OS2Change_GetOS2
         Dodge.c    67    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    68    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    69    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    70    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    71    {
         Dodge.c    72    unsigned char mainversion;
         Dodge.c    73    unsigned char minorversion;
         Dodge.c    74    unsigned short release;
         Dodge.c    75    unsigned short build;
         Dodge.c    76    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L729+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    77    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L729+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L729+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    78    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 201B                   OR          R1,R0
         Dodge.c    79    #define isOS2 (OSVersionAsInt() >= 0x02020000)
         Dodge.c    80    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    81    #endif
         Dodge.c    82    #ifndef OS2Change_Keyboard
         Dodge.c    83    #define OS2Change_Keyboard
         Dodge.c    84    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    85    {
         Dodge.c    86    char i;
         Dodge.c    87    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L591:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L591
         Dodge.c    88    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    89    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    90    {
         Dodge.c    91    unsigned char result=0;
         Dodge.c    92    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    93    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    94    char*PORTB=(void*)0xA4000122;
         Dodge.c    95    char*PORTM=(void*)0xA4000138;
         Dodge.c    96    char*PORTA=(void*)0xA4000120;
         Dodge.c    97    short smask;
         Dodge.c    98    char cmask;
         Dodge.c    99    unsigned char column, row;
         Dodge.c   100    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c   101    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   102    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L592
    00000072 A005                   BRA         L593




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000074 C907                   AND         #7,R0
    00000076              L592:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L593:                             
         Dodge.c   103    cmask = ~( 1 << ( row %8) );
         Dodge.c   104    if(row <8)
    00000080 994B                   MOV.W       L729,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L729+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L729+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L729+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L594
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   105    {
         Dodge.c   106      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   107      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   108      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   109      *PORTB = cmask;
    000000AE D221                   MOV.L       L729+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   110      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L723
    000000B8 CB0F                   OR          #15,R0
    000000BA              L594:                             
         Dodge.c   111    }
         Dodge.c   112    else
         Dodge.c   113    {
         Dodge.c   114      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   115      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
         Dodge.c   116      delay();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
         Dodge.c   117      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L729+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   118      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L723:                             
         Dodge.c   119    }
         Dodge.c   120    
         Dodge.c   121    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   122    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L729+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   123    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   124    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   125    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   126    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   127    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L729+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   128    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   129    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   130    
         Dodge.c   131    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   132    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L729:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   133    
         Dodge.c   134    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   135    {
         Dodge.c   136    unsigned short key[8];
         Dodge.c   137    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L730,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L730+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L597
         Dodge.c   138    if(isOS2)
         Dodge.c   139    {
         Dodge.c   140      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L730+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   141      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L730+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   142     
         Dodge.c   143      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000174 D24B                   MOV.L       L730+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L599
    000001A4 CA01                   XOR         #1,R0
    000001A6              L597:                             
         Dodge.c   144    }
         Dodge.c   145    else
         Dodge.c   146    {
         Dodge.c   147      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L730+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L730+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   148    }
         Dodge.c   149    }
    000001C2              L599:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   150    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
         Dodge.c   151    {
         Dodge.c   152    unsigned char x, ret;
         Dodge.c   153    
         Dodge.c   154    ret = GetKey(key);
    000001D4 D334                   MOV.L       L730+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   155    
         Dodge.c   156    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L602:                             
         Dodge.c   157    {
         Dodge.c   158      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L603
         Dodge.c   159      {
         Dodge.c   160       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   161       break;
    000001EE A004                   BRA         L601
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L603:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L602
    000001FA              L601:                             
         Dodge.c   162      }
         Dodge.c   163    }
         Dodge.c   164    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   165    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   166    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   167    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   168    #define GetKey(x) GetKeyMod(x)
         Dodge.c   169    #endif
         Dodge.c   170    #endif
         Dodge.c   171    
         Dodge.c   172    #pragma endregion
         Dodge.c   173    
         Dodge.c   174    #pragma region Constants
         Dodge.c   175    
         Dodge.c   176    // true/false since it's 2018




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   178    const char false = 0;
         Dodge.c   179    
         Dodge.c   180    // Display properties
         Dodge.c   181    const char DISPLAY_WIDTH    = 128;
         Dodge.c   182    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   183    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   184    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   185    
         Dodge.c   186    #pragma endregion
         Dodge.c   187    
         Dodge.c   188    struct Projectile {
         Dodge.c   189        char enabled;
         Dodge.c   190        float x;
         Dodge.c   191        float y;
         Dodge.c   192        float xVelocity;
         Dodge.c   193        float yVelocity;
         Dodge.c   194        float xAcceleration;
         Dodge.c   195        float yAcceleration;
         Dodge.c   196        int framesAlive;
         Dodge.c   197    };
         Dodge.c   198    struct Projectile projectiles[128];
         Dodge.c   199    
         Dodge.c   200    #pragma region Variables
         Dodge.c   201    
         Dodge.c   202    int playerHealth = 128;
         Dodge.c   203    int playerX = 64;
         Dodge.c   204    int playerY = 32;
         Dodge.c   205    
         Dodge.c   206    int projectileIndex;
         Dodge.c   207    int maxProjectiles;
         Dodge.c   208    int currentAttack = 0;
         Dodge.c   209    const int attacksTotal = 4;
         Dodge.c   210    
         Dodge.c   211    char paused = 1;
         Dodge.c   212    
         Dodge.c   213    char quit = 0;
         Dodge.c   214    
         Dodge.c   215    int timer = 0;
         Dodge.c   216    
         Dodge.c   217    #pragma endregion
         Dodge.c   218    
         Dodge.c   219    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   220        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L606
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L606:                             
         Dodge.c   221        if (x < 0) return -1;
    00000210 4411                   CMP/PZ      R4
    00000212 8901                   BT          L608
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L608:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   222        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   223    }
    0000021A              L607:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   224    float Signf(float x) {
    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   225        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L730+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L609
    0000022C D020                   MOV.L       L730+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L609:                             
         Dodge.c   226        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L730+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L611
    00000240 D01D                   MOV.L       L730+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L611:                             
         Dodge.c   227        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   228    }
    0000024A              L610:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   229    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   230        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L612
         Dodge.c   231            return a;
    00000254 000B                   RTS
    00000256 6043                   MOV         R4,R0
    00000258              L612:                             
         Dodge.c   232        else
         Dodge.c   233            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   234    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000025A              L613:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP
         Dodge.c   235    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   236        if(a < b)
    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L615
         Dodge.c   237            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L615:                             
         Dodge.c   238        else
         Dodge.c   239            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   240    }
    00000268              L616:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   241    
         Dodge.c   242    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   243    {
         Dodge.c   244        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L730+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   245        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   246        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   247        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   248        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   249    
         Dodge.c   250        quit = true;
    00000286 D20E                   MOV.L       L730+44,R2 ; _true
    00000288 D10E                   MOV.L       L730+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   251    
         Dodge.c   252        return;
         Dodge.c   253    }
    0000028E 4F26                   LDS.L       @R15+,PR
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L730:                             
    00000294 A44B0000               .DATA.L     H'A44B0000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy
    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000
    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   254    
         Dodge.c   255    #pragma region Drawing functions
         Dodge.c   256    
         Dodge.c   257    void DrawImage(char sprite[128][64], char drawWhite) {
    000002C8              _DrawImage:                      ; function: DrawImage
                                                           ; frame size=40
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
         Dodge.c   258        size_t x;
         Dodge.c   259        size_t y;
         Dodge.c   260        for (x = 0; x < 128; x++)
    000002D2 EB00                   MOV         #0,R11
    000002D4 2F96                   MOV.L       R9,@-R15
    000002D6 EA40                   MOV         #64,R10
    000002D8 2F86                   MOV.L       R8,@-R15
    000002DA 6DB3                   MOV         R11,R13
    000002DC D91F                   MOV.L       L731+6,R9  ; _Bdisp_SetPoint_VRAM
    000002DE 4F22                   STS.L       PR,@-R15
    000002E0 9839                   MOV.W       L731,R8    ; H'0080
    000002E2 7FF8                   ADD         #-8,R15
    000002E4 1F41                   MOV.L       R4,@(4,R15)
    000002E6 2F50                   MOV.B       R5,@R15
    000002E8              L619:                             
    000002E8 53F1                   MOV.L       @(4,R15),R3
         Dodge.c   261        {
         Dodge.c   262            for (y = 0; y < 64; y++)
    000002EA 6EB3                   MOV         R11,R14
    000002EC 6CD3                   MOV         R13,R12
    000002EE 4C08                   SHLL2       R12
    000002F0 4C08                   SHLL2       R12
    000002F2 4C08                   SHLL2       R12
    000002F4 3C3C                   ADD         R3,R12
    000002F6              L620:                             
         Dodge.c   263            {
         Dodge.c   264                if(sprite[x][y] > 0 || drawWhite) {
    000002F6 60C3                   MOV         R12,R0
    000002F8 03EC                   MOV.B       @(R0,R14),R3
    000002FA 4315                   CMP/PL      R3
    000002FC 8902                   BT          L622
    000002FE 63F0                   MOV.B       @R15,R3
    00000300 2338                   TST         R3,R3
    00000302 8904                   BT          L621




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000304              L622:                             
         Dodge.c   265                    Bdisp_SetPoint_VRAM(x, y, sprite[x][y]);
    00000304 60C3                   MOV         R12,R0
    00000306 65E3                   MOV         R14,R5
    00000308 06EC                   MOV.B       @(R0,R14),R6
    0000030A 490B                   JSR         @R9
    0000030C 64D3                   MOV         R13,R4
    0000030E              L621:                             
    0000030E 7E01                   ADD         #1,R14
    00000310 3EA2                   CMP/HS      R10,R14
    00000312 8BF0                   BF          L620
    00000314 7D01                   ADD         #1,R13
    00000316 3D82                   CMP/HS      R8,R13
    00000318 8BE6                   BF          L619
         Dodge.c   266                }
         Dodge.c   267            }
         Dodge.c   268        }
         Dodge.c   269        
         Dodge.c   270    }
    0000031A 7F08                   ADD         #8,R15
    0000031C 4F26                   LDS.L       @R15+,PR
    0000031E 68F6                   MOV.L       @R15+,R8
    00000320 69F6                   MOV.L       @R15+,R9
    00000322 6AF6                   MOV.L       @R15+,R10
    00000324 6BF6                   MOV.L       @R15+,R11
    00000326 6CF6                   MOV.L       @R15+,R12
    00000328 6DF6                   MOV.L       @R15+,R13
    0000032A 000B                   RTS
    0000032C 6EF6                   MOV.L       @R15+,R14
         Dodge.c   271    
         Dodge.c   272    void RenderMainMenu() {
    0000032E              _RenderMainMenu:                 ; function: RenderMainMenu
                                                           ; frame size=8196
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    0000032E 4F22                   STS.L       PR,@-R15
    00000330 9012                   MOV.W       L731+2,R0  ; H'E000
    00000332 3F0C                   ADD         R0,R15
         Dodge.c   273        char mainMenu[128][64] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                         +, 0, 0, 0, },
         Dodge.c   274    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   275    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   276    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   277    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   278    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   279    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   280    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   281    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   282    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   283    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   284    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   285    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   286    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   287    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   288    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   289    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   290    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   291    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   292    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   293    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   294    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   295    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   296    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   297    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   298    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   299    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   300    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   301    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   302    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   303    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   304    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   305    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   306    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   307    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   308    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   309    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   310    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   311    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   312    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   313    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   314    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   315    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   316    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   317    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   318    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   319    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   320    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   321    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   322    {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   323    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   324    {0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   325    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   326    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   327    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   328    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   329    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   330    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   331    {0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   332    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   333    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   334    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   335    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   336    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   337    {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   338    {0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   339    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   340    {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   341    {0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   342    {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   343    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   344    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   345    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   346    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   347    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   348    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   349    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   350    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   351    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   352    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   353    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   354    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   355    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   356    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   357    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   358    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   359    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   360    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   361    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   362    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   363    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   364    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   365    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   366    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   367    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   368    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   369    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   370    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   371    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   372    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   373    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   374    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   375    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   376    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   377    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   378    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   379    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   380    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   381    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   382    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   383    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   384    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   385    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   386    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   387    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   388    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   389    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   390    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   391    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   392    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   393    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   394    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   395    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   396    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   397    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   398    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   399    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   400    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   401    };
    00000334 D20A                   MOV.L       L731+10,R2 ; L442
    00000336 9010                   MOV.W       L731+4,R0  ; H'2000
    00000338 D30A                   MOV.L       L731+14,R3 ; __slow_mvn
    0000033A 430B                   JSR         @R3
    0000033C 61F3                   MOV         R15,R1
         Dodge.c   402        DrawImage(mainMenu, true);
    0000033E D10A                   MOV.L       L731+18,R1 ; _true
    00000340 6510                   MOV.B       @R1,R5
    00000342 BFC1                   BSR         _DrawImage
    00000344 64F3                   MOV         R15,R4
         Dodge.c   403        // Move VRAM to DD
         Dodge.c   404        Bdisp_PutDisp_DD();
    00000346 D209                   MOV.L       L731+22,R2 ; _Bdisp_PutDisp_DD
    00000348 420B                   JSR         @R2
    0000034A 0009                   NOP
         Dodge.c   405    }
    0000034C 9105                   MOV.W       L731+4,R1  ; H'2000
    0000034E 3F1C                   ADD         R1,R15
    00000350 4F26                   LDS.L       @R15+,PR
    00000352 000B                   RTS
    00000354 0009                   NOP
    00000356              L731:                             
    00000356 0080                   .DATA.W     H'0080
    00000358 E000                   .DATA.W     H'E000
    0000035A 2000                   .DATA.W     H'2000
    0000035C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000360 <00000000>             .DATA.L     L442
    00000364 <00000000>             .DATA.L     __slow_mvn
    00000368 <00000000>             .DATA.L     _true
    0000036C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   406    
         Dodge.c   407    /** Draws the projectils */
         Dodge.c   408    void DrawProjectiles()
    00000370              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    00000370 2FE6                   MOV.L       R14,@-R15
    00000372 2FD6                   MOV.L       R13,@-R15
    00000374 2FC6                   MOV.L       R12,@-R15
    00000376 2FB6                   MOV.L       R11,@-R15
    00000378 2FA6                   MOV.L       R10,@-R15
    0000037A 2F96                   MOV.L       R9,@-R15
    0000037C 2F86                   MOV.L       R8,@-R15
    0000037E 4F22                   STS.L       PR,@-R15
    00000380 D44B                   MOV.L       L732+2,R4  ; _projectiles




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000382 7FE4                   ADD         #-28,R15
    00000384 DA4B                   MOV.L       L732+6,R10 ; _Bdisp_SetPoint_VRAM
    00000386 6543                   MOV         R4,R5
    00000388 9391                   MOV.W       L732,R3    ; H'1000
    0000038A 6D43                   MOV         R4,R13
    0000038C 6943                   MOV         R4,R9
    0000038E 343C                   ADD         R3,R4
    00000390 1F46                   MOV.L       R4,@(24,R15)
         Dodge.c   409    {   
         Dodge.c   410        float x1;
         Dodge.c   411        float y1;
         Dodge.c   412        float x2;
         Dodge.c   413        float y2;
         Dodge.c   414        float dx;
         Dodge.c   415        float dy;
         Dodge.c   416        int x;
         Dodge.c   417        int y;
         Dodge.c   418        int decide;
         Dodge.c   419        int pk;
         Dodge.c   420        int j;
         Dodge.c   421    
         Dodge.c   422        size_t i;
         Dodge.c   423        for (i = 0; i < 128; i++)
    00000392              L623:                             
         Dodge.c   424        {
         Dodge.c   425            if(projectiles[i].enabled) {
    00000392 6390                   MOV.B       @R9,R3
    00000394 2338                   TST         R3,R3
    00000396 8B01                   BF          L733
    00000398 A0D9                   BRA         L624
    0000039A 0009                   NOP
    0000039C              L733:                             
         Dodge.c   426                x1 = projectiles[i].x;
    0000039C 54D1                   MOV.L       @(4,R13),R4
    0000039E 1F41                   MOV.L       R4,@(4,R15)
         Dodge.c   427                y1 = projectiles[i].y;
    000003A0 55D2                   MOV.L       @(8,R13),R5
         Dodge.c   428                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000003A2 6143                   MOV         R4,R1
    000003A4 D344                   MOV.L       L732+10,R3 ; __adds
    000003A6 2F52                   MOV.L       R5,@R15
    000003A8 430B                   JSR         @R3
    000003AA 50D3                   MOV.L       @(12,R13),R0
         Dodge.c   429                y2 = projectiles[i].y + projectiles[i].yVelocity;
    000003AC D242                   MOV.L       L732+10,R2 ; __adds
    000003AE 6803                   MOV         R0,R8
    000003B0 6153                   MOV         R5,R1
    000003B2 420B                   JSR         @R2
    000003B4 50D4                   MOV.L       @(16,R13),R0
         Dodge.c   430                Bdisp_SetPoint_VRAM(x1, y1, 1);
    000003B6 E601                   MOV         #1,R6
    000003B8 D240                   MOV.L       L732+14,R2 ; __stoi
    000003BA 1F02                   MOV.L       R0,@(8,R15)
    000003BC 420B                   JSR         @R2
    000003BE 60F2                   MOV.L       @R15,R0
    000003C0 D33E                   MOV.L       L732+14,R3 ; __stoi
    000003C2 6503                   MOV         R0,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C4 430B                   JSR         @R3
    000003C6 50F1                   MOV.L       @(4,R15),R0
    000003C8 4A0B                   JSR         @R10
    000003CA 6403                   MOV         R0,R4
         Dodge.c   431                Bdisp_SetPoint_VRAM(x2, y2, 1);
    000003CC D33B                   MOV.L       L732+14,R3 ; __stoi
    000003CE E601                   MOV         #1,R6
    000003D0 430B                   JSR         @R3
    000003D2 50F2                   MOV.L       @(8,R15),R0
    000003D4 D339                   MOV.L       L732+14,R3 ; __stoi
    000003D6 6503                   MOV         R0,R5
    000003D8 430B                   JSR         @R3
    000003DA 6083                   MOV         R8,R0
    000003DC 4A0B                   JSR         @R10
    000003DE 6403                   MOV         R0,R4
         Dodge.c   432    
         Dodge.c   433        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   434                dx = abs(x2 - x1);
    000003E0 D237                   MOV.L       L732+18,R2 ; __subs
    000003E2 6183                   MOV         R8,R1
    000003E4 420B                   JSR         @R2
    000003E6 50F1                   MOV.L       @(4,R15),R0
    000003E8 D334                   MOV.L       L732+14,R3 ; __stoi
    000003EA 430B                   JSR         @R3
    000003EC 0009                   NOP
    000003EE D235                   MOV.L       L732+22,R2 ; _abs
    000003F0 420B                   JSR         @R2
    000003F2 6403                   MOV         R0,R4
    000003F4 D334                   MOV.L       L732+26,R3 ; __itos
    000003F6 430B                   JSR         @R3
    000003F8 0009                   NOP
    000003FA 6B03                   MOV         R0,R11
         Dodge.c   435                dy = abs(y2 - y1);
    000003FC 51F2                   MOV.L       @(8,R15),R1
    000003FE D230                   MOV.L       L732+18,R2 ; __subs
    00000400 420B                   JSR         @R2
    00000402 60F2                   MOV.L       @R15,R0
    00000404 D32D                   MOV.L       L732+14,R3 ; __stoi
    00000406 430B                   JSR         @R3
    00000408 0009                   NOP
    0000040A D22E                   MOV.L       L732+22,R2 ; _abs
    0000040C 420B                   JSR         @R2
    0000040E 6403                   MOV         R0,R4
    00000410 D32D                   MOV.L       L732+26,R3 ; __itos
    00000412 430B                   JSR         @R3
    00000414 0009                   NOP
    00000416 6403                   MOV         R0,R4
         Dodge.c   436    
         Dodge.c   437                decide = (dx > dy);
    00000418 D22C                   MOV.L       L732+30,R2 ; __gts
    0000041A 420B                   JSR         @R2
    0000041C 61B3                   MOV         R11,R1
    0000041E 1F03                   MOV.L       R0,@(12,R15)
         Dodge.c   438                
         Dodge.c   439                pk = 2 * dy - dx;
    00000420 D02B                   MOV.L       L732+34,R0 ; H'40000000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000422 D22C                   MOV.L       L732+38,R2 ; __muls
    00000424 420B                   JSR         @R2
    00000426 6143                   MOV         R4,R1
    00000428 D325                   MOV.L       L732+18,R3 ; __subs
    0000042A 6C03                   MOV         R0,R12
    0000042C 6103                   MOV         R0,R1
    0000042E 430B                   JSR         @R3
    00000430 60B3                   MOV         R11,R0
    00000432 D222                   MOV.L       L732+14,R2 ; __stoi
    00000434 420B                   JSR         @R2
    00000436 0009                   NOP
    00000438 D226                   MOV.L       L732+38,R2 ; __muls
    0000043A 6E03                   MOV         R0,R14
    0000043C D024                   MOV.L       L732+34,R0 ; H'40000000
         Dodge.c   440                for (j = 0; j <= dx; j++) {
    0000043E E300                   MOV         #0,R3
    00000440 1F34                   MOV.L       R3,@(16,R15)
    00000442 420B                   JSR         @R2
    00000444 61B3                   MOV         R11,R1
    00000446 D31E                   MOV.L       L732+18,R3 ; __subs
    00000448 430B                   JSR         @R3
    0000044A 61C3                   MOV         R12,R1
    0000044C 1F05                   MOV.L       R0,@(20,R15)
    0000044E E100                   MOV         #0,R1
    00000450 D321                   MOV.L       L732+42,R3 ; __les
    00000452 430B                   JSR         @R3
    00000454 60B3                   MOV         R11,R0
    00000456 8800                   CMP/EQ      #0,R0
    00000458 8979                   BT          L624
    0000045A              L626:                             
         Dodge.c   441                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    0000045A E601                   MOV         #1,R6
    0000045C D217                   MOV.L       L732+14,R2 ; __stoi
    0000045E 420B                   JSR         @R2
    00000460 60F2                   MOV.L       @R15,R0
    00000462 6503                   MOV         R0,R5
    00000464 D315                   MOV.L       L732+14,R3 ; __stoi
    00000466 430B                   JSR         @R3
    00000468 50F1                   MOV.L       @(4,R15),R0
    0000046A 4A0B                   JSR         @R10
    0000046C 6403                   MOV         R0,R4
         Dodge.c   442                    
         Dodge.c   443                    // checking either to decrement or increment the
         Dodge.c   444                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   445                    x1 < x2 ? x1++ : x1--;
    0000046E 51F1                   MOV.L       @(4,R15),R1
    00000470 D31A                   MOV.L       L732+46,R3 ; __lts
    00000472 430B                   JSR         @R3
    00000474 6083                   MOV         R8,R0
    00000476 8800                   CMP/EQ      #0,R0
    00000478 8906                   BT          L627
    0000047A D119                   MOV.L       L732+50,R1 ; H'3F800000
    0000047C D20E                   MOV.L       L732+10,R2 ; __adds
    0000047E 420B                   JSR         @R2
    00000480 50F1                   MOV.L       @(4,R15),R0
    00000482 1F01                   MOV.L       R0,@(4,R15)
    00000484 A006                   BRA         L628




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000486 0009                   NOP
    00000488              L627:                             
    00000488 51F1                   MOV.L       @(4,R15),R1
    0000048A D015                   MOV.L       L732+50,R0 ; H'3F800000
    0000048C D30C                   MOV.L       L732+18,R3 ; __subs
    0000048E 430B                   JSR         @R3
    00000490 0009                   NOP
    00000492 1F01                   MOV.L       R0,@(4,R15)
    00000494              L628:                             
         Dodge.c   446                    if (pk < 0) {
    00000494 4E11                   CMP/PZ      R14
    00000496 8930                   BT          L629
         Dodge.c   447                        // decision value will decide to plot
         Dodge.c   448                        // either  x1 or y1 in x's position
         Dodge.c   449                        if (decide == 0) {
    00000498 52F3                   MOV.L       @(12,R15),R2
    0000049A 2228                   TST         R2,R2
    0000049C 8B22                   BF          L630
         Dodge.c   450                            // putpixel(x1, y1, RED);
         Dodge.c   451                            pk = pk + 2 * dy;
    0000049E D30A                   MOV.L       L732+26,R3 ; __itos
    000004A0 430B                   JSR         @R3
    000004A2 60E3                   MOV         R14,R0
    000004A4 D204                   MOV.L       L732+10,R2 ; __adds
    000004A6 420B                   JSR         @R2
    000004A8 61C3                   MOV         R12,R1
    000004AA A021                   BRA         L724
    000004AC 0009                   NOP
    000004AE              L732:                             
    000004AE 1000                   .DATA.W     H'1000
    000004B0 <00000000>             .DATA.L     _projectiles
    000004B4 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000004B8 <00000000>             .DATA.L     __adds
    000004BC <00000000>             .DATA.L     __stoi
    000004C0 <00000000>             .DATA.L     __subs
    000004C4 <00000000>             .DATA.L     _abs
    000004C8 <00000000>             .DATA.L     __itos
    000004CC <00000000>             .DATA.L     __gts
    000004D0 40000000               .DATA.L     H'40000000
    000004D4 <00000000>             .DATA.L     __muls
    000004D8 <00000000>             .DATA.L     __les
    000004DC <00000000>             .DATA.L     __lts
    000004E0 3F800000               .DATA.L     H'3F800000
    000004E4              L630:                             
         Dodge.c   452                        }
         Dodge.c   453                        else {
         Dodge.c   454                            //(y1,x1) is passed in xt
         Dodge.c   455                            // putpixel(y1, x1, YELLOW);
         Dodge.c   456                            pk = pk + 2 * dy;
    000004E4 D33F                   MOV.L       L734+2,R3  ; __itos
    000004E6 430B                   JSR         @R3
    000004E8 60E3                   MOV         R14,R0
    000004EA D23F                   MOV.L       L734+6,R2  ; __adds
    000004EC 420B                   JSR         @R2
    000004EE 61C3                   MOV         R12,R1
    000004F0              L724:                             
    000004F0 D33E                   MOV.L       L734+10,R3 ; __stoi




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F2 430B                   JSR         @R3
    000004F4 0009                   NOP
    000004F6 A01F                   BRA         L632
    000004F8 6E03                   MOV         R0,R14
    000004FA              L629:                             
         Dodge.c   457                        }
         Dodge.c   458                    }
         Dodge.c   459                    else {
         Dodge.c   460                        y1 < y2 ? y1++ : y1--;
    000004FA 61F2                   MOV.L       @R15,R1
    000004FC D33C                   MOV.L       L734+14,R3 ; __lts
    000004FE 430B                   JSR         @R3
    00000500 50F2                   MOV.L       @(8,R15),R0
    00000502 8800                   CMP/EQ      #0,R0
    00000504 8906                   BT          L633
    00000506 D13B                   MOV.L       L734+18,R1 ; H'3F800000
    00000508 D237                   MOV.L       L734+6,R2  ; __adds
    0000050A 420B                   JSR         @R2
    0000050C 60F2                   MOV.L       @R15,R0
    0000050E 2F02                   MOV.L       R0,@R15
    00000510 A006                   BRA         L634
    00000512 0009                   NOP
    00000514              L633:                             
    00000514 61F2                   MOV.L       @R15,R1
    00000516 D037                   MOV.L       L734+18,R0 ; H'3F800000
    00000518 D337                   MOV.L       L734+22,R3 ; __subs
    0000051A 430B                   JSR         @R3
    0000051C 0009                   NOP
    0000051E 2F02                   MOV.L       R0,@R15
    00000520              L634:                             
         Dodge.c   461                        if (decide == 0) {
    00000520 53F3                   MOV.L       @(12,R15),R3
    00000522 2338                   TST         R3,R3
         Dodge.c   462            
         Dodge.c   463                            // putpixel(x1, y1, RED);
         Dodge.c   464                        }
         Dodge.c   465                        else {
         Dodge.c   466                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   467                        }
         Dodge.c   468                        pk = pk + 2 * dy - 2 * dx;
    00000524 D32F                   MOV.L       L734+2,R3  ; __itos
    00000526 430B                   JSR         @R3
    00000528 60E3                   MOV         R14,R0
    0000052A D22F                   MOV.L       L734+6,R2  ; __adds
    0000052C 420B                   JSR         @R2
    0000052E 51F5                   MOV.L       @(20,R15),R1
    00000530 D32E                   MOV.L       L734+10,R3 ; __stoi
    00000532 430B                   JSR         @R3
    00000534 0009                   NOP
    00000536 6E03                   MOV         R0,R14
    00000538              L632:                             
    00000538 52F4                   MOV.L       @(16,R15),R2
    0000053A 7201                   ADD         #1,R2
    0000053C 1F24                   MOV.L       R2,@(16,R15)
    0000053E D329                   MOV.L       L734+2,R3  ; __itos
    00000540 430B                   JSR         @R3
    00000542 6023                   MOV         R2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000544 D32D                   MOV.L       L734+26,R3 ; __ges
    00000546 430B                   JSR         @R3
    00000548 61B3                   MOV         R11,R1
    0000054A 8800                   CMP/EQ      #0,R0
    0000054C 8B85                   BF          L626
    0000054E              L624:                             
    0000054E 7920                   ADD         #32,R9
    00000550 52F6                   MOV.L       @(24,R15),R2
    00000552 3922                   CMP/HS      R2,R9
    00000554 8D02                   BT/S        L735
    00000556 7D20                   ADD         #32,R13
    00000558 AF1B                   BRA         L623
    0000055A 0009                   NOP
    0000055C              L735:                             
         Dodge.c   469                    }
         Dodge.c   470                }
         Dodge.c   471            }
         Dodge.c   472        }
         Dodge.c   473    }
    0000055C 7F1C                   ADD         #28,R15
    0000055E 4F26                   LDS.L       @R15+,PR
    00000560 68F6                   MOV.L       @R15+,R8
    00000562 69F6                   MOV.L       @R15+,R9
    00000564 6AF6                   MOV.L       @R15+,R10
    00000566 6BF6                   MOV.L       @R15+,R11
    00000568 6CF6                   MOV.L       @R15+,R12
    0000056A 6DF6                   MOV.L       @R15+,R13
    0000056C 000B                   RTS
    0000056E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   474    /** Draws the player */
         Dodge.c   475    void DrawPlayer()
    00000570              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=16
    00000570 2FE6                   MOV.L       R14,@-R15
         Dodge.c   476    {   
         Dodge.c   477        Bdisp_SetPoint_VRAM(playerX, playerY, 1);
    00000572 E601                   MOV         #1,R6
    00000574 2FD6                   MOV.L       R13,@-R15
    00000576 2FC6                   MOV.L       R12,@-R15
    00000578 4F22                   STS.L       PR,@-R15
    0000057A DC21                   MOV.L       L734+30,R12; _playerX
    0000057C DD21                   MOV.L       L734+34,R13; _playerY
    0000057E DE22                   MOV.L       L734+38,R14; _Bdisp_SetPoint_VRAM
    00000580 65D2                   MOV.L       @R13,R5
    00000582 4E0B                   JSR         @R14
    00000584 64C2                   MOV.L       @R12,R4
         Dodge.c   478        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    00000586 E601                   MOV         #1,R6
    00000588 65D2                   MOV.L       @R13,R5
    0000058A 64C2                   MOV.L       @R12,R4
    0000058C 4E0B                   JSR         @R14
    0000058E 7401                   ADD         #1,R4
         Dodge.c   479        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    00000590 65D2                   MOV.L       @R13,R5
    00000592 E601                   MOV         #1,R6
    00000594 64C2                   MOV.L       @R12,R4
    00000596 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000598 74FF                   ADD         #-1,R4
         Dodge.c   480        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    0000059A E601                   MOV         #1,R6
    0000059C 65D2                   MOV.L       @R13,R5
    0000059E 7501                   ADD         #1,R5
    000005A0 4E0B                   JSR         @R14
    000005A2 64C2                   MOV.L       @R12,R4
         Dodge.c   481        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000005A4 65D2                   MOV.L       @R13,R5
    000005A6 E601                   MOV         #1,R6
    000005A8 75FF                   ADD         #-1,R5
    000005AA 4E0B                   JSR         @R14
    000005AC 64C2                   MOV.L       @R12,R4
         Dodge.c   482    }
    000005AE 4F26                   LDS.L       @R15+,PR
    000005B0 6CF6                   MOV.L       @R15+,R12
    000005B2 6DF6                   MOV.L       @R15+,R13
    000005B4 000B                   RTS
    000005B6 6EF6                   MOV.L       @R15+,R14
         Dodge.c   483    
         Dodge.c   484    void DrawHealthBar() {
    000005B8              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=16
    000005B8 2FE6                   MOV.L       R14,@-R15
    000005BA 2FD6                   MOV.L       R13,@-R15
    000005BC 2FC6                   MOV.L       R12,@-R15
    000005BE 4F22                   STS.L       PR,@-R15
         Dodge.c   485        size_t i;
         Dodge.c   486        for (i = 0; i < playerHealth; i++)
    000005C0 DC12                   MOV.L       L734+42,R12; _playerHealth
    000005C2 DD11                   MOV.L       L734+38,R13; _Bdisp_SetPoint_VRAM
    000005C4 A005                   BRA         L637
    000005C6 EE00                   MOV         #0,R14
    000005C8              L638:                             
         Dodge.c   487        {
         Dodge.c   488            Bdisp_SetPoint_VRAM(i, 63, 1);
    000005C8 E601                   MOV         #1,R6
    000005CA E53F                   MOV         #63,R5
    000005CC 4D0B                   JSR         @R13
    000005CE 64E3                   MOV         R14,R4
    000005D0 7E01                   ADD         #1,R14
    000005D2              L637:                             
    000005D2 62C2                   MOV.L       @R12,R2
    000005D4 3E22                   CMP/HS      R2,R14
    000005D6 8BF7                   BF          L638
         Dodge.c   489        }
         Dodge.c   490        // debug bars
         Dodge.c   491        // for (i = 0; i < projectileIndex; i++)
         Dodge.c   492        //     Bdisp_SetPoint_VRAM(i, 1, 1);
         Dodge.c   493        // for (i = 0; i < maxProjectiles; i++)
         Dodge.c   494        //     Bdisp_SetPoint_VRAM(i, 2, 1);
         Dodge.c   495    }
    000005D8 4F26                   LDS.L       @R15+,PR
    000005DA 6CF6                   MOV.L       @R15+,R12
    000005DC 6DF6                   MOV.L       @R15+,R13
    000005DE 000B                   RTS
    000005E0 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005E2              L734:                             
    000005E2 0000                   .DATA.W     0
    000005E4 <00000000>             .DATA.L     __itos
    000005E8 <00000000>             .DATA.L     __adds
    000005EC <00000000>             .DATA.L     __stoi
    000005F0 <00000000>             .DATA.L     __lts
    000005F4 3F800000               .DATA.L     H'3F800000
    000005F8 <00000000>             .DATA.L     __subs
    000005FC <00000000>             .DATA.L     __ges
    00000600 <00000000>             .DATA.L     _playerX
    00000604 <00000000>             .DATA.L     _playerY
    00000608 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    0000060C <00000000>             .DATA.L     _playerHealth
         Dodge.c   496    
         Dodge.c   497    #pragma endregion
         Dodge.c   498    
         Dodge.c   499    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   500    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration) {
    00000610              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=24
    00000610 2FE6                   MOV.L       R14,@-R15
    00000612 2FD6                   MOV.L       R13,@-R15
    00000614 2FC6                   MOV.L       R12,@-R15
    00000616 2FA6                   MOV.L       R10,@-R15
    00000618 DE2C                   MOV.L       L736+4,R14 ; _projectiles
    0000061A 7FF8                   ADD         #-8,R15
    0000061C 9354                   MOV.W       L736,R3    ; H'1000
    0000061E 6DE3                   MOV         R14,R13
         Dodge.c   501        size_t i;
         Dodge.c   502        for (i = 0; i < 128; i++)
    00000620 DA2B                   MOV.L       L736+8,R10 ; _true
    00000622 2FE2                   MOV.L       R14,@R15
    00000624 1FE1                   MOV.L       R14,@(4,R15)
    00000626 61F2                   MOV.L       @R15,R1
    00000628 313C                   ADD         R3,R1
    0000062A 3D12                   CMP/HS      R1,R13
    0000062C 8D13                   BT/S        L642
    0000062E EC00                   MOV         #0,R12
    00000630              L640:                             
         Dodge.c   503        {
         Dodge.c   504            if(!projectiles[i].enabled) { // found a free spot in the array
    00000630 63D0                   MOV.B       @R13,R3
    00000632 2338                   TST         R3,R3
    00000634 8B0B                   BF          L641
         Dodge.c   505                // set up the projectile
         Dodge.c   506                projectiles[i].x = x;
    00000636 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   507                projectiles[i].y = y;
    00000638 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   508                projectiles[i].xVelocity = xVelocity;
    0000063A 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   509                projectiles[i].yVelocity = yVelocity;
    0000063C 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   510                projectiles[i].xAcceleration = xAcceleration;
    0000063E 53F6                   MOV.L       @(24,R15),R3
    00000640 1E35                   MOV.L       R3,@(20,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   511                projectiles[i].yAcceleration = yAcceleration;
    00000642 52F7                   MOV.L       @(28,R15),R2
    00000644 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   512                // enable it
         Dodge.c   513                projectiles[i].enabled = true;
    00000646 63A0                   MOV.B       @R10,R3
    00000648 2E30                   MOV.B       R3,@R14
         Dodge.c   514                projectiles[i].framesAlive = 0;
         Dodge.c   515                // stop the loop, we're done
         Dodge.c   516                return;
    0000064A A004                   BRA         L642
    0000064C 1EC7                   MOV.L       R12,@(28,R14)
    0000064E              L641:                             
    0000064E 7D20                   ADD         #32,R13
    00000650 3D12                   CMP/HS      R1,R13
    00000652 8FED                   BF/S        L640
    00000654 7E20                   ADD         #32,R14
    00000656              L642:                             
         Dodge.c   517            }
         Dodge.c   518        }
         Dodge.c   519        
         Dodge.c   520    }
    00000656 7F08                   ADD         #8,R15
    00000658 6AF6                   MOV.L       @R15+,R10
    0000065A 6CF6                   MOV.L       @R15+,R12
    0000065C 6DF6                   MOV.L       @R15+,R13
    0000065E 000B                   RTS
    00000660 6EF6                   MOV.L       @R15+,R14
         Dodge.c   521    
         Dodge.c   522    int IsCollidingWithPlayer(int x, int y) {
    00000662              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer
                                                           ; frame size=12
    00000662 4F22                   STS.L       PR,@-R15
         Dodge.c   523        return (abs(x - playerX) < 2 && abs(y - playerY) < 2);
    00000664 D21B                   MOV.L       L736+12,R2 ; _playerX
    00000666 7FF8                   ADD         #-8,R15
    00000668 D11B                   MOV.L       L736+16,R1 ; _abs
    0000066A 1F41                   MOV.L       R4,@(4,R15)
    0000066C 2F52                   MOV.L       R5,@R15
    0000066E 6322                   MOV.L       @R2,R3
    00000670 54F1                   MOV.L       @(4,R15),R4
    00000672 410B                   JSR         @R1
    00000674 3438                   SUB         R3,R4
    00000676 E302                   MOV         #2,R3
    00000678 3033                   CMP/GE      R3,R0
    0000067A 890C                   BT          L643
    0000067C D117                   MOV.L       L736+20,R1 ; _playerY
    0000067E 6212                   MOV.L       @R1,R2
    00000680 64F2                   MOV.L       @R15,R4
    00000682 D315                   MOV.L       L736+16,R3 ; _abs
    00000684 430B                   JSR         @R3
    00000686 3428                   SUB         R2,R4
    00000688 E202                   MOV         #2,R2
    0000068A 3023                   CMP/GE      R2,R0
    0000068C 8903                   BT          L643
    0000068E 7F08                   ADD         #8,R15
    00000690 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000692 000B                   RTS
    00000694 E001                   MOV         #1,R0
    00000696              L643:                             
    00000696 E000                   MOV         #0,R0
         Dodge.c   524    }
    00000698              L645:                             
    00000698 7F08                   ADD         #8,R15
    0000069A 4F26                   LDS.L       @R15+,PR
    0000069C 000B                   RTS
    0000069E 0009                   NOP
         Dodge.c   525    
         Dodge.c   526    #pragma region Timer functions
         Dodge.c   527    
         Dodge.c   528    /** Timer #2: Renders screen */
         Dodge.c   529    void RenderScreen()
    000006A0              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4
    000006A0 4F22                   STS.L       PR,@-R15
         Dodge.c   530    {
         Dodge.c   531        if(!quit) {
    000006A2 D10F                   MOV.L       L736+24,R1 ; _quit
    000006A4 6310                   MOV.B       @R1,R3
    000006A6 2338                   TST         R3,R3
    000006A8 8B0B                   BF          L646
         Dodge.c   532            // Clear current screen
         Dodge.c   533            Bdisp_AllClr_VRAM();
    000006AA D30E                   MOV.L       L736+28,R3 ; _Bdisp_AllClr_VRAM
    000006AC 430B                   JSR         @R3
    000006AE 0009                   NOP
         Dodge.c   534                
         Dodge.c   535            // Draw the different parts of the screen
         Dodge.c   536            DrawProjectiles();
    000006B0 BE5E                   BSR         _DrawProjectiles
    000006B2 0009                   NOP
         Dodge.c   537            DrawPlayer();
    000006B4 BF5C                   BSR         _DrawPlayer
    000006B6 0009                   NOP
         Dodge.c   538            DrawHealthBar();
    000006B8 BF7E                   BSR         _DrawHealthBar
    000006BA 0009                   NOP
         Dodge.c   539    
         Dodge.c   540            // Move VRAM to DD
         Dodge.c   541            Bdisp_PutDisp_DD();
    000006BC D30A                   MOV.L       L736+32,R3 ; _Bdisp_PutDisp_DD
    000006BE 432B                   JMP         @R3
    000006C0 4F26                   LDS.L       @R15+,PR
    000006C2              L646:                             
         Dodge.c   542        }
         Dodge.c   543    }
    000006C2 4F26                   LDS.L       @R15+,PR
    000006C4 000B                   RTS
    000006C6 0009                   NOP
    000006C8              L736:                             
    000006C8 1000                   .DATA.W     H'1000
    000006CA 0000                   .DATA.W     0
    000006CC <00000000>             .DATA.L     _projectiles
    000006D0 <00000000>             .DATA.L     _true




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006D4 <00000000>             .DATA.L     _playerX
    000006D8 <00000000>             .DATA.L     _abs
    000006DC <00000000>             .DATA.L     _playerY
    000006E0 <00000000>             .DATA.L     _quit
    000006E4 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000006E8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   544    
         Dodge.c   545    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    000006EC              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    000006EC 2FE6                   MOV.L       R14,@-R15
         Dodge.c   546        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   547        float dx;
         Dodge.c   548        float dy;
         Dodge.c   549        int decide;
         Dodge.c   550        int pk;
         Dodge.c   551        int j;
         Dodge.c   552    
         Dodge.c   553        dx = abs(x2 - x1);
    000006EE 6173                   MOV         R7,R1
    000006F0 D37A                   MOV.L       L737,R3    ; __subs
    000006F2 2FD6                   MOV.L       R13,@-R15
    000006F4 2FC6                   MOV.L       R12,@-R15
    000006F6 2FB6                   MOV.L       R11,@-R15
    000006F8 2FA6                   MOV.L       R10,@-R15
    000006FA 2F96                   MOV.L       R9,@-R15
    000006FC 2F86                   MOV.L       R8,@-R15
    000006FE 6873                   MOV         R7,R8
    00000700 4F22                   STS.L       PR,@-R15
    00000702 7FEC                   ADD         #-20,R15
    00000704 1F42                   MOV.L       R4,@(8,R15)
    00000706 1F51                   MOV.L       R5,@(4,R15)
    00000708 2F62                   MOV.L       R6,@R15
    0000070A 430B                   JSR         @R3
    0000070C 50F1                   MOV.L       @(4,R15),R0
    0000070E D274                   MOV.L       L737+4,R2  ; __stoi
    00000710 420B                   JSR         @R2
    00000712 0009                   NOP
    00000714 D373                   MOV.L       L737+8,R3  ; _abs
    00000716 430B                   JSR         @R3
    00000718 6403                   MOV         R0,R4
    0000071A D273                   MOV.L       L737+12,R2 ; __itos
    0000071C 420B                   JSR         @R2
    0000071E 0009                   NOP
         Dodge.c   554        dy = abs(y2 - y1);
    00000720 51FD                   MOV.L       @(52,R15),R1
    00000722 6D03                   MOV         R0,R13
    00000724 D36D                   MOV.L       L737,R3    ; __subs
    00000726 430B                   JSR         @R3
    00000728 60F2                   MOV.L       @R15,R0
    0000072A D26D                   MOV.L       L737+4,R2  ; __stoi
    0000072C 420B                   JSR         @R2
    0000072E 0009                   NOP
    00000730 D36C                   MOV.L       L737+8,R3  ; _abs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000732 430B                   JSR         @R3
    00000734 6403                   MOV         R0,R4
    00000736 D26C                   MOV.L       L737+12,R2 ; __itos
    00000738 420B                   JSR         @R2
    0000073A 0009                   NOP
         Dodge.c   555    
         Dodge.c   556        decide = (dx > dy);
    0000073C D36B                   MOV.L       L737+16,R3 ; __gts
    0000073E 6403                   MOV         R0,R4
    00000740 430B                   JSR         @R3
    00000742 61D3                   MOV         R13,R1
         Dodge.c   557        
         Dodge.c   558        pk = 2 * dy - dx;
    00000744 D26B                   MOV.L       L737+24,R2 ; __muls
    00000746 6903                   MOV         R0,R9
    00000748 D069                   MOV.L       L737+20,R0 ; H'40000000
    0000074A 420B                   JSR         @R2
    0000074C 6143                   MOV         R4,R1
    0000074E 6A03                   MOV         R0,R10
    00000750 D362                   MOV.L       L737,R3    ; __subs
    00000752 6103                   MOV         R0,R1
    00000754 430B                   JSR         @R3
    00000756 60D3                   MOV         R13,R0
    00000758 D261                   MOV.L       L737+4,R2  ; __stoi
    0000075A 420B                   JSR         @R2
    0000075C 0009                   NOP
    0000075E 6E03                   MOV         R0,R14
    00000760 53F2                   MOV.L       @(8,R15),R3
         Dodge.c   559        for (j = 0; j <= dx; j++) {
    00000762 EB00                   MOV         #0,R11
    00000764 D264                   MOV.L       L737+28,R2 ; _projectiles
    00000766 4308                   SHLL2       R3
    00000768 D061                   MOV.L       L737+20,R0 ; H'40000000
    0000076A 4308                   SHLL2       R3
    0000076C 4300                   SHLL        R3
    0000076E 1F34                   MOV.L       R3,@(16,R15)
    00000770 332C                   ADD         R2,R3
    00000772 1F32                   MOV.L       R3,@(8,R15)
    00000774 D25F                   MOV.L       L737+24,R2 ; __muls
    00000776 420B                   JSR         @R2
    00000778 61D3                   MOV         R13,R1
    0000077A D258                   MOV.L       L737,R2    ; __subs
    0000077C 420B                   JSR         @R2
    0000077E 61A3                   MOV         R10,R1
    00000780 1F03                   MOV.L       R0,@(12,R15)
    00000782 61B3                   MOV         R11,R1
    00000784 D25D                   MOV.L       L737+32,R2 ; __les
    00000786 420B                   JSR         @R2
    00000788 60D3                   MOV         R13,R0
    0000078A 8800                   CMP/EQ      #0,R0
    0000078C 8965                   BT          L647
    0000078E DC5C                   MOV.L       L737+36,R12; _playerHealth
    00000790              L648:                             
         Dodge.c   560            // check for collision
         Dodge.c   561            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    00000790 D353                   MOV.L       L737+4,R3  ; __stoi
    00000792 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000794 60F2                   MOV.L       @R15,R0
    00000796 6503                   MOV         R0,R5
    00000798 D351                   MOV.L       L737+4,R3  ; __stoi
    0000079A 430B                   JSR         @R3
    0000079C 50F1                   MOV.L       @(4,R15),R0
    0000079E BF60                   BSR         _IsCollidingWithPlayer
    000007A0 6403                   MOV         R0,R4
    000007A2 2008                   TST         R0,R0
    000007A4 8907                   BT          L649
         Dodge.c   562                // damage player
         Dodge.c   563                playerHealth -= 1;
    000007A6 63C2                   MOV.L       @R12,R3
         Dodge.c   564                // destroy projectile
         Dodge.c   565                projectiles[arrayIndex].enabled = false;
    000007A8 D156                   MOV.L       L737+40,R1 ; _false
    000007AA 73FF                   ADD         #-1,R3
    000007AC 2C32                   MOV.L       R3,@R12
    000007AE 52F2                   MOV.L       @(8,R15),R2
    000007B0 6310                   MOV.B       @R1,R3
         Dodge.c   566                return;
    000007B2 A058                   BRA         L650
    000007B4 2230                   MOV.B       R3,@R2
    000007B6              L649:                             
         Dodge.c   567            }
         Dodge.c   568            
         Dodge.c   569            // checking either to decrement or increment the
         Dodge.c   570            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   571            x1 < x2 ? x1++ : x1--;
    000007B6 51F1                   MOV.L       @(4,R15),R1
    000007B8 D253                   MOV.L       L737+44,R2 ; __lts
    000007BA 420B                   JSR         @R2
    000007BC 6083                   MOV         R8,R0
    000007BE 8800                   CMP/EQ      #0,R0
    000007C0 8906                   BT          L651
    000007C2 D152                   MOV.L       L737+48,R1 ; H'3F800000
    000007C4 D352                   MOV.L       L737+52,R3 ; __adds
    000007C6 430B                   JSR         @R3
    000007C8 50F1                   MOV.L       @(4,R15),R0
    000007CA 1F01                   MOV.L       R0,@(4,R15)
    000007CC A006                   BRA         L652
    000007CE 0009                   NOP
    000007D0              L651:                             
    000007D0 51F1                   MOV.L       @(4,R15),R1
    000007D2 D04E                   MOV.L       L737+48,R0 ; H'3F800000
    000007D4 D241                   MOV.L       L737,R2    ; __subs
    000007D6 420B                   JSR         @R2
    000007D8 0009                   NOP
    000007DA 1F01                   MOV.L       R0,@(4,R15)
    000007DC              L652:                             
    000007DC D342                   MOV.L       L737+12,R3 ; __itos
    000007DE 430B                   JSR         @R3
    000007E0 60E3                   MOV         R14,R0
    000007E2 4E11                   CMP/PZ      R14
    000007E4 8D14                   BT/S        L653
    000007E6 6403                   MOV         R0,R4
         Dodge.c   572            if (pk < 0) {
         Dodge.c   573                // decision value will decide to plot




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   574                // either  x1 or y1 in x's position
         Dodge.c   575                if (decide == 0) {
    000007E8 2998                   TST         R9,R9
    000007EA 8B08                   BF          L654
         Dodge.c   576                    // putpixel(x1, y1, RED);
         Dodge.c   577                    pk = pk + 2 * dy;
    000007EC D248                   MOV.L       L737+52,R2 ; __adds
    000007EE 6143                   MOV         R4,R1
    000007F0 420B                   JSR         @R2
    000007F2 60A3                   MOV         R10,R0
    000007F4 D33A                   MOV.L       L737+4,R3  ; __stoi
    000007F6 430B                   JSR         @R3
    000007F8 0009                   NOP
    000007FA A007                   BRA         L725
    000007FC 0009                   NOP
    000007FE              L654:                             
         Dodge.c   578                }
         Dodge.c   579                else {
         Dodge.c   580                    //(y1,x1) is passed in xt
         Dodge.c   581                    // putpixel(y1, x1, YELLOW);
         Dodge.c   582                    pk = pk + 2 * dy;
    000007FE 6143                   MOV         R4,R1
    00000800 D343                   MOV.L       L737+52,R3 ; __adds
    00000802 430B                   JSR         @R3
    00000804 60A3                   MOV         R10,R0
    00000806 D236                   MOV.L       L737+4,R2  ; __stoi
    00000808 420B                   JSR         @R2
    0000080A 0009                   NOP
    0000080C              L725:                             
    0000080C A01C                   BRA         L656
    0000080E 6E03                   MOV         R0,R14
    00000810              L653:                             
         Dodge.c   583                }
         Dodge.c   584            }
         Dodge.c   585            else {
         Dodge.c   586                y1 < y2 ? y1++ : y1--;
    00000810 61F2                   MOV.L       @R15,R1
    00000812 D23D                   MOV.L       L737+44,R2 ; __lts
    00000814 420B                   JSR         @R2
    00000816 50FD                   MOV.L       @(52,R15),R0
    00000818 8800                   CMP/EQ      #0,R0
    0000081A 8906                   BT          L657
    0000081C D13B                   MOV.L       L737+48,R1 ; H'3F800000
    0000081E D33C                   MOV.L       L737+52,R3 ; __adds
    00000820 430B                   JSR         @R3
    00000822 60F2                   MOV.L       @R15,R0
    00000824 2F02                   MOV.L       R0,@R15
    00000826 A006                   BRA         L658
    00000828 0009                   NOP
    0000082A              L657:                             
    0000082A 61F2                   MOV.L       @R15,R1
    0000082C D037                   MOV.L       L737+48,R0 ; H'3F800000
    0000082E D22B                   MOV.L       L737,R2    ; __subs
    00000830 420B                   JSR         @R2
    00000832 0009                   NOP
    00000834 2F02                   MOV.L       R0,@R15
    00000836              L658:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   587                if (decide == 0) {
    00000836 2998                   TST         R9,R9
         Dodge.c   588    
         Dodge.c   589                    // putpixel(x1, y1, RED);
         Dodge.c   590                }
         Dodge.c   591                else {
         Dodge.c   592                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   593                }
         Dodge.c   594                pk = pk + 2 * dy - 2 * dx;
    00000838 D335                   MOV.L       L737+52,R3 ; __adds
    0000083A 6143                   MOV         R4,R1
    0000083C 430B                   JSR         @R3
    0000083E 50F3                   MOV.L       @(12,R15),R0
    00000840 D227                   MOV.L       L737+4,R2  ; __stoi
    00000842 420B                   JSR         @R2
    00000844 0009                   NOP
    00000846 6E03                   MOV         R0,R14
    00000848              L656:                             
    00000848 D327                   MOV.L       L737+12,R3 ; __itos
    0000084A 7B01                   ADD         #1,R11
    0000084C 430B                   JSR         @R3
    0000084E 60B3                   MOV         R11,R0
    00000850 D230                   MOV.L       L737+56,R2 ; __ges
    00000852 420B                   JSR         @R2
    00000854 61D3                   MOV         R13,R1
    00000856 8800                   CMP/EQ      #0,R0
    00000858 8B9A                   BF          L648
    0000085A              L647:                             
         Dodge.c   595            }
         Dodge.c   596        }
         Dodge.c   597    
         Dodge.c   598        projectiles[arrayIndex].x = x2;
    0000085A D327                   MOV.L       L737+28,R3 ; _projectiles
    0000085C 54F4                   MOV.L       @(16,R15),R4
    0000085E 343C                   ADD         R3,R4
    00000860 1481                   MOV.L       R8,@(4,R4)
         Dodge.c   599        projectiles[arrayIndex].y = y2;
    00000862 52FD                   MOV.L       @(52,R15),R2
    00000864 1422                   MOV.L       R2,@(8,R4)
         Dodge.c   600    }
    00000866              L650:                             
    00000866 7F14                   ADD         #20,R15
    00000868 4F26                   LDS.L       @R15+,PR
    0000086A 68F6                   MOV.L       @R15+,R8
    0000086C 69F6                   MOV.L       @R15+,R9
    0000086E 6AF6                   MOV.L       @R15+,R10
    00000870 6BF6                   MOV.L       @R15+,R11
    00000872 6CF6                   MOV.L       @R15+,R12
    00000874 6DF6                   MOV.L       @R15+,R13
    00000876 000B                   RTS
    00000878 6EF6                   MOV.L       @R15+,R14
         Dodge.c   601    
         Dodge.c   602    void Physics()
    0000087A              _Physics:                        ; function: Physics
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __gts, __lts




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000087A 2FE6                   MOV.L       R14,@-R15
    0000087C 2FD6                   MOV.L       R13,@-R15
    0000087E 2FC6                   MOV.L       R12,@-R15
    00000880 2FB6                   MOV.L       R11,@-R15
    00000882 4F22                   STS.L       PR,@-R15
         Dodge.c   603    {
         Dodge.c   604        size_t i;
         Dodge.c   605        for (i = 0; i < 128; i++)
    00000884 A06B                   BRA         L661
    00000886 ED00                   MOV         #0,R13
    00000888              L662:                             
    00000888 D41B                   MOV.L       L737+28,R4 ; _projectiles
    0000088A 6ED3                   MOV         R13,R14
    0000088C 4E08                   SHLL2       R14
    0000088E 4E08                   SHLL2       R14
    00000890 4E00                   SHLL        R14
    00000892 3E4C                   ADD         R4,R14
    00000894 63E0                   MOV.B       @R14,R3
    00000896 2338                   TST         R3,R3
    00000898 8960                   BT          L666
         Dodge.c   606        {
         Dodge.c   607            if(projectiles[i].enabled) {
         Dodge.c   608                // collision with edge of map
         Dodge.c   609                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    0000089A 54E1                   MOV.L       @(4,R14),R4
    0000089C D31A                   MOV.L       L737+44,R3 ; __lts
    0000089E 6143                   MOV         R4,R1
    000008A0 430B                   JSR         @R3
    000008A2 E000                   MOV         #0,R0
    000008A4 8800                   CMP/EQ      #0,R0
    000008A6 8B15                   BF          L573
    000008A8 D01B                   MOV.L       L737+60,R0 ; H'43000000
    000008AA D210                   MOV.L       L737+16,R2 ; __gts
    000008AC 420B                   JSR         @R2
    000008AE 6143                   MOV         R4,R1
    000008B0 8800                   CMP/EQ      #0,R0
    000008B2 8B0F                   BF          L573
    000008B4 51E2                   MOV.L       @(8,R14),R1
    000008B6 D314                   MOV.L       L737+44,R3 ; __lts
    000008B8 430B                   JSR         @R3
    000008BA E000                   MOV         #0,R0
    000008BC 8800                   CMP/EQ      #0,R0
    000008BE 8B09                   BF          L573
    000008C0 D016                   MOV.L       L737+64,R0 ; H'42800000
    000008C2 D20A                   MOV.L       L737+16,R2 ; __gts
    000008C4 420B                   JSR         @R2
    000008C6 51E2                   MOV.L       @(8,R14),R1
    000008C8 8800                   CMP/EQ      #0,R0
    000008CA 8B03                   BF          L573
         Dodge.c   610                    // destroy projectile
         Dodge.c   611                    projectiles[i].enabled = false;
         Dodge.c   612                    continue;
         Dodge.c   613                }
         Dodge.c   614                // destroy particles that have been alive for more than an attack cycle
         Dodge.c   615                if(projectiles[i].framesAlive >= 99) { // each frame is 50ms and each cycle is 5000ms
    000008CC 52E7                   MOV.L       @(28,R14),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008CE E463                   MOV         #99,R4
    000008D0 3243                   CMP/GE      R4,R2
    000008D2 8B25                   BF          L667
    000008D4              L573:
         Dodge.c   616                    // destroy projectile
         Dodge.c   617                    projectiles[i].enabled = false;
    000008D4 D40B                   MOV.L       L737+40,R4 ; _false
    000008D6 6240                   MOV.B       @R4,R2
         Dodge.c   618                    continue;
    000008D8 A040                   BRA         L666
    000008DA 2E20                   MOV.B       R2,@R14
    000008DC              L737:                             
    000008DC <00000000>             .DATA.L     __subs
    000008E0 <00000000>             .DATA.L     __stoi
    000008E4 <00000000>             .DATA.L     _abs
    000008E8 <00000000>             .DATA.L     __itos
    000008EC <00000000>             .DATA.L     __gts
    000008F0 40000000               .DATA.L     H'40000000
    000008F4 <00000000>             .DATA.L     __muls
    000008F8 <00000000>             .DATA.L     _projectiles
    000008FC <00000000>             .DATA.L     __les
    00000900 <00000000>             .DATA.L     _playerHealth
    00000904 <00000000>             .DATA.L     _false
    00000908 <00000000>             .DATA.L     __lts
    0000090C 3F800000               .DATA.L     H'3F800000
    00000910 <00000000>             .DATA.L     __adds
    00000914 <00000000>             .DATA.L     __ges
    00000918 43000000               .DATA.L     H'43000000
    0000091C 42800000               .DATA.L     H'42800000
    00000920              L667:                             
         Dodge.c   619                }
         Dodge.c   620                // move + detect player collisions
         Dodge.c   621                MoveProjectile(i,
         Dodge.c   622                    projectiles[i].x,
         Dodge.c   623                    projectiles[i].y,
         Dodge.c   624                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   625                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   626                );
    00000920 5CE2                   MOV.L       @(8,R14),R12
    00000922 61C3                   MOV         R12,R1
    00000924 D234                   MOV.L       L738+4,R2  ; __adds
    00000926 420B                   JSR         @R2
    00000928 50E4                   MOV.L       @(16,R14),R0
    0000092A 2F06                   MOV.L       R0,@-R15
    0000092C 5BE1                   MOV.L       @(4,R14),R11
    0000092E 61B3                   MOV         R11,R1
    00000930 D331                   MOV.L       L738+4,R3  ; __adds
    00000932 430B                   JSR         @R3
    00000934 50E3                   MOV.L       @(12,R14),R0
    00000936 6703                   MOV         R0,R7
    00000938 66C3                   MOV         R12,R6
    0000093A 65B3                   MOV         R11,R5
    0000093C BED6                   BSR         _MoveProjectile
    0000093E 64D3                   MOV         R13,R4
         Dodge.c   627                // update velocity
         Dodge.c   628                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    00000940 D32D                   MOV.L       L738+4,R3  ; __adds




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000942 7F04                   ADD         #4,R15
    00000944 50E5                   MOV.L       @(20,R14),R0
    00000946 430B                   JSR         @R3
    00000948 51E3                   MOV.L       @(12,R14),R1
    0000094A 1E03                   MOV.L       R0,@(12,R14)
         Dodge.c   629                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    0000094C 50E6                   MOV.L       @(24,R14),R0
    0000094E D22A                   MOV.L       L738+4,R2  ; __adds
    00000950 420B                   JSR         @R2
    00000952 51E4                   MOV.L       @(16,R14),R1
    00000954 1E04                   MOV.L       R0,@(16,R14)
         Dodge.c   630    
         Dodge.c   631                projectiles[i].framesAlive++;
    00000956 53E7                   MOV.L       @(28,R14),R3
    00000958 7301                   ADD         #1,R3
    0000095A 1E37                   MOV.L       R3,@(28,R14)
    0000095C              L666:                             
    0000095C 7D01                   ADD         #1,R13
    0000095E              L661:                             
    0000095E 9449                   MOV.W       L738,R4    ; H'0080
    00000960 3D42                   CMP/HS      R4,R13
    00000962 8B91                   BF          L662
         Dodge.c   632            }
         Dodge.c   633        }
         Dodge.c   634    
         Dodge.c   635        // stop player from leaving map
         Dodge.c   636            if(playerX < 1)
    00000964 D425                   MOV.L       L738+8,R4  ; _playerX
    00000966 E501                   MOV         #1,R5
    00000968 6342                   MOV.L       @R4,R3
    0000096A 3353                   CMP/GE      R5,R3
    0000096C 8D01                   BT/S        L668
         Dodge.c   637                playerX = 1;
         Dodge.c   638            if(playerX > 127)
    0000096E E67F                   MOV         #127,R6
    00000970 2452                   MOV.L       R5,@R4
    00000972              L668:                             
    00000972 6342                   MOV.L       @R4,R3
    00000974 3367                   CMP/GT      R6,R3
    00000976 8B00                   BF          L669
         Dodge.c   639                playerX = 127;
    00000978 2462                   MOV.L       R6,@R4
    0000097A              L669:                             
         Dodge.c   640            if(playerY < 1)
    0000097A D421                   MOV.L       L738+12,R4 ; _playerY
    0000097C 6342                   MOV.L       @R4,R3
    0000097E 3353                   CMP/GE      R5,R3
    00000980 8900                   BT          L670
         Dodge.c   641                playerY = 1;
    00000982 2452                   MOV.L       R5,@R4
    00000984              L670:                             
         Dodge.c   642            if(playerY > 63)
    00000984 6342                   MOV.L       @R4,R3
    00000986 E53F                   MOV         #63,R5
    00000988 3357                   CMP/GT      R5,R3
    0000098A 8B00                   BF          L671
         Dodge.c   643                playerY = 63;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000098C 2452                   MOV.L       R5,@R4
    0000098E              L671:                             
         Dodge.c   644    }
    0000098E 4F26                   LDS.L       @R15+,PR
    00000990 6BF6                   MOV.L       @R15+,R11
    00000992 6CF6                   MOV.L       @R15+,R12
    00000994 6DF6                   MOV.L       @R15+,R13
    00000996 000B                   RTS
    00000998 6EF6                   MOV.L       @R15+,R14
         Dodge.c   645    
         Dodge.c   646    void Controls()
    0000099A              _Controls:                       ; function: Controls
                                                           ; frame size=8
    0000099A 2FE6                   MOV.L       R14,@-R15
    0000099C 4F22                   STS.L       PR,@-R15
         Dodge.c   647    {
         Dodge.c   648        if(!quit) {
    0000099E D219                   MOV.L       L738+16,R2 ; _quit
    000009A0 6320                   MOV.B       @R2,R3
    000009A2 2338                   TST         R3,R3
    000009A4 8B23                   BF          L672
         Dodge.c   649            if(IsKeyDown(KEY_CTRL_LEFT)) {
    000009A6 DE15                   MOV.L       L738+8,R14 ; _playerX
    000009A8 BBC8                   BSR         _KeyDown
    000009AA E426                   MOV         #38,R4
    000009AC 600C                   EXTU.B      R0,R0
    000009AE 2008                   TST         R0,R0
    000009B0 8D03                   BT/S        L673
         Dodge.c   650                playerX--;
         Dodge.c   651            }
         Dodge.c   652            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    000009B2 E41B                   MOV         #27,R4
    000009B4 63E2                   MOV.L       @R14,R3
    000009B6 73FF                   ADD         #-1,R3
    000009B8 2E32                   MOV.L       R3,@R14
    000009BA              L673:                             
    000009BA BBBF                   BSR         _KeyDown
    000009BC 0009                   NOP
    000009BE 600C                   EXTU.B      R0,R0
    000009C0 2008                   TST         R0,R0
    000009C2 8902                   BT          L674
         Dodge.c   653                playerX++;
    000009C4 62E2                   MOV.L       @R14,R2
    000009C6 7201                   ADD         #1,R2
    000009C8 2E22                   MOV.L       R2,@R14
    000009CA              L674:                             
         Dodge.c   654            }
         Dodge.c   655            if(IsKeyDown(KEY_CTRL_UP)) {
    000009CA DE0D                   MOV.L       L738+12,R14; _playerY
    000009CC BBB6                   BSR         _KeyDown
    000009CE E41C                   MOV         #28,R4
    000009D0 600C                   EXTU.B      R0,R0
    000009D2 2008                   TST         R0,R0
    000009D4 8D03                   BT/S        L675
         Dodge.c   656                playerY--;
         Dodge.c   657            }
         Dodge.c   658            if(IsKeyDown(KEY_CTRL_DOWN)) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009D6 E425                   MOV         #37,R4
    000009D8 63E2                   MOV.L       @R14,R3
    000009DA 73FF                   ADD         #-1,R3
    000009DC 2E32                   MOV.L       R3,@R14
    000009DE              L675:                             
    000009DE BBAD                   BSR         _KeyDown
    000009E0 0009                   NOP
    000009E2 600C                   EXTU.B      R0,R0
    000009E4 2008                   TST         R0,R0
    000009E6 8902                   BT          L672
         Dodge.c   659                playerY++;
    000009E8 62E2                   MOV.L       @R14,R2
    000009EA 7201                   ADD         #1,R2
    000009EC 2E22                   MOV.L       R2,@R14
    000009EE              L672:                             
         Dodge.c   660            }
         Dodge.c   661        }
         Dodge.c   662        
         Dodge.c   663    }
    000009EE 4F26                   LDS.L       @R15+,PR
    000009F0 000B                   RTS
    000009F2 6EF6                   MOV.L       @R15+,R14
    000009F4              L738:                             
    000009F4 0080                   .DATA.W     H'0080
    000009F6 0000                   .DATA.W     0
    000009F8 <00000000>             .DATA.L     __adds
    000009FC <00000000>             .DATA.L     _playerX
    00000A00 <00000000>             .DATA.L     _playerY
    00000A04 <00000000>             .DATA.L     _quit
         Dodge.c   664    
         Dodge.c   665    int randomInt(int max) {
    00000A08              _randomInt:                      ; function: randomInt
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __muld, __divdr, __dtoi, __itod
    00000A08 4F22                   STS.L       PR,@-R15
    00000A0A 7FF4                   ADD         #-12,R15
         Dodge.c   666        double normalized = (double)rand() / (double)RAND_MAX;
    00000A0C D35F                   MOV.L       L739,R3    ; _rand
    00000A0E 430B                   JSR         @R3
    00000A10 2F42                   MOV.L       R4,@R15
    00000A12 7FF8                   ADD         #-8,R15
    00000A14 D25E                   MOV.L       L739+4,R2  ; __itod
    00000A16 420B                   JSR         @R2
    00000A18 2FF6                   MOV.L       R15,@-R15
    00000A1A E300                   MOV         #0,R3
    00000A1C D25E                   MOV.L       L739+12,R2 ; __divdr
    00000A1E 2F36                   MOV.L       R3,@-R15
    00000A20 D35C                   MOV.L       L739+8,R3  ; H'40DFFFC0
    00000A22 2F36                   MOV.L       R3,@-R15
    00000A24 61F3                   MOV         R15,R1
    00000A26 7114                   ADD         #20,R1
    00000A28 420B                   JSR         @R2
    00000A2A 2F16                   MOV.L       R1,@-R15
         Dodge.c   667        return (int)(normalized * (double)max);
    00000A2C D358                   MOV.L       L739+4,R3  ; __itod
    00000A2E 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A30 50F2                   MOV.L       @(8,R15),R0
    00000A32 7FF8                   ADD         #-8,R15
    00000A34 430B                   JSR         @R3
    00000A36 2FF6                   MOV.L       R15,@-R15
    00000A38 52F6                   MOV.L       @(24,R15),R2
    00000A3A 2F26                   MOV.L       R2,@-R15
    00000A3C 52F6                   MOV.L       @(24,R15),R2
    00000A3E 2F26                   MOV.L       R2,@-R15
    00000A40 D156                   MOV.L       L739+16,R1 ; __muld
    00000A42 63F3                   MOV         R15,R3
    00000A44 7310                   ADD         #16,R3
    00000A46 410B                   JSR         @R1
    00000A48 2F36                   MOV.L       R3,@-R15
    00000A4A D255                   MOV.L       L739+20,R2 ; __dtoi
    00000A4C 420B                   JSR         @R2
    00000A4E 0009                   NOP
         Dodge.c   668    }
    00000A50 7F0C                   ADD         #12,R15
    00000A52 4F26                   LDS.L       @R15+,PR
    00000A54 000B                   RTS
    00000A56 0009                   NOP
         Dodge.c   669    
         Dodge.c   670    #pragma region attacks
         Dodge.c   671    
         Dodge.c   672    // next projectile in this attack
         Dodge.c   673    void SpawnNext() {
    00000A58              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=48
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __negs, __itos
    00000A58 2FE6                   MOV.L       R14,@-R15
    00000A5A 2FD6                   MOV.L       R13,@-R15
    00000A5C 2FC6                   MOV.L       R12,@-R15
    00000A5E ED10                   MOV         #16,R13
    00000A60 2FB6                   MOV.L       R11,@-R15
    00000A62 EB00                   MOV         #0,R11
    00000A64 DC50                   MOV.L       L739+28,R12; _currentAttack
    00000A66 2FA6                   MOV.L       R10,@-R15
    00000A68 2F96                   MOV.L       R9,@-R15
    00000A6A 2F86                   MOV.L       R8,@-R15
    00000A6C 4F22                   STS.L       PR,@-R15
    00000A6E D94D                   MOV.L       L739+24,R9 ; _projectileIndex
    00000A70 60C2                   MOV.L       @R12,R0
    00000A72 8800                   CMP/EQ      #0,R0
    00000A74 8D0A                   BT/S        L577
    00000A76 6E92                   MOV.L       @R9,R14
    00000A78 8801                   CMP/EQ      #1,R0
    00000A7A 891D                   BT          L578
    00000A7C 8802                   CMP/EQ      #2,R0
    00000A7E 894D                   BT          L579
    00000A80 8803                   CMP/EQ      #3,R0
    00000A82 8B01                   BF          L740
    00000A84 A0A0                   BRA         L580
    00000A86 0009                   NOP
    00000A88              L740:                             
    00000A88 A0D5                   BRA         L581
    00000A8A 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A8C              L577:                            ; case label 
         Dodge.c   674        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   675        #pragma region a whole bunch of variable declarations
         Dodge.c   676        int mod;
         Dodge.c   677        int mod2;
         Dodge.c   678        int xPos;
         Dodge.c   679        int yPos;
         Dodge.c   680        int direction;
         Dodge.c   681        float directionX;
         Dodge.c   682        float directionY;
         Dodge.c   683        int i;
         Dodge.c   684        int j;
         Dodge.c   685        int xToCenter;
         Dodge.c   686        int yToCenter;
         Dodge.c   687        #pragma endregion
         Dodge.c   688        switch (currentAttack)
         Dodge.c   689        {
         Dodge.c   690            case 0: // horizontally from either side, accelerating
         Dodge.c   691                mod = projectileIndex % 2;
    00000A8C 60E3                   MOV         R14,R0
    00000A8E 4011                   CMP/PZ      R0
    00000A90 8B01                   BF          L679
    00000A92 A005                   BRA         L680
    00000A94 C901                   AND         #1,R0
    00000A96              L679:                             
    00000A96 6007                   NOT         R0,R0
    00000A98 7001                   ADD         #1,R0
    00000A9A C901                   AND         #1,R0
    00000A9C 6007                   NOT         R0,R0
    00000A9E 7001                   ADD         #1,R0
    00000AA0              L680:                             
    00000AA0 6403                   MOV         R0,R4
         Dodge.c   692                xPos = mod == 0 ? 1 : 128 - 1;
    00000AA2 2448                   TST         R4,R4
    00000AA4 8B01                   BF          L681
    00000AA6 A001                   BRA         L682
    00000AA8 ED01                   MOV         #1,R13
    00000AAA              L681:                             
    00000AAA ED7F                   MOV         #127,R13
    00000AAC              L682:                             
         Dodge.c   693                direction = mod == 0 ? 1 : -1;
    00000AAC 2448                   TST         R4,R4
    00000AAE 8B01                   BF          L741
    00000AB0 A0D3                   BRA         L726
    00000AB2 0009                   NOP
    00000AB4              L741:                             
    00000AB4 A0D4                   BRA         L574
    00000AB6 EAFF                   MOV         #-1,R10
    00000AB8              L578:                            ; case label 
         Dodge.c   694                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, direction * 0.1f, 0);
         Dodge.c   695                break;
         Dodge.c   696            case 1: // circle, constant speed
         Dodge.c   697                directionX = (((projectileIndex + 8) % 16) - 8);
    00000AB8 60E3                   MOV         R14,R0
    00000ABA 7008                   ADD         #8,R0
    00000ABC 4011                   CMP/PZ      R0
    00000ABE 8B01                   BF          L685




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AC0 A005                   BRA         L686
    00000AC2 C90F                   AND         #15,R0
    00000AC4              L685:                             
    00000AC4 6007                   NOT         R0,R0
    00000AC6 7001                   ADD         #1,R0
    00000AC8 C90F                   AND         #15,R0
    00000ACA 6007                   NOT         R0,R0
    00000ACC 7001                   ADD         #1,R0
    00000ACE              L686:                             
    00000ACE D237                   MOV.L       L739+32,R2 ; __itos
    00000AD0 420B                   JSR         @R2
    00000AD2 70F8                   ADD         #-8,R0
    00000AD4 6D03                   MOV         R0,R13
         Dodge.c   698                directionY = ((projectileIndex % 16) - 8);
    00000AD6 60E3                   MOV         R14,R0
    00000AD8 4011                   CMP/PZ      R0
    00000ADA 8B01                   BF          L687
    00000ADC A005                   BRA         L688
    00000ADE C90F                   AND         #15,R0
    00000AE0              L687:                             
    00000AE0 6007                   NOT         R0,R0
    00000AE2 7001                   ADD         #1,R0
    00000AE4 C90F                   AND         #15,R0
    00000AE6 6007                   NOT         R0,R0
    00000AE8 7001                   ADD         #1,R0
    00000AEA              L688:                             
    00000AEA D230                   MOV.L       L739+32,R2 ; __itos
    00000AEC 420B                   JSR         @R2
    00000AEE 70F8                   ADD         #-8,R0
         Dodge.c   699                SpawnProjectile(64, 32, directionX, directionY, 0, 0);
    00000AF0 D52F                   MOV.L       L739+36,R5 ; H'42000000
    00000AF2 6E03                   MOV         R0,R14
    00000AF4 D42F                   MOV.L       L739+40,R4 ; H'42800000
    00000AF6 E300                   MOV         #0,R3
    00000AF8 2F36                   MOV.L       R3,@-R15
    00000AFA 67E3                   MOV         R14,R7
    00000AFC 2F36                   MOV.L       R3,@-R15
    00000AFE BD87                   BSR         _SpawnProjectile
    00000B00 66D3                   MOV         R13,R6
         Dodge.c   700                SpawnProjectile(64, 32, -directionX, directionY, 0, 0);
    00000B02 E300                   MOV         #0,R3
    00000B04 D22C                   MOV.L       L739+44,R2 ; __negs
    00000B06 67E3                   MOV         R14,R7
    00000B08 2F36                   MOV.L       R3,@-R15
    00000B0A 2F36                   MOV.L       R3,@-R15
    00000B0C 420B                   JSR         @R2
    00000B0E 60D3                   MOV         R13,R0
    00000B10 D527                   MOV.L       L739+36,R5 ; H'42000000
    00000B12 D428                   MOV.L       L739+40,R4 ; H'42800000
    00000B14 BD7C                   BSR         _SpawnProjectile
    00000B16 6603                   MOV         R0,R6
         Dodge.c   701                break;
    00000B18 A0BA                   BRA         L678
    00000B1A 7F10                   ADD         #16,R15
    00000B1C              L579:                            ; case label 
         Dodge.c   702            case 2: // vertically from either side, constant speed
         Dodge.c   703                if(projectileIndex % 5 == 0) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B1C D227                   MOV.L       L739+48,R2 ; __modls
    00000B1E 61E3                   MOV         R14,R1
    00000B20 420B                   JSR         @R2
    00000B22 E005                   MOV         #5,R0
    00000B24 2008                   TST         R0,R0
    00000B26 8901                   BT          L742
    00000B28 A0B2                   BRA         L678
    00000B2A 0009                   NOP
    00000B2C              L742:                             
         Dodge.c   704                    if(projectileIndex % 10 == 0) {
    00000B2C D323                   MOV.L       L739+48,R3 ; __modls
    00000B2E 61E3                   MOV         R14,R1
    00000B30 430B                   JSR         @R3
    00000B32 E00A                   MOV         #10,R0
    00000B34 2008                   TST         R0,R0
    00000B36 8B14                   BF          L690
         Dodge.c   705                        for (i = 0; i < 16; i++)
    00000B38 6AB3                   MOV         R11,R10
    00000B3A A00E                   BRA         L691
    00000B3C 6EB3                   MOV         R11,R14
    00000B3E              L692:                             
         Dodge.c   706                        {
         Dodge.c   707                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0);
    00000B3E E200                   MOV         #0,R2
    00000B40 D71F                   MOV.L       L739+52,R7 ; H'40000000
    00000B42 6623                   MOV         R2,R6
    00000B44 D319                   MOV.L       L739+32,R3 ; __itos
    00000B46 6523                   MOV         R2,R5
    00000B48 2F26                   MOV.L       R2,@-R15
    00000B4A 2F26                   MOV.L       R2,@-R15
    00000B4C 430B                   JSR         @R3
    00000B4E 60E3                   MOV         R14,R0
    00000B50 BD5E                   BSR         _SpawnProjectile
    00000B52 6403                   MOV         R0,R4
    00000B54 7F08                   ADD         #8,R15
    00000B56 7A01                   ADD         #1,R10
    00000B58 7E08                   ADD         #8,R14
    00000B5A              L691:                             
    00000B5A 3AD3                   CMP/GE      R13,R10
    00000B5C 8BEF                   BF          L692
    00000B5E A097                   BRA         L678
    00000B60 0009                   NOP
    00000B62              L690:                             
         Dodge.c   708                        }
         Dodge.c   709                    }
         Dodge.c   710                    else {
         Dodge.c   711                        for (i = 0; i < 16; i++)
    00000B62 6AB3                   MOV         R11,R10
    00000B64 A00E                   BRA         L694
    00000B66 EE04                   MOV         #4,R14
    00000B68              L695:                             
         Dodge.c   712                        {
         Dodge.c   713                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0);
    00000B68 D716                   MOV.L       L739+56,R7 ; H'C0000000
    00000B6A E200                   MOV         #0,R2
    00000B6C D511                   MOV.L       L739+40,R5 ; H'42800000
    00000B6E 6623                   MOV         R2,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B70 D30E                   MOV.L       L739+32,R3 ; __itos
    00000B72 2F26                   MOV.L       R2,@-R15
    00000B74 2F26                   MOV.L       R2,@-R15
    00000B76 430B                   JSR         @R3
    00000B78 60E3                   MOV         R14,R0
    00000B7A BD49                   BSR         _SpawnProjectile
    00000B7C 6403                   MOV         R0,R4
    00000B7E 7F08                   ADD         #8,R15
    00000B80 7A01                   ADD         #1,R10
    00000B82 7E08                   ADD         #8,R14
    00000B84              L694:                             
    00000B84 3AD3                   CMP/GE      R13,R10
    00000B86 8BEF                   BF          L695
         Dodge.c   714                        }
         Dodge.c   715                    }
         Dodge.c   716                    
         Dodge.c   717                }
         Dodge.c   718                break;
    00000B88 A082                   BRA         L678
    00000B8A 0009                   NOP
    00000B8C              L739:                             
    00000B8C <00000000>             .DATA.L     _rand
    00000B90 <00000000>             .DATA.L     __itod
    00000B94 40DFFFC0               .DATA.L     H'40DFFFC0
    00000B98 <00000000>             .DATA.L     __divdr
    00000B9C <00000000>             .DATA.L     __muld
    00000BA0 <00000000>             .DATA.L     __dtoi
    00000BA4 <00000000>             .DATA.L     _projectileIndex
    00000BA8 <00000000>             .DATA.L     _currentAttack
    00000BAC <00000000>             .DATA.L     __itos
    00000BB0 42000000               .DATA.L     H'42000000
    00000BB4 42800000               .DATA.L     H'42800000
    00000BB8 <00000000>             .DATA.L     __negs
    00000BBC <00000000>             .DATA.L     __modls
    00000BC0 40000000               .DATA.L     H'40000000
    00000BC4 C0000000               .DATA.L     H'C0000000
    00000BC8              L580:                            ; case label 
    00000BC8 987F                   MOV.W       L743,R8    ; H'0080
         Dodge.c   719            case 3: // random directions, accelerate back to center
         Dodge.c   720                for (i = 0; i < 16; i++)
    00000BCA A030                   BRA         L696
    00000BCC 6AD3                   MOV         R13,R10
    00000BCE              L697:                             
         Dodge.c   721                {
         Dodge.c   722                    xPos = randomInt(128);
    00000BCE BF1B                   BSR         _randomInt
    00000BD0 6483                   MOV         R8,R4
    00000BD2 6E03                   MOV         R0,R14
         Dodge.c   723                    yPos = randomInt(64);
    00000BD4 BF18                   BSR         _randomInt
    00000BD6 E440                   MOV         #64,R4
         Dodge.c   724                    directionX = (xPos - 64) * 0.01f  * 8;
    00000BD8 D33C                   MOV.L       L743+2,R3  ; __itos
    00000BDA 6403                   MOV         R0,R4
    00000BDC 60E3                   MOV         R14,R0
    00000BDE 430B                   JSR         @R3
    00000BE0 70C0                   ADD         #-64,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BE2 D13B                   MOV.L       L743+6,R1  ; H'3DA3D70A
    00000BE4 D23B                   MOV.L       L743+10,R2 ; __muls
    00000BE6 420B                   JSR         @R2
    00000BE8 0009                   NOP
    00000BEA 6D03                   MOV         R0,R13
         Dodge.c   725                    directionY = (yPos - 32) * 0.02f * 8;
    00000BEC D337                   MOV.L       L743+2,R3  ; __itos
    00000BEE 6043                   MOV         R4,R0
    00000BF0 430B                   JSR         @R3
    00000BF2 70E0                   ADD         #-32,R0
    00000BF4 D138                   MOV.L       L743+14,R1 ; H'3E23D70A
    00000BF6 D237                   MOV.L       L743+10,R2 ; __muls
    00000BF8 420B                   JSR         @R2
    00000BFA 0009                   NOP
         Dodge.c   726                    SpawnProjectile(64, 32, directionX, directionY, -directionX * 0.04f, -directionY * 0.04f);
    00000BFC D335                   MOV.L       L743+10,R3 ; __muls
    00000BFE 6E03                   MOV         R0,R14
    00000C00 6103                   MOV         R0,R1
    00000C02 D036                   MOV.L       L743+18,R0 ; H'3D23D70A
    00000C04 430B                   JSR         @R3
    00000C06 0009                   NOP
    00000C08 D235                   MOV.L       L743+22,R2 ; __negs
    00000C0A 420B                   JSR         @R2
    00000C0C 0009                   NOP
    00000C0E 2F06                   MOV.L       R0,@-R15
    00000C10 D032                   MOV.L       L743+18,R0 ; H'3D23D70A
    00000C12 D330                   MOV.L       L743+10,R3 ; __muls
    00000C14 430B                   JSR         @R3
    00000C16 61D3                   MOV         R13,R1
    00000C18 D231                   MOV.L       L743+22,R2 ; __negs
    00000C1A 420B                   JSR         @R2
    00000C1C 0009                   NOP
    00000C1E 67E3                   MOV         R14,R7
    00000C20 D530                   MOV.L       L743+26,R5 ; H'42000000
    00000C22 2F06                   MOV.L       R0,@-R15
    00000C24 D430                   MOV.L       L743+30,R4 ; H'42800000
    00000C26 BCF3                   BSR         _SpawnProjectile
    00000C28 66D3                   MOV         R13,R6
    00000C2A 7F08                   ADD         #8,R15
    00000C2C 7AFF                   ADD         #-1,R10
    00000C2E              L696:                             
    00000C2E 2AA8                   TST         R10,R10
    00000C30 8BCD                   BF          L697
         Dodge.c   727                }
         Dodge.c   728                
         Dodge.c   729                break;
    00000C32 A02D                   BRA         L678
    00000C34 0009                   NOP
    00000C36              L581:                            ; default label 
         Dodge.c   730            default:
         Dodge.c   731                mod2 = projectileIndex % 2;
    00000C36 60E3                   MOV         R14,R0
    00000C38 4011                   CMP/PZ      R0
    00000C3A 8B01                   BF          L698
    00000C3C A005                   BRA         L699
    00000C3E C901                   AND         #1,R0
    00000C40              L698:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C40 6007                   NOT         R0,R0
    00000C42 7001                   ADD         #1,R0
    00000C44 C901                   AND         #1,R0
    00000C46 6007                   NOT         R0,R0
    00000C48 7001                   ADD         #1,R0
    00000C4A              L699:                             
    00000C4A 6403                   MOV         R0,R4
         Dodge.c   732                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000C4C 2448                   TST         R4,R4
    00000C4E 8B01                   BF          L700
    00000C50 A001                   BRA         L701
    00000C52 ED01                   MOV         #1,R13
    00000C54              L700:                             
    00000C54 ED7F                   MOV         #127,R13
    00000C56              L701:                             
         Dodge.c   733                direction = mod2 == 0 ? 1 : -1;
    00000C56 2448                   TST         R4,R4
    00000C58 8B01                   BF          L702
    00000C5A              L726:                             
    00000C5A A001                   BRA         L574
    00000C5C EA01                   MOV         #1,R10
    00000C5E              L702:                             
    00000C5E EAFF                   MOV         #-1,R10
    00000C60              L574:
         Dodge.c   734                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
    00000C60 D21A                   MOV.L       L743+2,R2  ; __itos
    00000C62 E300                   MOV         #0,R3
    00000C64 2F36                   MOV.L       R3,@-R15
    00000C66 420B                   JSR         @R2
    00000C68 60A3                   MOV         R10,R0
    00000C6A D120                   MOV.L       L743+34,R1 ; H'3DCCCCCD
    00000C6C D219                   MOV.L       L743+10,R2 ; __muls
    00000C6E 420B                   JSR         @R2
    00000C70 0009                   NOP
    00000C72 6733                   MOV         R3,R7
    00000C74 D215                   MOV.L       L743+2,R2  ; __itos
    00000C76 6633                   MOV         R3,R6
    00000C78 2F06                   MOV.L       R0,@-R15
    00000C7A 60E3                   MOV         R14,R0
    00000C7C 7001                   ADD         #1,R0
    00000C7E 420B                   JSR         @R2
    00000C80 4008                   SHLL2       R0
    00000C82 6503                   MOV         R0,R5
    00000C84 D111                   MOV.L       L743+2,R1  ; __itos
    00000C86 410B                   JSR         @R1
    00000C88 60D3                   MOV         R13,R0
    00000C8A BCC1                   BSR         _SpawnProjectile
    00000C8C 6403                   MOV         R0,R4
    00000C8E 7F08                   ADD         #8,R15
         Dodge.c   735                break;
    00000C90              L678:                             
         Dodge.c   736        }
         Dodge.c   737    
         Dodge.c   738        projectileIndex++;
    00000C90 6292                   MOV.L       @R9,R2
    00000C92 7201                   ADD         #1,R2
    00000C94 2922                   MOV.L       R2,@R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   739        if(projectileIndex > maxProjectiles) {
    00000C96 6123                   MOV         R2,R1
    00000C98 D015                   MOV.L       L743+38,R0 ; _maxProjectiles
    00000C9A 6302                   MOV.L       @R0,R3
    00000C9C 3137                   CMP/GT      R3,R1
    00000C9E 8B0B                   BF          L704
         Dodge.c   740            KillTimer(ID_USER_TIMER5); // stop this attack
    00000CA0 D114                   MOV.L       L743+42,R1 ; _KillTimer
    00000CA2 410B                   JSR         @R1
    00000CA4 E405                   MOV         #5,R4
         Dodge.c   741            currentAttack++;
    00000CA6 63C2                   MOV.L       @R12,R3
         Dodge.c   742            if(currentAttack >= attacksTotal)
    00000CA8 D013                   MOV.L       L743+46,R0 ; _attacksTotal
    00000CAA 7301                   ADD         #1,R3
    00000CAC 2C32                   MOV.L       R3,@R12
    00000CAE 6133                   MOV         R3,R1
    00000CB0 6202                   MOV.L       @R0,R2
    00000CB2 3123                   CMP/GE      R2,R1
    00000CB4 8B00                   BF          L704
         Dodge.c   743                currentAttack = 0;
    00000CB6 2CB2                   MOV.L       R11,@R12
    00000CB8              L704:                             
         Dodge.c   744        }
         Dodge.c   745    }
    00000CB8 4F26                   LDS.L       @R15+,PR
    00000CBA 68F6                   MOV.L       @R15+,R8
    00000CBC 69F6                   MOV.L       @R15+,R9
    00000CBE 6AF6                   MOV.L       @R15+,R10
    00000CC0 6BF6                   MOV.L       @R15+,R11
    00000CC2 6CF6                   MOV.L       @R15+,R12
    00000CC4 6DF6                   MOV.L       @R15+,R13
    00000CC6 000B                   RTS
    00000CC8 6EF6                   MOV.L       @R15+,R14
    00000CCA              L743:                             
    00000CCA 0080                   .DATA.W     H'0080
    00000CCC <00000000>             .DATA.L     __itos
    00000CD0 3DA3D70A               .DATA.L     H'3DA3D70A
    00000CD4 <00000000>             .DATA.L     __muls
    00000CD8 3E23D70A               .DATA.L     H'3E23D70A
    00000CDC 3D23D70A               .DATA.L     H'3D23D70A
    00000CE0 <00000000>             .DATA.L     __negs
    00000CE4 42000000               .DATA.L     H'42000000
    00000CE8 42800000               .DATA.L     H'42800000
    00000CEC 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000CF0 <00000000>             .DATA.L     _maxProjectiles
    00000CF4 <00000000>             .DATA.L     _KillTimer
    00000CF8 <00000000>             .DATA.L     _attacksTotal
         Dodge.c   746    // the next "attack"
         Dodge.c   747    void NextProjectiles() {
    00000CFC              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   748        projectileIndex = 0;
    00000CFC D231                   MOV.L       L744+4,R2  ; _projectileIndex
    00000CFE E300                   MOV         #0,R3
         Dodge.c   749    
         Dodge.c   750        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   751        switch (currentAttack)
    00000D00 D431                   MOV.L       L744+8,R4  ; _maxProjectiles
    00000D02 2232                   MOV.L       R3,@R2
    00000D04 D331                   MOV.L       L744+12,R3 ; _currentAttack
    00000D06 6032                   MOV.L       @R3,R0
    00000D08 8800                   CMP/EQ      #0,R0
    00000D0A 8D10                   BT/S        L728
    00000D0C E510                   MOV         #16,R5
    00000D0E 8801                   CMP/EQ      #1,R0
    00000D10 8905                   BT          L583
    00000D12 8802                   CMP/EQ      #2,R0
    00000D14 8906                   BT          L584
    00000D16 8803                   CMP/EQ      #3,R0
    00000D18 8906                   BT          L585
    00000D1A A008                   BRA         L728
    00000D1C 0009                   NOP
    00000D1E              L583:                            ; case label 
         Dodge.c   752        {
         Dodge.c   753            case 0:
         Dodge.c   754                maxProjectiles = 16;
         Dodge.c   755                break;
         Dodge.c   756            case 1:
         Dodge.c   757                maxProjectiles = 32;
    00000D1E E020                   MOV         #32,R0
         Dodge.c   758                break;
    00000D20 A006                   BRA         L706
    00000D22 2402                   MOV.L       R0,@R4
    00000D24              L584:                            ; case label 
         Dodge.c   759            case 2:
         Dodge.c   760                maxProjectiles = 15;
         Dodge.c   761                break;
    00000D24 A001                   BRA         L727
    00000D26 E10F                   MOV         #15,R1
    00000D28              L585:                            ; case label 
         Dodge.c   762            case 3:
         Dodge.c   763                maxProjectiles = 2;
    00000D28 E102                   MOV         #2,R1
         Dodge.c   764                break;
    00000D2A              L727:                             
    00000D2A A001                   BRA         L706
    00000D2C 2412                   MOV.L       R1,@R4
    00000D2E              L728:                             
         Dodge.c   765            default:
         Dodge.c   766                maxProjectiles = 16;
    00000D2E 2452                   MOV.L       R5,@R4
    00000D30              L706:                             
         Dodge.c   767                break;
         Dodge.c   768        }
         Dodge.c   769    
         Dodge.c   770        SetTimer(ID_USER_TIMER5, 100, SpawnNext);
    00000D30 D627                   MOV.L       L744+16,R6 ; _SpawnNext
    00000D32 E564                   MOV         #100,R5
    00000D34 D327                   MOV.L       L744+20,R3 ; _SetTimer
    00000D36 432B                   JMP         @R3
    00000D38 E405                   MOV         #5,R4
         Dodge.c   771    }
         Dodge.c   772    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   773    #pragma endregion
         Dodge.c   774    
         Dodge.c   775    #pragma endregion
         Dodge.c   776    
         Dodge.c   777    /** Add-in entry point
         Dodge.c   778     * 
         Dodge.c   779     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   780     *             strip_no - Strip number from eActivity
         Dodge.c   781     * 
         Dodge.c   782     * Returns:    NOT error
         Dodge.c   783     */
         Dodge.c   784    // Start function
         Dodge.c   785    int AddIn_main(int app_mode, unsigned short strip_no)
    00000D3A              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=20
    00000D3A 2FE6                   MOV.L       R14,@-R15
    00000D3C 2FD6                   MOV.L       R13,@-R15
    00000D3E 4F22                   STS.L       PR,@-R15
    00000D40 DD25                   MOV.L       L744+24,R13; _true
    00000D42 7FF8                   ADD         #-8,R15
         Dodge.c   786    {
         Dodge.c   787        unsigned int i, j; // Iteration variables
         Dodge.c   788        unsigned char str[3];
         Dodge.c   789        unsigned int key;  // Keyboard input
         Dodge.c   790    
         Dodge.c   791        // Clear out the display
         Dodge.c   792        Bdisp_AllClr_DDVRAM();
    00000D44 D325                   MOV.L       L744+28,R3 ; _Bdisp_AllClr_DDVRAM
    00000D46 430B                   JSR         @R3
    00000D48 0009                   NOP
         Dodge.c   793        RenderMainMenu();
    00000D4A BAF0                   BSR         _RenderMainMenu
    00000D4C 0009                   NOP
    00000D4E DE24                   MOV.L       L744+32,R14; _timer
         Dodge.c   794        
         Dodge.c   795        while(true) { // menu
    00000D50 A016                   BRA         L707
    00000D52 0009                   NOP
    00000D54              L708:                             
         Dodge.c   796            timer++; // we will use number of cycles until the player starts as our random seed, as it is high
                         +ly unlikely to be the same
    00000D54 62E2                   MOV.L       @R14,R2
    00000D56 7201                   ADD         #1,R2
    00000D58 2E22                   MOV.L       R2,@R14
         Dodge.c   797            if(IsKeyDown(KEY_CTRL_EXE)) {
    00000D5A B9EF                   BSR         _KeyDown
    00000D5C E41F                   MOV         #31,R4
    00000D5E 600C                   EXTU.B      R0,R0
    00000D60 2008                   TST         R0,R0
    00000D62 8B10                   BF          L710
         Dodge.c   798                break;
         Dodge.c   799            }
         Dodge.c   800            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000D64 B9EA                   BSR         _KeyDown
    00000D66 E430                   MOV         #48,R4
    00000D68 600C                   EXTU.B      R0,R0
    00000D6A 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D6C 8B04                   BF          L712
    00000D6E B9E5                   BSR         _KeyDown
    00000D70 E42F                   MOV         #47,R4
    00000D72 600C                   EXTU.B      R0,R0
    00000D74 2008                   TST         R0,R0
    00000D76 8903                   BT          L707
    00000D78              L712:                             
         Dodge.c   801            {
         Dodge.c   802                AppQuit();
    00000D78 BA78                   BSR         _AppQuit
    00000D7A 0009                   NOP
         Dodge.c   803                break;
    00000D7C A003                   BRA         L710
    00000D7E 0009                   NOP
    00000D80              L707:                             
    00000D80 62D0                   MOV.B       @R13,R2
    00000D82 2228                   TST         R2,R2
    00000D84 8BE6                   BF          L708
    00000D86              L710:                             
         Dodge.c   804            }
         Dodge.c   805        }
         Dodge.c   806        srand(timer);
    00000D86 D317                   MOV.L       L744+36,R3 ; _srand
    00000D88 430B                   JSR         @R3
    00000D8A 64E2                   MOV.L       @R14,R4
         Dodge.c   807    
         Dodge.c   808        Bdisp_AllClr_DDVRAM();
    00000D8C D213                   MOV.L       L744+28,R2 ; _Bdisp_AllClr_DDVRAM
    00000D8E 420B                   JSR         @R2
    00000D90 0009                   NOP
         Dodge.c   809    
         Dodge.c   810        // Set up timers for rendering and ball
         Dodge.c   811        SetTimer(ID_USER_TIMER1, 50, RenderScreen);
    00000D92 E532                   MOV         #50,R5
    00000D94 DE0F                   MOV.L       L744+20,R14; _SetTimer
    00000D96 D614                   MOV.L       L744+40,R6 ; _RenderScreen
    00000D98 4E0B                   JSR         @R14
    00000D9A E401                   MOV         #1,R4
         Dodge.c   812        SetTimer(ID_USER_TIMER2, 50, Controls);
    00000D9C D613                   MOV.L       L744+44,R6 ; _Controls
    00000D9E E532                   MOV         #50,R5
    00000DA0 4E0B                   JSR         @R14
    00000DA2 E402                   MOV         #2,R4
         Dodge.c   813        SetTimer(ID_USER_TIMER3, 50, Physics);
    00000DA4 D612                   MOV.L       L744+48,R6 ; _Physics
    00000DA6 E532                   MOV         #50,R5
    00000DA8 4E0B                   JSR         @R14
    00000DAA E403                   MOV         #3,R4
         Dodge.c   814        SetTimer(ID_USER_TIMER4, 5000, NextProjectiles); // should be 5000, shortened for testing
    00000DAC D611                   MOV.L       L744+52,R6 ; _NextProjectiles
    00000DAE 9507                   MOV.W       L744,R5    ; H'1388
    00000DB0 4E0B                   JSR         @R14
    00000DB2 E404                   MOV         #4,R4
         Dodge.c   815    
         Dodge.c   816        // Set quit handler
         Dodge.c   817        SetQuitHandler(AppQuit);
    00000DB4 D410                   MOV.L       L744+56,R4 ; _AppQuit




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DB6 D311                   MOV.L       L744+60,R3 ; _SetQuitHandler
    00000DB8 430B                   JSR         @R3
    00000DBA 0009                   NOP
         Dodge.c   818    
         Dodge.c   819        // The main thread manages the keys
         Dodge.c   820        while (IsKeyUp(KEY_CTRL_MENU))
    00000DBC A03D                   BRA         L713
    00000DBE 0009                   NOP
    00000DC0              L744:                             
    00000DC0 1388                   .DATA.W     H'1388
    00000DC2 0000                   .DATA.W     0
    00000DC4 <00000000>             .DATA.L     _projectileIndex
    00000DC8 <00000000>             .DATA.L     _maxProjectiles
    00000DCC <00000000>             .DATA.L     _currentAttack
    00000DD0 <00000000>             .DATA.L     _SpawnNext
    00000DD4 <00000000>             .DATA.L     _SetTimer
    00000DD8 <00000000>             .DATA.L     _true
    00000DDC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000DE0 <00000000>             .DATA.L     _timer
    00000DE4 <00000000>             .DATA.L     _srand
    00000DE8 <00000000>             .DATA.L     _RenderScreen
    00000DEC <00000000>             .DATA.L     _Controls
    00000DF0 <00000000>             .DATA.L     _Physics
    00000DF4 <00000000>             .DATA.L     _NextProjectiles
    00000DF8 <00000000>             .DATA.L     _AppQuit
    00000DFC <00000000>             .DATA.L     _SetQuitHandler
    00000E00              L714:                             
         Dodge.c   821        {
         Dodge.c   822            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00000E00 DE14                   MOV.L       L745,R14   ; _GetKeyWait
    00000E02 67F3                   MOV         R15,R7
    00000E04 E600                   MOV         #0,R6
    00000E06 6563                   MOV         R6,R5
    00000E08 4E0B                   JSR         @R14
    00000E0A 6463                   MOV         R6,R4
         Dodge.c   823        
         Dodge.c   824            if (keyResp == KEYREP_KEYEVENT)
    00000E0C 8801                   CMP/EQ      #1,R0
    00000E0E 8F06                   BF/S        L715
    00000E10 6403                   MOV         R0,R4
         Dodge.c   825            {
         Dodge.c   826                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    00000E12 60F2                   MOV.L       @R15,R0
    00000E14 8830                   CMP/EQ      #48,R0
    00000E16 890C                   BT          L575
    00000E18 60F2                   MOV.L       @R15,R0
    00000E1A 882F                   CMP/EQ      #47,R0
    00000E1C 8909                   BT          L575
    00000E1E              L715:                             
         Dodge.c   827                {
         Dodge.c   828                    AppQuit();
         Dodge.c   829                    break;
         Dodge.c   830                }
         Dodge.c   831            }
         Dodge.c   832    
         Dodge.c   833            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000E1E B98D                   BSR         _KeyDown




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E20 E430                   MOV         #48,R4
    00000E22 600C                   EXTU.B      R0,R0
    00000E24 2008                   TST         R0,R0
    00000E26 8B04                   BF          L575
    00000E28 B988                   BSR         _KeyDown
    00000E2A E42F                   MOV         #47,R4
    00000E2C 600C                   EXTU.B      R0,R0
    00000E2E 2008                   TST         R0,R0
    00000E30 8903                   BT          L713
    00000E32              L575:
         Dodge.c   834            {
         Dodge.c   835                AppQuit();
    00000E32 BA1B                   BSR         _AppQuit
    00000E34 0009                   NOP
         Dodge.c   836                break;
    00000E36 A005                   BRA         L718
    00000E38 0009                   NOP
    00000E3A              L713:                             
    00000E3A B97F                   BSR         _KeyDown
    00000E3C E430                   MOV         #48,R4
    00000E3E 600C                   EXTU.B      R0,R0
    00000E40 2008                   TST         R0,R0
    00000E42 89DD                   BT          L714
    00000E44              L718:                             
         Dodge.c   837            }
         Dodge.c   838        }
         Dodge.c   839    
         Dodge.c   840        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   841        AppQuit();
    00000E44 BA12                   BSR         _AppQuit
    00000E46 0009                   NOP
         Dodge.c   842    
         Dodge.c   843        // At the end, return application status
         Dodge.c   844        return true;
    00000E48 60D0                   MOV.B       @R13,R0
         Dodge.c   845    }
    00000E4A 7F08                   ADD         #8,R15
    00000E4C 4F26                   LDS.L       @R15+,PR
    00000E4E 6DF6                   MOV.L       @R15+,R13
    00000E50 000B                   RTS
    00000E52 6EF6                   MOV.L       @R15+,R14
    00000E54              L745:                             
    00000E54 <00000000>             .DATA.L     _GetKeyWait
         Dodge.c   846    
         Dodge.c   847    #pragma region Do not touch
         Dodge.c   848    
         Dodge.c   849    // Source code from here down should not be changed according to the
         Dodge.c   850    // CASIO SDK sample project.
         Dodge.c   851    
         Dodge.c   852    #pragma section _BR_Size
         Dodge.c   853    unsigned long BR_Size;
         Dodge.c   854    #pragma section
         Dodge.c   855    
         Dodge.c   856    #pragma section _TOP
         Dodge.c   857    
         Dodge.c   858    //****************************************************************************
         Dodge.c   859    //  InitializeSystem




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   860    //
         Dodge.c   861    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   862    //              OptionNum : Option Number (only eActivity)
         Dodge.c   863    //
         Dodge.c   864    //  retval  :   1 = No error / 0 = Error
         Dodge.c   865    //
         Dodge.c   866    //****************************************************************************
         Dodge.c   867    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   868    {
         Dodge.c   869        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L746+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L746:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   870    }
         Dodge.c   871    
         Dodge.c   872    #pragma section
         Dodge.c   873    
         Dodge.c   874    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _true:                           ; static: true
    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000004               .DATA.L     H'00000004
    0000001C              L442:
    0000001C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000000F0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000001C4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000         
    00000298 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    0000036C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000440 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101010101   
             0101010101   
             0101         
    00000514 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000101   
             0101010101   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100010000   
             0001000001   
             0001000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000         
    000005E8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010001 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000100   
             0000010000   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000006BC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0001000100   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000100   
             0100         
    00000790 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000101 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,
             0001000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0001000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000864 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0000010100   
             0000000000   
             0100000000   
             0000000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000         
    00000938 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0000000000   
             0100010101   
             0101010101   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0100         
    00000A0C 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'00,H'00,H'00
             0001000000   
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000         
    00000AE0 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000         
    00000BB4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0101010101   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0101010100   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0100000000   
             0000010000   
             0000000000   
             0000000000   
             0000         
    00000C88 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0100000001 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0001010100   
             0000000100   
             0100010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010101   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000         
    00000D5C 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010101 +                       H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000101 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0101010101 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,
             0100000000 +                       H'00,H'00,H'00,H'01
             0100000001   
             0000000100   
             0000000100   
             0000010000   
             0000000100   
             0000000000   
             0100000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000001   
             0000000001   
             0000000100   
             0000010000   
             0000010000   
             0001000000   
             0000010000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0001000000   
             0001         
    00000E30 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000001   
             0101010101   
             0000000000   
             0000000000   
             0000000101   
             0101010100   
             0000000000   
             0000000001   
             0000000001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0101010100   
             0000000001   
             0101000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000100   
             0000000000   
             0000000100   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000F04 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000010000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000FD8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0100000001   
             0001000100   
             0000000001   
             0100000000   
             0100000000   
             0000010101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0101010000   
             0000000000   
             0000000001   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000         
    000010AC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0100010000   
             0000000000   
             0000000100   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000010000   
             0000000000   
             0000000000   
             0100010001   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0100000000   
             0000         
    00001180 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000100 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0001000000   
             0100000100   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000010000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0001010101   
             0101010000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    00001254 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0101000000   
             0000010100   
             0000000000   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010101   
             0100000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001328 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000010101   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    000013FC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000101 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000000000   
             0101010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0100         
    000014D0 0100000000             .DATA.B     H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000010101   
             0000000000   
             0000000000   
             0000000000   
             0101000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000015A4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0101010101   
             0101010100   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001678 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00
             0000000001   
             0000000000   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000100   
             0000000000   
             0000000100   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000010000   
             0000010000   
             0000000000   
             0000         
    0000174C 0100000100             .DATA.B     H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001820 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000018F4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000019C8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001A9C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001B70 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001C44 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001D18 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001DEC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001EC0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001F94 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             00           
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _paused:                         ; static: paused
    00000010 01                     .DATA.B     H'01
    00000011              _quit:                           ; static: quit
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              _timer:                          ; static: timer
    00000014 00000000               .DATA.L     H'00000000
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00001000               .RES.L      1024
    00001000              _projectileIndex:                ; static: projectileIndex
    00001000 00000004               .RES.L      1
    00001004              _maxProjectiles:                 ; static: maxProjectiles
    00001004 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1










































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:46:51  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        59




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      874



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000E58 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000201C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000018 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00001008 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00003EA4 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           31
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          45
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           207






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmk4795.tmp 

