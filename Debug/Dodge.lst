SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\_Extra Space\CalculatorProjects\Dodge\Dodge.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c     1    // the skeleton of this code was stolen from https://github.com/itisrazza/casio-pong
         Dodge.c     2    
         Dodge.c     3    
         Dodge.c     4    // Import some libraries
         Dodge.c     5    #include "stdio.h"    // Standard IO
         Dodge.c     6    #include <stdlib.h>
         Dodge.c     7    #include "fxlib.h"    // CASIO fx-9860G SDK
         Dodge.c     8    #include "dispbios.h" // Display BIOS
         Dodge.c     9    #include "timer.h"    // Timer
         Dodge.c    10    
         Dodge.c    11    #pragma region KeyFixStuffMikeySentMe
         Dodge.c    12    
         Dodge.c    13    #define __KEYBIOS_H__
         Dodge.c    14    #define KEY_CHAR_0 71
         Dodge.c    15    #define KEY_CHAR_1 72
         Dodge.c    16    #define KEY_CHAR_2 62
         Dodge.c    17    #define KEY_CHAR_3 52
         Dodge.c    18    #define KEY_CHAR_4 73
         Dodge.c    19    #define KEY_CHAR_5 63
         Dodge.c    20    #define KEY_CHAR_6 53
         Dodge.c    21    #define KEY_CHAR_7 74
         Dodge.c    22    #define KEY_CHAR_8 64
         Dodge.c    23    #define KEY_CHAR_9 54
         Dodge.c    24    #define KEY_CHAR_DP 61
         Dodge.c    25    #define KEY_CHAR_EXP 51
         Dodge.c    26    #define KEY_CHAR_PMINUS 41
         Dodge.c    27    #define KEY_CHAR_PLUS 42
         Dodge.c    28    #define KEY_CHAR_MINUS 32
         Dodge.c    29    #define KEY_CHAR_MULT 43
         Dodge.c    30    #define KEY_CHAR_DIV 33
         Dodge.c    31    #define KEY_CHAR_FRAC 75
         Dodge.c    32    #define KEY_CHAR_LPAR 55
         Dodge.c    33    #define KEY_CHAR_RPAR 45
         Dodge.c    34    #define KEY_CHAR_COMMA 35
         Dodge.c    35    #define KEY_CHAR_STORE 25
         Dodge.c    36    #define KEY_CHAR_LOG 66
         Dodge.c    37    #define KEY_CHAR_LN 56
         Dodge.c    38    #define KEY_CHAR_SIN 46
         Dodge.c    39    #define KEY_CHAR_COS 36
         Dodge.c    40    #define KEY_CHAR_TAN 26
         Dodge.c    41    #define KEY_CHAR_SQUARE 67
         Dodge.c    42    #define KEY_CHAR_POW 57
         Dodge.c    43    #define KEY_CTRL_EXE 31
         Dodge.c    44    #define KEY_CTRL_DEL 44
         Dodge.c    45    #define KEY_CTRL_AC 32
         Dodge.c    46    #define KEY_CTRL_FD 65
         Dodge.c    47    #define KEY_CTRL_EXIT 47
         Dodge.c    48    #define KEY_CTRL_SHIFT 78
         Dodge.c    49    #define KEY_CTRL_ALPHA 77
         Dodge.c    50    #define KEY_CTRL_OPTN 68
         Dodge.c    51    #define KEY_CTRL_VARS 58
         Dodge.c    52    #define KEY_CTRL_UP 28
         Dodge.c    53    #define KEY_CTRL_DOWN 37
         Dodge.c    54    #define KEY_CTRL_LEFT 38




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c    55    #define KEY_CTRL_RIGHT 27
         Dodge.c    56    #define KEY_CTRL_F1 79
         Dodge.c    57    #define KEY_CTRL_F2 69
         Dodge.c    58    #define KEY_CTRL_F3 59
         Dodge.c    59    #define KEY_CTRL_F4 49
         Dodge.c    60    #define KEY_CTRL_F5 39
         Dodge.c    61    #define KEY_CTRL_F6 29
         Dodge.c    62    #define KEY_CTRL_MENU 48
         Dodge.c    63    #ifndef OS2Change
         Dodge.c    64    #define OS2Change
         Dodge.c    65    #ifndef OS2Change_GetOS2
         Dodge.c    66    #define OS2Change_GetOS2
         Dodge.c    67    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Dodge.c    68    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Dodge.c    69    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Dodge.c    70    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Dodge.c    71    {
         Dodge.c    72    unsigned char mainversion;
         Dodge.c    73    unsigned char minorversion;
         Dodge.c    74    unsigned short release;
         Dodge.c    75    unsigned short build;
         Dodge.c    76    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L764+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Dodge.c    77    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L764+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L764+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
         Dodge.c    78    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 201B                   OR          R1,R0
         Dodge.c    79    #define isOS2 (OSVersionAsInt() >= 0x02020000)
         Dodge.c    80    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Dodge.c    81    #endif
         Dodge.c    82    #ifndef OS2Change_Keyboard
         Dodge.c    83    #define OS2Change_Keyboard
         Dodge.c    84    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
         Dodge.c    85    {
         Dodge.c    86    char i;
         Dodge.c    87    for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L621:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L621
         Dodge.c    88    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
         Dodge.c    89    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Dodge.c    90    {
         Dodge.c    91    unsigned char result=0;
         Dodge.c    92    short*PORTB_CTRL=(void*)0xA4000102;
         Dodge.c    93    short*PORTM_CTRL=(void*)0xA4000118;
         Dodge.c    94    char*PORTB=(void*)0xA4000122;
         Dodge.c    95    char*PORTM=(void*)0xA4000138;
         Dodge.c    96    char*PORTA=(void*)0xA4000120;
         Dodge.c    97    short smask;
         Dodge.c    98    char cmask;
         Dodge.c    99    unsigned char column, row;
         Dodge.c   100    column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
         Dodge.c   101    row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
         Dodge.c   102    smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L622
    00000072 A005                   BRA         L623




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000074 C907                   AND         #7,R0
    00000076              L622:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L623:                             
         Dodge.c   103    cmask = ~( 1 << ( row %8) );
         Dodge.c   104    if(row <8)
    00000080 994B                   MOV.W       L764,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L764+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L764+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L764+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L624
    0000009E 7C36                   ADD         #54,R12
         Dodge.c   105    {
         Dodge.c   106      *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
         Dodge.c   107      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
         Dodge.c   108      delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
         Dodge.c   109      *PORTB = cmask;
    000000AE D221                   MOV.L       L764+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
         Dodge.c   110      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L758
    000000B8 CB0F                   OR          #15,R0
    000000BA              L624:                             
         Dodge.c   111    }
         Dodge.c   112    else
         Dodge.c   113    {
         Dodge.c   114      *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
         Dodge.c   115      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
         Dodge.c   116      delay();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
         Dodge.c   117      *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L764+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
         Dodge.c   118      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L758:                             
         Dodge.c   119    }
         Dodge.c   120    
         Dodge.c   121    delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
         Dodge.c   122    result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L764+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
         Dodge.c   123    delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
         Dodge.c   124    *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
         Dodge.c   125    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
         Dodge.c   126    delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
         Dodge.c   127    *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L764+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
         Dodge.c   128    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
         Dodge.c   129    delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
         Dodge.c   130    
         Dodge.c   131    return result;
    00000106 60F0                   MOV.B       @R15,R0
         Dodge.c   132    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L764:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
         Dodge.c   133    
         Dodge.c   134    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
         Dodge.c   135    {
         Dodge.c   136    unsigned short key[8];
         Dodge.c   137    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D353                   MOV.L       L765,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D251                   MOV.L       L765+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L627
         Dodge.c   138    if(isOS2)
         Dodge.c   139    {
         Dodge.c   140      unsigned char row = keycode%10;
    00000158 D350                   MOV.L       L765+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
         Dodge.c   141      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D34E                   MOV.L       L765+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
         Dodge.c   142     
         Dodge.c   143      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000174 D24B                   MOV.L       L765+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L629
    000001A4 CA01                   XOR         #1,R0
    000001A6              L627:                             
         Dodge.c   144    }
         Dodge.c   145    else
         Dodge.c   146    {
         Dodge.c   147      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33E                   MOV.L       L765+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D33A                   MOV.L       L765+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
         Dodge.c   148    }
         Dodge.c   149    }
    000001C2              L629:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
         Dodge.c   150    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
         Dodge.c   151    {
         Dodge.c   152    unsigned char x, ret;
         Dodge.c   153    
         Dodge.c   154    ret = GetKey(key);
    000001D4 D334                   MOV.L       L765+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
         Dodge.c   155    
         Dodge.c   156    for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L632:                             
         Dodge.c   157    {
         Dodge.c   158      if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L633
         Dodge.c   159      {
         Dodge.c   160       *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
         Dodge.c   161       break;
    000001EE A004                   BRA         L631
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L633:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L632
    000001FA              L631:                             
         Dodge.c   162      }
         Dodge.c   163    }
         Dodge.c   164    return ret;
    000001FA 60F0                   MOV.B       @R15,R0
         Dodge.c   165    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
         Dodge.c   166    #define IsKeyDown(x) KeyDown(x)
         Dodge.c   167    #define IsKeyUp(x) !KeyDown(x)
         Dodge.c   168    #define GetKey(x) GetKeyMod(x)
         Dodge.c   169    #endif
         Dodge.c   170    #endif
         Dodge.c   171    
         Dodge.c   172    #pragma endregion
         Dodge.c   173    
         Dodge.c   174    #pragma region Constants
         Dodge.c   175    
         Dodge.c   176    // true/false since it's 2018




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   177    const char true  = 1;           // True and false aren't assigned, weird.
         Dodge.c   178    const char false = 0;
         Dodge.c   179    
         Dodge.c   180    // Display properties
         Dodge.c   181    const char DISPLAY_WIDTH    = 128;
         Dodge.c   182    const char DISPLAY_HEIGHT   =  64;
         Dodge.c   183    const char DISPLAY_CENTER_X =  64; // 128 / 2
         Dodge.c   184    const char DISPLAY_CENTER_Y =  32; //  64 / 2
         Dodge.c   185    
         Dodge.c   186    #pragma endregion
         Dodge.c   187    
         Dodge.c   188    struct Projectile {
         Dodge.c   189        char enabled;
         Dodge.c   190        float x;
         Dodge.c   191        float y;
         Dodge.c   192        float xVelocity;
         Dodge.c   193        float yVelocity;
         Dodge.c   194        float xAcceleration;
         Dodge.c   195        float yAcceleration;
         Dodge.c   196    };
         Dodge.c   197    struct Projectile projectiles[128];
         Dodge.c   198    
         Dodge.c   199    #pragma region Variables
         Dodge.c   200    
         Dodge.c   201    int playerHealth = 128;
         Dodge.c   202    int playerX = 64;
         Dodge.c   203    int playerY = 32;
         Dodge.c   204    
         Dodge.c   205    int projectileIndex;
         Dodge.c   206    int maxProjectiles;
         Dodge.c   207    int currentAttack = 0;
         Dodge.c   208    const int attacksTotal = 3;
         Dodge.c   209    
         Dodge.c   210    char paused = 1;
         Dodge.c   211    
         Dodge.c   212    char quit = 0;
         Dodge.c   213    
         Dodge.c   214    #pragma endregion
         Dodge.c   215    
         Dodge.c   216    int Sign(int x) {
    00000208              _Sign:                           ; function: Sign
                                                           ; frame size=0
         Dodge.c   217        if (x > 0) return 1;
    00000208 4415                   CMP/PL      R4
    0000020A 8B01                   BF          L636
    0000020C 000B                   RTS
    0000020E E001                   MOV         #1,R0
    00000210              L636:                             
         Dodge.c   218        if (x < 0) return -1;
    00000210 4411                   CMP/PZ      R4
    00000212 8901                   BT          L638
    00000214 000B                   RTS
    00000216 E0FF                   MOV         #-1,R0
    00000218              L638:                             
         Dodge.c   219        return 0;
    00000218 E000                   MOV         #0,R0
         Dodge.c   220    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000021A              L637:                             
    0000021A 000B                   RTS
    0000021C 0009                   NOP
         Dodge.c   221    float Signf(float x) {
    0000021E              _Signf:                          ; function: Signf
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts, __lts
         Dodge.c   222        if (x > 0) return 1;
    0000021E 6143                   MOV         R4,R1
    00000220 D322                   MOV.L       L765+24,R3 ; __gts
    00000222 4F22                   STS.L       PR,@-R15
    00000224 430B                   JSR         @R3
    00000226 E000                   MOV         #0,R0
    00000228 8800                   CMP/EQ      #0,R0
    0000022A 8903                   BT          L639
    0000022C D020                   MOV.L       L765+28,R0 ; H'3F800000
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 0009                   NOP
    00000234              L639:                             
         Dodge.c   223        if (x < 0) return -1;
    00000234 D21F                   MOV.L       L765+32,R2 ; __lts
    00000236 6143                   MOV         R4,R1
    00000238 420B                   JSR         @R2
    0000023A E000                   MOV         #0,R0
    0000023C 8800                   CMP/EQ      #0,R0
    0000023E 8903                   BT          L641
    00000240 D01D                   MOV.L       L765+36,R0 ; H'BF800000
    00000242 4F26                   LDS.L       @R15+,PR
    00000244 000B                   RTS
    00000246 0009                   NOP
    00000248              L641:                             
         Dodge.c   224        return 0;
    00000248 E000                   MOV         #0,R0
         Dodge.c   225    }
    0000024A              L640:                             
    0000024A 4F26                   LDS.L       @R15+,PR
    0000024C 000B                   RTS
    0000024E 0009                   NOP
         Dodge.c   226    int Max(int a, int b) {
    00000250              _Max:                            ; function: Max
                                                           ; frame size=0
         Dodge.c   227        if(a > b)
    00000250 3457                   CMP/GT      R5,R4
    00000252 8B01                   BF          L642
         Dodge.c   228            return a;
    00000254 000B                   RTS
    00000256 6043                   MOV         R4,R0
    00000258              L642:                             
         Dodge.c   229        else
         Dodge.c   230            return b;
    00000258 6053                   MOV         R5,R0
         Dodge.c   231    }
    0000025A              L643:                             
    0000025A 000B                   RTS
    0000025C 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   232    int Min(int a, int b) {
    0000025E              _Min:                            ; function: Min
                                                           ; frame size=0
         Dodge.c   233        if(a < b)
    0000025E 3453                   CMP/GE      R5,R4
    00000260 8901                   BT          L645
         Dodge.c   234            return a;
    00000262 000B                   RTS
    00000264 6043                   MOV         R4,R0
    00000266              L645:                             
         Dodge.c   235        else
         Dodge.c   236            return b;
    00000266 6053                   MOV         R5,R0
         Dodge.c   237    }
    00000268              L646:                             
    00000268 000B                   RTS
    0000026A 0009                   NOP
         Dodge.c   238    
         Dodge.c   239    void AppQuit()
    0000026C              _AppQuit:                        ; function: AppQuit
                                                           ; frame size=8
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 4F22                   STS.L       PR,@-R15
         Dodge.c   240    {
         Dodge.c   241        KillTimer(ID_USER_TIMER1);
    00000270 DE12                   MOV.L       L765+40,R14; _KillTimer
    00000272 4E0B                   JSR         @R14
    00000274 E401                   MOV         #1,R4
         Dodge.c   242        KillTimer(ID_USER_TIMER2);
    00000276 4E0B                   JSR         @R14
    00000278 E402                   MOV         #2,R4
         Dodge.c   243        KillTimer(ID_USER_TIMER3);
    0000027A 4E0B                   JSR         @R14
    0000027C E403                   MOV         #3,R4
         Dodge.c   244        KillTimer(ID_USER_TIMER4);
    0000027E 4E0B                   JSR         @R14
    00000280 E404                   MOV         #4,R4
         Dodge.c   245        KillTimer(ID_USER_TIMER5);
    00000282 4E0B                   JSR         @R14
    00000284 E405                   MOV         #5,R4
         Dodge.c   246    
         Dodge.c   247        quit = true;
    00000286 D20E                   MOV.L       L765+44,R2 ; _true
    00000288 D10E                   MOV.L       L765+48,R1 ; _quit
    0000028A 6320                   MOV.B       @R2,R3
    0000028C 2130                   MOV.B       R3,@R1
         Dodge.c   248    
         Dodge.c   249        return;
         Dodge.c   250    }
    0000028E 4F26                   LDS.L       @R15+,PR
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
    00000294              L765:                             
    00000294 A44B0000               .DATA.L     H'A44B0000
    00000298 02020000               .DATA.L     H'02020000
    0000029C <00000000>             .DATA.L     __modls
    000002A0 <00000000>             .DATA.L     _memcpy




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A4 <00000000>             .DATA.L     __divls
    000002A8 <00000000>             .DATA.L     _GetKey
    000002AC <00000000>             .DATA.L     __gts
    000002B0 3F800000               .DATA.L     H'3F800000
    000002B4 <00000000>             .DATA.L     __lts
    000002B8 BF800000               .DATA.L     H'BF800000
    000002BC <00000000>             .DATA.L     _KillTimer
    000002C0 <00000000>             .DATA.L     _true
    000002C4 <00000000>             .DATA.L     _quit
         Dodge.c   251    
         Dodge.c   252    #pragma region Drawing functions
         Dodge.c   253    
         Dodge.c   254    void DrawImage(char sprite[128][64], char drawWhite) {
    000002C8              _DrawImage:                      ; function: DrawImage
                                                           ; frame size=40
    000002C8 2FE6                   MOV.L       R14,@-R15
    000002CA 2FD6                   MOV.L       R13,@-R15
    000002CC 2FC6                   MOV.L       R12,@-R15
    000002CE 2FB6                   MOV.L       R11,@-R15
    000002D0 2FA6                   MOV.L       R10,@-R15
         Dodge.c   255        size_t x;
         Dodge.c   256        size_t y;
         Dodge.c   257        for (x = 0; x < 128; x++)
    000002D2 EB00                   MOV         #0,R11
    000002D4 2F96                   MOV.L       R9,@-R15
    000002D6 EA40                   MOV         #64,R10
    000002D8 2F86                   MOV.L       R8,@-R15
    000002DA 6DB3                   MOV         R11,R13
    000002DC D91F                   MOV.L       L766+6,R9  ; _Bdisp_SetPoint_VRAM
    000002DE 4F22                   STS.L       PR,@-R15
    000002E0 9839                   MOV.W       L766,R8    ; H'0080
    000002E2 7FF8                   ADD         #-8,R15
    000002E4 1F41                   MOV.L       R4,@(4,R15)
    000002E6 2F50                   MOV.B       R5,@R15
    000002E8              L649:                             
    000002E8 53F1                   MOV.L       @(4,R15),R3
         Dodge.c   258        {
         Dodge.c   259            for (y = 0; y < 64; y++)
    000002EA 6EB3                   MOV         R11,R14
    000002EC 6CD3                   MOV         R13,R12
    000002EE 4C08                   SHLL2       R12
    000002F0 4C08                   SHLL2       R12
    000002F2 4C08                   SHLL2       R12
    000002F4 3C3C                   ADD         R3,R12
    000002F6              L650:                             
         Dodge.c   260            {
         Dodge.c   261                if(sprite[x][y] > 0 || drawWhite) {
    000002F6 60C3                   MOV         R12,R0
    000002F8 03EC                   MOV.B       @(R0,R14),R3
    000002FA 4315                   CMP/PL      R3
    000002FC 8902                   BT          L652
    000002FE 63F0                   MOV.B       @R15,R3
    00000300 2338                   TST         R3,R3
    00000302 8904                   BT          L651
    00000304              L652:                             
         Dodge.c   262                    Bdisp_SetPoint_VRAM(x, y, sprite[x][y]);
    00000304 60C3                   MOV         R12,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000306 65E3                   MOV         R14,R5
    00000308 06EC                   MOV.B       @(R0,R14),R6
    0000030A 490B                   JSR         @R9
    0000030C 64D3                   MOV         R13,R4
    0000030E              L651:                             
    0000030E 7E01                   ADD         #1,R14
    00000310 3EA2                   CMP/HS      R10,R14
    00000312 8BF0                   BF          L650
    00000314 7D01                   ADD         #1,R13
    00000316 3D82                   CMP/HS      R8,R13
    00000318 8BE6                   BF          L649
         Dodge.c   263                }
         Dodge.c   264            }
         Dodge.c   265        }
         Dodge.c   266        
         Dodge.c   267    }
    0000031A 7F08                   ADD         #8,R15
    0000031C 4F26                   LDS.L       @R15+,PR
    0000031E 68F6                   MOV.L       @R15+,R8
    00000320 69F6                   MOV.L       @R15+,R9
    00000322 6AF6                   MOV.L       @R15+,R10
    00000324 6BF6                   MOV.L       @R15+,R11
    00000326 6CF6                   MOV.L       @R15+,R12
    00000328 6DF6                   MOV.L       @R15+,R13
    0000032A 000B                   RTS
    0000032C 6EF6                   MOV.L       @R15+,R14
         Dodge.c   268    
         Dodge.c   269    void RenderMainMenu() {
    0000032E              _RenderMainMenu:                 ; function: RenderMainMenu
                                                           ; frame size=8196
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    0000032E 4F22                   STS.L       PR,@-R15
    00000330 9012                   MOV.W       L766+2,R0  ; H'E000
    00000332 3F0C                   ADD         R0,R15
         Dodge.c   270        char mainMenu[128][64] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                         +, 0, 0, 0, },
         Dodge.c   271    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   272    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   273    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   274    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   275    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   276    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   277    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   278    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   279    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   280    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   281    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   282    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   283    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   284    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   285    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   286    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   287    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   288    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   289    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   290    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   291    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   292    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   293    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   294    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   295    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   296    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   297    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   298    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   299    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   300    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   301    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   302    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   303    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   304    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   305    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   306    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   307    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   308    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   309    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   310    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   311    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   312    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   313    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   314    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   315    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   316    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   317    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   318    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   319    {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   320    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   321    {0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   322    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   323    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   324    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   325    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   326    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   327    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   328    {0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   329    {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   330    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   331    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   332    {0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   333    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   334    {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   335    {0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   336    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   337    {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   338    {0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   339    {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   340    {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   341    {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   342    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   343    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   344    {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   345    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   346    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         +0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   347    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
                         +1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   348    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   349    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   350    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   351    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   352    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   353    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                         +1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   354    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   355    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   356    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   357    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   358    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
                         +1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   359    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   360    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   361    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   362    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
                         +0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   363    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   364    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   365    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   366    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   367    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   368    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   369    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   370    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   371    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   372    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   373    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   374    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   375    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   376    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   377    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   378    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   379    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   380    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   381    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   382    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   383    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   384    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   385    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   386    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   387    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   388    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   389    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   390    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   391    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   392    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   393    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   394    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   395    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   396    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   397    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         +0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
         Dodge.c   398    };
    00000334 D20A                   MOV.L       L766+10,R2 ; L441
    00000336 9010                   MOV.W       L766+4,R0  ; H'2000
    00000338 D30A                   MOV.L       L766+14,R3 ; __slow_mvn
    0000033A 430B                   JSR         @R3
    0000033C 61F3                   MOV         R15,R1
         Dodge.c   399        DrawImage(mainMenu, true);
    0000033E D10A                   MOV.L       L766+18,R1 ; _true
    00000340 6510                   MOV.B       @R1,R5
    00000342 BFC1                   BSR         _DrawImage
    00000344 64F3                   MOV         R15,R4
         Dodge.c   400        // Move VRAM to DD
         Dodge.c   401        Bdisp_PutDisp_DD();
    00000346 D209                   MOV.L       L766+22,R2 ; _Bdisp_PutDisp_DD
    00000348 420B                   JSR         @R2
    0000034A 0009                   NOP
         Dodge.c   402    }
    0000034C 9105                   MOV.W       L766+4,R1  ; H'2000
    0000034E 3F1C                   ADD         R1,R15
    00000350 4F26                   LDS.L       @R15+,PR
    00000352 000B                   RTS
    00000354 0009                   NOP
    00000356              L766:                             
    00000356 0080                   .DATA.W     H'0080
    00000358 E000                   .DATA.W     H'E000
    0000035A 2000                   .DATA.W     H'2000
    0000035C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000360 <00000000>             .DATA.L     L441
    00000364 <00000000>             .DATA.L     __slow_mvn
    00000368 <00000000>             .DATA.L     _true
    0000036C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   403    
         Dodge.c   404    /** Draws the projectils */
         Dodge.c   405    void DrawProjectiles()
    00000370              _DrawProjectiles:                ; function: DrawProjectiles
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    00000370 2FE6                   MOV.L       R14,@-R15
    00000372 2FD6                   MOV.L       R13,@-R15
    00000374 2FC6                   MOV.L       R12,@-R15
    00000376 2FB6                   MOV.L       R11,@-R15
    00000378 2FA6                   MOV.L       R10,@-R15
    0000037A 2F96                   MOV.L       R9,@-R15
    0000037C 2F86                   MOV.L       R8,@-R15
    0000037E 4F22                   STS.L       PR,@-R15
    00000380 D44B                   MOV.L       L767+2,R4  ; _projectiles
    00000382 7FE4                   ADD         #-28,R15
    00000384 DA4B                   MOV.L       L767+6,R10 ; _Bdisp_SetPoint_VRAM
    00000386 6543                   MOV         R4,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000388 9391                   MOV.W       L767,R3    ; H'0E00
    0000038A 6D43                   MOV         R4,R13
    0000038C 6943                   MOV         R4,R9
    0000038E 343C                   ADD         R3,R4
    00000390 1F46                   MOV.L       R4,@(24,R15)
         Dodge.c   406    {   
         Dodge.c   407        float x1;
         Dodge.c   408        float y1;
         Dodge.c   409        float x2;
         Dodge.c   410        float y2;
         Dodge.c   411        float dx;
         Dodge.c   412        float dy;
         Dodge.c   413        int x;
         Dodge.c   414        int y;
         Dodge.c   415        int decide;
         Dodge.c   416        int pk;
         Dodge.c   417        int j;
         Dodge.c   418    
         Dodge.c   419        size_t i;
         Dodge.c   420        for (i = 0; i < 128; i++)
    00000392              L653:                             
         Dodge.c   421        {
         Dodge.c   422            if(projectiles[i].enabled) {
    00000392 6390                   MOV.B       @R9,R3
    00000394 2338                   TST         R3,R3
    00000396 8B01                   BF          L768
    00000398 A0D9                   BRA         L654
    0000039A 0009                   NOP
    0000039C              L768:                             
         Dodge.c   423                x1 = projectiles[i].x;
    0000039C 54D1                   MOV.L       @(4,R13),R4
    0000039E 1F41                   MOV.L       R4,@(4,R15)
         Dodge.c   424                y1 = projectiles[i].y;
    000003A0 55D2                   MOV.L       @(8,R13),R5
         Dodge.c   425                x2 = projectiles[i].x + projectiles[i].xVelocity;
    000003A2 6143                   MOV         R4,R1
    000003A4 D344                   MOV.L       L767+10,R3 ; __adds
    000003A6 2F52                   MOV.L       R5,@R15
    000003A8 430B                   JSR         @R3
    000003AA 50D3                   MOV.L       @(12,R13),R0
         Dodge.c   426                y2 = projectiles[i].y + projectiles[i].yVelocity;
    000003AC D242                   MOV.L       L767+10,R2 ; __adds
    000003AE 6803                   MOV         R0,R8
    000003B0 6153                   MOV         R5,R1
    000003B2 420B                   JSR         @R2
    000003B4 50D4                   MOV.L       @(16,R13),R0
         Dodge.c   427                Bdisp_SetPoint_VRAM(x1, y1, 1);
    000003B6 E601                   MOV         #1,R6
    000003B8 D240                   MOV.L       L767+14,R2 ; __stoi
    000003BA 1F02                   MOV.L       R0,@(8,R15)
    000003BC 420B                   JSR         @R2
    000003BE 60F2                   MOV.L       @R15,R0
    000003C0 D33E                   MOV.L       L767+14,R3 ; __stoi
    000003C2 6503                   MOV         R0,R5
    000003C4 430B                   JSR         @R3
    000003C6 50F1                   MOV.L       @(4,R15),R0
    000003C8 4A0B                   JSR         @R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003CA 6403                   MOV         R0,R4
         Dodge.c   428                Bdisp_SetPoint_VRAM(x2, y2, 1);
    000003CC D33B                   MOV.L       L767+14,R3 ; __stoi
    000003CE E601                   MOV         #1,R6
    000003D0 430B                   JSR         @R3
    000003D2 50F2                   MOV.L       @(8,R15),R0
    000003D4 D339                   MOV.L       L767+14,R3 ; __stoi
    000003D6 6503                   MOV         R0,R5
    000003D8 430B                   JSR         @R3
    000003DA 6083                   MOV         R8,R0
    000003DC 4A0B                   JSR         @R10
    000003DE 6403                   MOV         R0,R4
         Dodge.c   429    
         Dodge.c   430        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   431                dx = abs(x2 - x1);
    000003E0 D237                   MOV.L       L767+18,R2 ; __subs
    000003E2 6183                   MOV         R8,R1
    000003E4 420B                   JSR         @R2
    000003E6 50F1                   MOV.L       @(4,R15),R0
    000003E8 D334                   MOV.L       L767+14,R3 ; __stoi
    000003EA 430B                   JSR         @R3
    000003EC 0009                   NOP
    000003EE D235                   MOV.L       L767+22,R2 ; _abs
    000003F0 420B                   JSR         @R2
    000003F2 6403                   MOV         R0,R4
    000003F4 D334                   MOV.L       L767+26,R3 ; __itos
    000003F6 430B                   JSR         @R3
    000003F8 0009                   NOP
    000003FA 6B03                   MOV         R0,R11
         Dodge.c   432                dy = abs(y2 - y1);
    000003FC 51F2                   MOV.L       @(8,R15),R1
    000003FE D230                   MOV.L       L767+18,R2 ; __subs
    00000400 420B                   JSR         @R2
    00000402 60F2                   MOV.L       @R15,R0
    00000404 D32D                   MOV.L       L767+14,R3 ; __stoi
    00000406 430B                   JSR         @R3
    00000408 0009                   NOP
    0000040A D22E                   MOV.L       L767+22,R2 ; _abs
    0000040C 420B                   JSR         @R2
    0000040E 6403                   MOV         R0,R4
    00000410 D32D                   MOV.L       L767+26,R3 ; __itos
    00000412 430B                   JSR         @R3
    00000414 0009                   NOP
    00000416 6403                   MOV         R0,R4
         Dodge.c   433    
         Dodge.c   434                decide = (dx > dy);
    00000418 D22C                   MOV.L       L767+30,R2 ; __gts
    0000041A 420B                   JSR         @R2
    0000041C 61B3                   MOV         R11,R1
    0000041E 1F03                   MOV.L       R0,@(12,R15)
         Dodge.c   435                
         Dodge.c   436                pk = 2 * dy - dx;
    00000420 D02B                   MOV.L       L767+34,R0 ; H'40000000
    00000422 D22C                   MOV.L       L767+38,R2 ; __muls
    00000424 420B                   JSR         @R2
    00000426 6143                   MOV         R4,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000428 D325                   MOV.L       L767+18,R3 ; __subs
    0000042A 6C03                   MOV         R0,R12
    0000042C 6103                   MOV         R0,R1
    0000042E 430B                   JSR         @R3
    00000430 60B3                   MOV         R11,R0
    00000432 D222                   MOV.L       L767+14,R2 ; __stoi
    00000434 420B                   JSR         @R2
    00000436 0009                   NOP
    00000438 D226                   MOV.L       L767+38,R2 ; __muls
    0000043A 6E03                   MOV         R0,R14
    0000043C D024                   MOV.L       L767+34,R0 ; H'40000000
         Dodge.c   437                for (j = 0; j <= dx; j++) {
    0000043E E300                   MOV         #0,R3
    00000440 1F34                   MOV.L       R3,@(16,R15)
    00000442 420B                   JSR         @R2
    00000444 61B3                   MOV         R11,R1
    00000446 D31E                   MOV.L       L767+18,R3 ; __subs
    00000448 430B                   JSR         @R3
    0000044A 61C3                   MOV         R12,R1
    0000044C 1F05                   MOV.L       R0,@(20,R15)
    0000044E E100                   MOV         #0,R1
    00000450 D321                   MOV.L       L767+42,R3 ; __les
    00000452 430B                   JSR         @R3
    00000454 60B3                   MOV         R11,R0
    00000456 8800                   CMP/EQ      #0,R0
    00000458 8979                   BT          L654
    0000045A              L656:                             
         Dodge.c   438                    Bdisp_SetPoint_VRAM(x1, y1, 1);
    0000045A E601                   MOV         #1,R6
    0000045C D217                   MOV.L       L767+14,R2 ; __stoi
    0000045E 420B                   JSR         @R2
    00000460 60F2                   MOV.L       @R15,R0
    00000462 6503                   MOV         R0,R5
    00000464 D315                   MOV.L       L767+14,R3 ; __stoi
    00000466 430B                   JSR         @R3
    00000468 50F1                   MOV.L       @(4,R15),R0
    0000046A 4A0B                   JSR         @R10
    0000046C 6403                   MOV         R0,R4
         Dodge.c   439                    
         Dodge.c   440                    // checking either to decrement or increment the
         Dodge.c   441                    // value if we have to plot from (0,100) to (100,0)
         Dodge.c   442                    x1 < x2 ? x1++ : x1--;
    0000046E 51F1                   MOV.L       @(4,R15),R1
    00000470 D31A                   MOV.L       L767+46,R3 ; __lts
    00000472 430B                   JSR         @R3
    00000474 6083                   MOV         R8,R0
    00000476 8800                   CMP/EQ      #0,R0
    00000478 8906                   BT          L657
    0000047A D119                   MOV.L       L767+50,R1 ; H'3F800000
    0000047C D20E                   MOV.L       L767+10,R2 ; __adds
    0000047E 420B                   JSR         @R2
    00000480 50F1                   MOV.L       @(4,R15),R0
    00000482 1F01                   MOV.L       R0,@(4,R15)
    00000484 A006                   BRA         L658
    00000486 0009                   NOP
    00000488              L657:                             
    00000488 51F1                   MOV.L       @(4,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000048A D015                   MOV.L       L767+50,R0 ; H'3F800000
    0000048C D30C                   MOV.L       L767+18,R3 ; __subs
    0000048E 430B                   JSR         @R3
    00000490 0009                   NOP
    00000492 1F01                   MOV.L       R0,@(4,R15)
    00000494              L658:                             
         Dodge.c   443                    if (pk < 0) {
    00000494 4E11                   CMP/PZ      R14
    00000496 8930                   BT          L659
         Dodge.c   444                        // decision value will decide to plot
         Dodge.c   445                        // either  x1 or y1 in x's position
         Dodge.c   446                        if (decide == 0) {
    00000498 52F3                   MOV.L       @(12,R15),R2
    0000049A 2228                   TST         R2,R2
    0000049C 8B22                   BF          L660
         Dodge.c   447                            // putpixel(x1, y1, RED);
         Dodge.c   448                            pk = pk + 2 * dy;
    0000049E D30A                   MOV.L       L767+26,R3 ; __itos
    000004A0 430B                   JSR         @R3
    000004A2 60E3                   MOV         R14,R0
    000004A4 D204                   MOV.L       L767+10,R2 ; __adds
    000004A6 420B                   JSR         @R2
    000004A8 61C3                   MOV         R12,R1
    000004AA A021                   BRA         L759
    000004AC 0009                   NOP
    000004AE              L767:                             
    000004AE 0E00                   .DATA.W     H'0E00
    000004B0 <00000000>             .DATA.L     _projectiles
    000004B4 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000004B8 <00000000>             .DATA.L     __adds
    000004BC <00000000>             .DATA.L     __stoi
    000004C0 <00000000>             .DATA.L     __subs
    000004C4 <00000000>             .DATA.L     _abs
    000004C8 <00000000>             .DATA.L     __itos
    000004CC <00000000>             .DATA.L     __gts
    000004D0 40000000               .DATA.L     H'40000000
    000004D4 <00000000>             .DATA.L     __muls
    000004D8 <00000000>             .DATA.L     __les
    000004DC <00000000>             .DATA.L     __lts
    000004E0 3F800000               .DATA.L     H'3F800000
    000004E4              L660:                             
         Dodge.c   449                        }
         Dodge.c   450                        else {
         Dodge.c   451                            //(y1,x1) is passed in xt
         Dodge.c   452                            // putpixel(y1, x1, YELLOW);
         Dodge.c   453                            pk = pk + 2 * dy;
    000004E4 D33F                   MOV.L       L769+2,R3  ; __itos
    000004E6 430B                   JSR         @R3
    000004E8 60E3                   MOV         R14,R0
    000004EA D23F                   MOV.L       L769+6,R2  ; __adds
    000004EC 420B                   JSR         @R2
    000004EE 61C3                   MOV         R12,R1
    000004F0              L759:                             
    000004F0 D33E                   MOV.L       L769+10,R3 ; __stoi
    000004F2 430B                   JSR         @R3
    000004F4 0009                   NOP
    000004F6 A01F                   BRA         L662




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F8 6E03                   MOV         R0,R14
    000004FA              L659:                             
         Dodge.c   454                        }
         Dodge.c   455                    }
         Dodge.c   456                    else {
         Dodge.c   457                        y1 < y2 ? y1++ : y1--;
    000004FA 61F2                   MOV.L       @R15,R1
    000004FC D33C                   MOV.L       L769+14,R3 ; __lts
    000004FE 430B                   JSR         @R3
    00000500 50F2                   MOV.L       @(8,R15),R0
    00000502 8800                   CMP/EQ      #0,R0
    00000504 8906                   BT          L663
    00000506 D13B                   MOV.L       L769+18,R1 ; H'3F800000
    00000508 D237                   MOV.L       L769+6,R2  ; __adds
    0000050A 420B                   JSR         @R2
    0000050C 60F2                   MOV.L       @R15,R0
    0000050E 2F02                   MOV.L       R0,@R15
    00000510 A006                   BRA         L664
    00000512 0009                   NOP
    00000514              L663:                             
    00000514 61F2                   MOV.L       @R15,R1
    00000516 D037                   MOV.L       L769+18,R0 ; H'3F800000
    00000518 D337                   MOV.L       L769+22,R3 ; __subs
    0000051A 430B                   JSR         @R3
    0000051C 0009                   NOP
    0000051E 2F02                   MOV.L       R0,@R15
    00000520              L664:                             
         Dodge.c   458                        if (decide == 0) {
    00000520 53F3                   MOV.L       @(12,R15),R3
    00000522 2338                   TST         R3,R3
         Dodge.c   459            
         Dodge.c   460                            // putpixel(x1, y1, RED);
         Dodge.c   461                        }
         Dodge.c   462                        else {
         Dodge.c   463                            //  putpixel(y1, x1, YELLOW);
         Dodge.c   464                        }
         Dodge.c   465                        pk = pk + 2 * dy - 2 * dx;
    00000524 D32F                   MOV.L       L769+2,R3  ; __itos
    00000526 430B                   JSR         @R3
    00000528 60E3                   MOV         R14,R0
    0000052A D22F                   MOV.L       L769+6,R2  ; __adds
    0000052C 420B                   JSR         @R2
    0000052E 51F5                   MOV.L       @(20,R15),R1
    00000530 D32E                   MOV.L       L769+10,R3 ; __stoi
    00000532 430B                   JSR         @R3
    00000534 0009                   NOP
    00000536 6E03                   MOV         R0,R14
    00000538              L662:                             
    00000538 52F4                   MOV.L       @(16,R15),R2
    0000053A 7201                   ADD         #1,R2
    0000053C 1F24                   MOV.L       R2,@(16,R15)
    0000053E D329                   MOV.L       L769+2,R3  ; __itos
    00000540 430B                   JSR         @R3
    00000542 6023                   MOV         R2,R0
    00000544 D32D                   MOV.L       L769+26,R3 ; __ges
    00000546 430B                   JSR         @R3
    00000548 61B3                   MOV         R11,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000054A 8800                   CMP/EQ      #0,R0
    0000054C 8B85                   BF          L656
    0000054E              L654:                             
    0000054E 791C                   ADD         #28,R9
    00000550 52F6                   MOV.L       @(24,R15),R2
    00000552 3922                   CMP/HS      R2,R9
    00000554 8D02                   BT/S        L770
    00000556 7D1C                   ADD         #28,R13
    00000558 AF1B                   BRA         L653
    0000055A 0009                   NOP
    0000055C              L770:                             
         Dodge.c   466                    }
         Dodge.c   467                }
         Dodge.c   468            }
         Dodge.c   469        }
         Dodge.c   470    }
    0000055C 7F1C                   ADD         #28,R15
    0000055E 4F26                   LDS.L       @R15+,PR
    00000560 68F6                   MOV.L       @R15+,R8
    00000562 69F6                   MOV.L       @R15+,R9
    00000564 6AF6                   MOV.L       @R15+,R10
    00000566 6BF6                   MOV.L       @R15+,R11
    00000568 6CF6                   MOV.L       @R15+,R12
    0000056A 6DF6                   MOV.L       @R15+,R13
    0000056C 000B                   RTS
    0000056E 6EF6                   MOV.L       @R15+,R14
         Dodge.c   471    /** Draws the player */
         Dodge.c   472    void DrawPlayer()
    00000570              _DrawPlayer:                     ; function: DrawPlayer
                                                           ; frame size=16
    00000570 2FE6                   MOV.L       R14,@-R15
         Dodge.c   473    {   
         Dodge.c   474        Bdisp_SetPoint_VRAM(playerX, playerY, 1);
    00000572 E601                   MOV         #1,R6
    00000574 2FD6                   MOV.L       R13,@-R15
    00000576 2FC6                   MOV.L       R12,@-R15
    00000578 4F22                   STS.L       PR,@-R15
    0000057A DC21                   MOV.L       L769+30,R12; _playerX
    0000057C DD21                   MOV.L       L769+34,R13; _playerY
    0000057E DE22                   MOV.L       L769+38,R14; _Bdisp_SetPoint_VRAM
    00000580 65D2                   MOV.L       @R13,R5
    00000582 4E0B                   JSR         @R14
    00000584 64C2                   MOV.L       @R12,R4
         Dodge.c   475        Bdisp_SetPoint_VRAM(playerX+1, playerY, 1);
    00000586 E601                   MOV         #1,R6
    00000588 65D2                   MOV.L       @R13,R5
    0000058A 64C2                   MOV.L       @R12,R4
    0000058C 4E0B                   JSR         @R14
    0000058E 7401                   ADD         #1,R4
         Dodge.c   476        Bdisp_SetPoint_VRAM(playerX-1, playerY, 1);
    00000590 65D2                   MOV.L       @R13,R5
    00000592 E601                   MOV         #1,R6
    00000594 64C2                   MOV.L       @R12,R4
    00000596 4E0B                   JSR         @R14
    00000598 74FF                   ADD         #-1,R4
         Dodge.c   477        Bdisp_SetPoint_VRAM(playerX, playerY+1, 1);
    0000059A E601                   MOV         #1,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000059C 65D2                   MOV.L       @R13,R5
    0000059E 7501                   ADD         #1,R5
    000005A0 4E0B                   JSR         @R14
    000005A2 64C2                   MOV.L       @R12,R4
         Dodge.c   478        Bdisp_SetPoint_VRAM(playerX, playerY-1, 1);
    000005A4 65D2                   MOV.L       @R13,R5
    000005A6 E601                   MOV         #1,R6
    000005A8 75FF                   ADD         #-1,R5
    000005AA 4E0B                   JSR         @R14
    000005AC 64C2                   MOV.L       @R12,R4
         Dodge.c   479    }
    000005AE 4F26                   LDS.L       @R15+,PR
    000005B0 6CF6                   MOV.L       @R15+,R12
    000005B2 6DF6                   MOV.L       @R15+,R13
    000005B4 000B                   RTS
    000005B6 6EF6                   MOV.L       @R15+,R14
         Dodge.c   480    
         Dodge.c   481    void DrawHealthBar() {
    000005B8              _DrawHealthBar:                  ; function: DrawHealthBar
                                                           ; frame size=16
    000005B8 2FE6                   MOV.L       R14,@-R15
    000005BA 2FD6                   MOV.L       R13,@-R15
    000005BC 2FC6                   MOV.L       R12,@-R15
    000005BE 4F22                   STS.L       PR,@-R15
         Dodge.c   482        size_t i;
         Dodge.c   483        for (i = 0; i < playerHealth; i++)
    000005C0 DC12                   MOV.L       L769+42,R12; _playerHealth
    000005C2 DD11                   MOV.L       L769+38,R13; _Bdisp_SetPoint_VRAM
    000005C4 A005                   BRA         L667
    000005C6 EE00                   MOV         #0,R14
    000005C8              L668:                             
         Dodge.c   484        {
         Dodge.c   485            Bdisp_SetPoint_VRAM(i, 63, 1);
    000005C8 E601                   MOV         #1,R6
    000005CA E53F                   MOV         #63,R5
    000005CC 4D0B                   JSR         @R13
    000005CE 64E3                   MOV         R14,R4
    000005D0 7E01                   ADD         #1,R14
    000005D2              L667:                             
    000005D2 62C2                   MOV.L       @R12,R2
    000005D4 3E22                   CMP/HS      R2,R14
    000005D6 8BF7                   BF          L668
         Dodge.c   486        }
         Dodge.c   487        // debug bars
         Dodge.c   488        // for (i = 0; i < projectileIndex; i++)
         Dodge.c   489        //     Bdisp_SetPoint_VRAM(i, 1, 1);
         Dodge.c   490        // for (i = 0; i < maxProjectiles; i++)
         Dodge.c   491        //     Bdisp_SetPoint_VRAM(i, 2, 1);
         Dodge.c   492    }
    000005D8 4F26                   LDS.L       @R15+,PR
    000005DA 6CF6                   MOV.L       @R15+,R12
    000005DC 6DF6                   MOV.L       @R15+,R13
    000005DE 000B                   RTS
    000005E0 6EF6                   MOV.L       @R15+,R14
    000005E2              L769:                             
    000005E2 0000                   .DATA.W     0
    000005E4 <00000000>             .DATA.L     __itos




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005E8 <00000000>             .DATA.L     __adds
    000005EC <00000000>             .DATA.L     __stoi
    000005F0 <00000000>             .DATA.L     __lts
    000005F4 3F800000               .DATA.L     H'3F800000
    000005F8 <00000000>             .DATA.L     __subs
    000005FC <00000000>             .DATA.L     __ges
    00000600 <00000000>             .DATA.L     _playerX
    00000604 <00000000>             .DATA.L     _playerY
    00000608 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    0000060C <00000000>             .DATA.L     _playerHealth
         Dodge.c   493    
         Dodge.c   494    #pragma endregion
         Dodge.c   495    
         Dodge.c   496    // spawn a new projectile at x and y with velocity and acceleration
         Dodge.c   497    void SpawnProjectile(float x, float y, float xVelocity, float yVelocity, float xAcceleration, float yAccel
                         +eration) {
    00000610              _SpawnProjectile:                ; function: SpawnProjectile
                                                           ; frame size=20
    00000610 2FE6                   MOV.L       R14,@-R15
    00000612 2FD6                   MOV.L       R13,@-R15
    00000614 2FB6                   MOV.L       R11,@-R15
    00000616 7FF8                   ADD         #-8,R15
    00000618 DE2E                   MOV.L       L771+2,R14 ; _projectiles
    0000061A 2FE2                   MOV.L       R14,@R15
    0000061C 1FE1                   MOV.L       R14,@(4,R15)
    0000061E 6DE3                   MOV         R14,R13
    00000620 9357                   MOV.W       L771,R3    ; H'0E00
    00000622 61F2                   MOV.L       @R15,R1
         Dodge.c   498        size_t i;
         Dodge.c   499        for (i = 0; i < 128; i++)
    00000624 DB2C                   MOV.L       L771+6,R11 ; _true
    00000626 313C                   ADD         R3,R1
    00000628 3D12                   CMP/HS      R1,R13
    0000062A 8911                   BT          L672
    0000062C              L670:                             
         Dodge.c   500        {
         Dodge.c   501            if(!projectiles[i].enabled) { // found a free spot in the array
    0000062C 63D0                   MOV.B       @R13,R3
    0000062E 2338                   TST         R3,R3
    00000630 8B0A                   BF          L671
         Dodge.c   502                // set up the projectile
         Dodge.c   503                projectiles[i].x = x;
    00000632 1E41                   MOV.L       R4,@(4,R14)
         Dodge.c   504                projectiles[i].y = y;
    00000634 1E52                   MOV.L       R5,@(8,R14)
         Dodge.c   505                projectiles[i].xVelocity = xVelocity;
    00000636 1E63                   MOV.L       R6,@(12,R14)
         Dodge.c   506                projectiles[i].yVelocity = yVelocity;
    00000638 1E74                   MOV.L       R7,@(16,R14)
         Dodge.c   507                projectiles[i].xAcceleration = xAcceleration;
    0000063A 53F5                   MOV.L       @(20,R15),R3
    0000063C 1E35                   MOV.L       R3,@(20,R14)
         Dodge.c   508                projectiles[i].yAcceleration = yAcceleration;
    0000063E 52F6                   MOV.L       @(24,R15),R2
    00000640 1E26                   MOV.L       R2,@(24,R14)
         Dodge.c   509                // enable it
         Dodge.c   510                projectiles[i].enabled = true;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000642 63B0                   MOV.B       @R11,R3
         Dodge.c   511                // stop the loop, we're done
         Dodge.c   512                return;
    00000644 A004                   BRA         L672
    00000646 2E30                   MOV.B       R3,@R14
    00000648              L671:                             
    00000648 7D1C                   ADD         #28,R13
    0000064A 3D12                   CMP/HS      R1,R13
    0000064C 8FEE                   BF/S        L670
    0000064E 7E1C                   ADD         #28,R14
    00000650              L672:                             
         Dodge.c   513            }
         Dodge.c   514        }
         Dodge.c   515        
         Dodge.c   516    }
    00000650 7F08                   ADD         #8,R15
    00000652 6BF6                   MOV.L       @R15+,R11
    00000654 6DF6                   MOV.L       @R15+,R13
    00000656 000B                   RTS
    00000658 6EF6                   MOV.L       @R15+,R14
         Dodge.c   517    
         Dodge.c   518    int IsCollidingWithPlayer(int x, int y) {
    0000065A              _IsCollidingWithPlayer:          ; function: IsCollidingWithPlayer
                                                           ; frame size=0
    0000065A D320                   MOV.L       L771+10,R3 ; _playerX
    0000065C 6632                   MOV.L       @R3,R6
    0000065E 3460                   CMP/EQ      R6,R4
    00000660 8B03                   BF          L673
    00000662 D21F                   MOV.L       L771+14,R2 ; _playerY
    00000664 6122                   MOV.L       @R2,R1
    00000666 3510                   CMP/EQ      R1,R5
    00000668 8918                   BT          L570
    0000066A              L673:                             
    0000066A 3460                   CMP/EQ      R6,R4
    0000066C D31C                   MOV.L       L771+14,R3 ; _playerY
    0000066E 8F0A                   BF/S        L675
    00000670 6732                   MOV.L       @R3,R7
         Dodge.c   519        if(x == playerX && y == playerY) return true;
         Dodge.c   520        if(x == playerX) {
         Dodge.c   521            if(y == playerY) return true;
    00000672 3570                   CMP/EQ      R7,R5
    00000674 8912                   BT          L570
         Dodge.c   522            if(y == playerY + 1) return true;
    00000676 6373                   MOV         R7,R3
    00000678 7301                   ADD         #1,R3
    0000067A 3530                   CMP/EQ      R3,R5
    0000067C 890E                   BT          L570
         Dodge.c   523            if(y == playerY - 1) return true;
    0000067E 6373                   MOV         R7,R3
    00000680 73FF                   ADD         #-1,R3
    00000682 3530                   CMP/EQ      R3,R5
    00000684 890A                   BT          L570
    00000686              L675:                             
         Dodge.c   524        }
         Dodge.c   525        if(y == playerY) {
    00000686 3570                   CMP/EQ      R7,R5
    00000688 8B0B                   BF          L679




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   526            if(x == playerX) return true;
    0000068A 3460                   CMP/EQ      R6,R4
    0000068C 8906                   BT          L570
         Dodge.c   527            if(x == playerX + 1) return true;
    0000068E 6263                   MOV         R6,R2
    00000690 7201                   ADD         #1,R2
    00000692 3420                   CMP/EQ      R2,R4
    00000694 8902                   BT          L570
         Dodge.c   528            if(x == playerX - 1) return true;
    00000696 76FF                   ADD         #-1,R6
    00000698 3460                   CMP/EQ      R6,R4
    0000069A 8B02                   BF          L679
    0000069C              L570:
    0000069C D20E                   MOV.L       L771+6,R2  ; _true
    0000069E 000B                   RTS
    000006A0 6020                   MOV.B       @R2,R0
    000006A2              L679:                             
         Dodge.c   529        }
         Dodge.c   530    
         Dodge.c   531        return false;
    000006A2 D310                   MOV.L       L771+18,R3 ; _false
    000006A4 6030                   MOV.B       @R3,R0
         Dodge.c   532    }
    000006A6              L674:                             
    000006A6 000B                   RTS
    000006A8 0009                   NOP
         Dodge.c   533    
         Dodge.c   534    #pragma region Timer functions
         Dodge.c   535    
         Dodge.c   536    /** Timer #2: Renders screen */
         Dodge.c   537    void RenderScreen()
    000006AA              _RenderScreen:                   ; function: RenderScreen
                                                           ; frame size=4
    000006AA 4F22                   STS.L       PR,@-R15
         Dodge.c   538    {
         Dodge.c   539        if(!quit) {
    000006AC D10E                   MOV.L       L771+22,R1 ; _quit
    000006AE 6210                   MOV.B       @R1,R2
    000006B0 2228                   TST         R2,R2
    000006B2 8B0B                   BF          L683
         Dodge.c   540            // Clear current screen
         Dodge.c   541            Bdisp_AllClr_VRAM();
    000006B4 D20D                   MOV.L       L771+26,R2 ; _Bdisp_AllClr_VRAM
    000006B6 420B                   JSR         @R2
    000006B8 0009                   NOP
         Dodge.c   542                
         Dodge.c   543            // Draw the different parts of the screen
         Dodge.c   544            DrawProjectiles();
    000006BA BE59                   BSR         _DrawProjectiles
    000006BC 0009                   NOP
         Dodge.c   545            DrawPlayer();
    000006BE BF57                   BSR         _DrawPlayer
    000006C0 0009                   NOP
         Dodge.c   546            DrawHealthBar();
    000006C2 BF79                   BSR         _DrawHealthBar
    000006C4 0009                   NOP
         Dodge.c   547    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   548            // Move VRAM to DD
         Dodge.c   549            Bdisp_PutDisp_DD();
    000006C6 D20A                   MOV.L       L771+30,R2 ; _Bdisp_PutDisp_DD
    000006C8 422B                   JMP         @R2
    000006CA 4F26                   LDS.L       @R15+,PR
    000006CC              L683:                             
         Dodge.c   550        }
         Dodge.c   551    }
    000006CC 4F26                   LDS.L       @R15+,PR
    000006CE 000B                   RTS
    000006D0 0009                   NOP
    000006D2              L771:                             
    000006D2 0E00                   .DATA.W     H'0E00
    000006D4 <00000000>             .DATA.L     _projectiles
    000006D8 <00000000>             .DATA.L     _true
    000006DC <00000000>             .DATA.L     _playerX
    000006E0 <00000000>             .DATA.L     _playerY
    000006E4 <00000000>             .DATA.L     _false
    000006E8 <00000000>             .DATA.L     _quit
    000006EC <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000006F0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Dodge.c   552    
         Dodge.c   553    void MoveProjectile(int arrayIndex, float x1, float y1, float x2, float y2) {
    000006F4              _MoveProjectile:                 ; function: MoveProjectile
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __stoi, __itos, __gts, __lts, __ges, __les
    000006F4 2FE6                   MOV.L       R14,@-R15
         Dodge.c   554        // Bresenham's Line Generation Algorithm implementation stolen from https://www.geeksforgeeks.org/bres
                         +enhams-line-generation-algorithm/
         Dodge.c   555        float dx;
         Dodge.c   556        float dy;
         Dodge.c   557        int decide;
         Dodge.c   558        int pk;
         Dodge.c   559        int j;
         Dodge.c   560    
         Dodge.c   561        dx = abs(x2 - x1);
    000006F6 6173                   MOV         R7,R1
    000006F8 D363                   MOV.L       L772+2,R3  ; __subs
    000006FA 2FD6                   MOV.L       R13,@-R15
    000006FC 2FC6                   MOV.L       R12,@-R15
    000006FE 2FB6                   MOV.L       R11,@-R15
    00000700 2FA6                   MOV.L       R10,@-R15
    00000702 2F96                   MOV.L       R9,@-R15
    00000704 2F86                   MOV.L       R8,@-R15
    00000706 6873                   MOV         R7,R8
    00000708 4F22                   STS.L       PR,@-R15
    0000070A 4F12                   STS.L       MACL,@-R15
    0000070C 7FEC                   ADD         #-20,R15
    0000070E 1F42                   MOV.L       R4,@(8,R15)
    00000710 1F51                   MOV.L       R5,@(4,R15)
    00000712 2F62                   MOV.L       R6,@R15
    00000714 430B                   JSR         @R3
    00000716 50F1                   MOV.L       @(4,R15),R0
    00000718 D25C                   MOV.L       L772+6,R2  ; __stoi
    0000071A 420B                   JSR         @R2
    0000071C 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000071E D35C                   MOV.L       L772+10,R3 ; _abs
    00000720 430B                   JSR         @R3
    00000722 6403                   MOV         R0,R4
    00000724 D25B                   MOV.L       L772+14,R2 ; __itos
    00000726 420B                   JSR         @R2
    00000728 0009                   NOP
    0000072A 6D03                   MOV         R0,R13
         Dodge.c   562        dy = abs(y2 - y1);
    0000072C 51FE                   MOV.L       @(56,R15),R1
    0000072E D356                   MOV.L       L772+2,R3  ; __subs
    00000730 430B                   JSR         @R3
    00000732 60F2                   MOV.L       @R15,R0
    00000734 D255                   MOV.L       L772+6,R2  ; __stoi
    00000736 420B                   JSR         @R2
    00000738 0009                   NOP
    0000073A D355                   MOV.L       L772+10,R3 ; _abs
    0000073C 430B                   JSR         @R3
    0000073E 6403                   MOV         R0,R4
    00000740 D254                   MOV.L       L772+14,R2 ; __itos
    00000742 420B                   JSR         @R2
    00000744 0009                   NOP
    00000746 6403                   MOV         R0,R4
         Dodge.c   563    
         Dodge.c   564        decide = (dx > dy);
    00000748 D353                   MOV.L       L772+18,R3 ; __gts
    0000074A 430B                   JSR         @R3
    0000074C 61D3                   MOV         R13,R1
    0000074E 6903                   MOV         R0,R9
         Dodge.c   565        
         Dodge.c   566        pk = 2 * dy - dx;
    00000750 D253                   MOV.L       L772+26,R2 ; __muls
    00000752 D052                   MOV.L       L772+22,R0 ; H'40000000
    00000754 420B                   JSR         @R2
    00000756 6143                   MOV         R4,R1
    00000758 D34B                   MOV.L       L772+2,R3  ; __subs
    0000075A 6A03                   MOV         R0,R10
    0000075C 6103                   MOV         R0,R1
    0000075E 430B                   JSR         @R3
    00000760 60D3                   MOV         R13,R0
    00000762 D24A                   MOV.L       L772+6,R2  ; __stoi
    00000764 420B                   JSR         @R2
    00000766 0009                   NOP
    00000768 52F2                   MOV.L       @(8,R15),R2
    0000076A 6E03                   MOV         R0,R14
    0000076C D04B                   MOV.L       L772+22,R0 ; H'40000000
         Dodge.c   567        for (j = 0; j <= dx; j++) {
    0000076E EB00                   MOV         #0,R11
    00000770 E31C                   MOV         #28,R3
    00000772 0237                   MUL.L       R3,R2
    00000774 D24B                   MOV.L       L772+30,R2 ; _projectiles
    00000776 031A                   STS         MACL,R3
    00000778 1F34                   MOV.L       R3,@(16,R15)
    0000077A 332C                   ADD         R2,R3
    0000077C 1F32                   MOV.L       R3,@(8,R15)
    0000077E D248                   MOV.L       L772+26,R2 ; __muls
    00000780 420B                   JSR         @R2
    00000782 61D3                   MOV         R13,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000784 D240                   MOV.L       L772+2,R2  ; __subs
    00000786 420B                   JSR         @R2
    00000788 61A3                   MOV         R10,R1
    0000078A 61B3                   MOV         R11,R1
    0000078C D246                   MOV.L       L772+34,R2 ; __les
    0000078E 1F03                   MOV.L       R0,@(12,R15)
    00000790 420B                   JSR         @R2
    00000792 60D3                   MOV         R13,R0
    00000794 8800                   CMP/EQ      #0,R0
    00000796 8965                   BT          L684
    00000798 DC44                   MOV.L       L772+38,R12; _playerHealth
    0000079A              L685:                             
         Dodge.c   568            // check for collision
         Dodge.c   569            if(IsCollidingWithPlayer((int)x1, (int)y1)) {
    0000079A D33C                   MOV.L       L772+6,R3  ; __stoi
    0000079C 430B                   JSR         @R3
    0000079E 60F2                   MOV.L       @R15,R0
    000007A0 D33A                   MOV.L       L772+6,R3  ; __stoi
    000007A2 6503                   MOV         R0,R5
    000007A4 430B                   JSR         @R3
    000007A6 50F1                   MOV.L       @(4,R15),R0
    000007A8 BF57                   BSR         _IsCollidingWithPlayer
    000007AA 6403                   MOV         R0,R4
    000007AC 2008                   TST         R0,R0
    000007AE 8907                   BT          L686
         Dodge.c   570                // damage player
         Dodge.c   571                playerHealth -= 1;
    000007B0 63C2                   MOV.L       @R12,R3
    000007B2 73FF                   ADD         #-1,R3
    000007B4 2C32                   MOV.L       R3,@R12
         Dodge.c   572                // destroy projectile
         Dodge.c   573                projectiles[arrayIndex].enabled = false;
    000007B6 52F2                   MOV.L       @(8,R15),R2
    000007B8 D13D                   MOV.L       L772+42,R1 ; _false
    000007BA 6310                   MOV.B       @R1,R3
         Dodge.c   574                return;
    000007BC A058                   BRA         L687
    000007BE 2230                   MOV.B       R3,@R2
    000007C0              L686:                             
         Dodge.c   575            }
         Dodge.c   576            
         Dodge.c   577            // checking either to decrement or increment the
         Dodge.c   578            // value if we have to plot from (0,100) to (100,0)
         Dodge.c   579            x1 < x2 ? x1++ : x1--;
    000007C0 51F1                   MOV.L       @(4,R15),R1
    000007C2 D23C                   MOV.L       L772+46,R2 ; __lts
    000007C4 420B                   JSR         @R2
    000007C6 6083                   MOV         R8,R0
    000007C8 8800                   CMP/EQ      #0,R0
    000007CA 8906                   BT          L688
    000007CC D13A                   MOV.L       L772+50,R1 ; H'3F800000
    000007CE D33B                   MOV.L       L772+54,R3 ; __adds
    000007D0 430B                   JSR         @R3
    000007D2 50F1                   MOV.L       @(4,R15),R0
    000007D4 1F01                   MOV.L       R0,@(4,R15)
    000007D6 A006                   BRA         L689
    000007D8 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007DA              L688:                             
    000007DA 51F1                   MOV.L       @(4,R15),R1
    000007DC D036                   MOV.L       L772+50,R0 ; H'3F800000
    000007DE D22A                   MOV.L       L772+2,R2  ; __subs
    000007E0 420B                   JSR         @R2
    000007E2 0009                   NOP
    000007E4 1F01                   MOV.L       R0,@(4,R15)
    000007E6              L689:                             
    000007E6 D32B                   MOV.L       L772+14,R3 ; __itos
    000007E8 430B                   JSR         @R3
    000007EA 60E3                   MOV         R14,R0
    000007EC 4E11                   CMP/PZ      R14
    000007EE 8D14                   BT/S        L690
    000007F0 6403                   MOV         R0,R4
         Dodge.c   580            if (pk < 0) {
         Dodge.c   581                // decision value will decide to plot
         Dodge.c   582                // either  x1 or y1 in x's position
         Dodge.c   583                if (decide == 0) {
    000007F2 2998                   TST         R9,R9
    000007F4 8B08                   BF          L691
         Dodge.c   584                    // putpixel(x1, y1, RED);
         Dodge.c   585                    pk = pk + 2 * dy;
    000007F6 6143                   MOV         R4,R1
    000007F8 D230                   MOV.L       L772+54,R2 ; __adds
    000007FA 420B                   JSR         @R2
    000007FC 60A3                   MOV         R10,R0
    000007FE D323                   MOV.L       L772+6,R3  ; __stoi
    00000800 430B                   JSR         @R3
    00000802 0009                   NOP
    00000804 A007                   BRA         L760
    00000806 0009                   NOP
    00000808              L691:                             
         Dodge.c   586                }
         Dodge.c   587                else {
         Dodge.c   588                    //(y1,x1) is passed in xt
         Dodge.c   589                    // putpixel(y1, x1, YELLOW);
         Dodge.c   590                    pk = pk + 2 * dy;
    00000808 D32C                   MOV.L       L772+54,R3 ; __adds
    0000080A 6143                   MOV         R4,R1
    0000080C 430B                   JSR         @R3
    0000080E 60A3                   MOV         R10,R0
    00000810 D21E                   MOV.L       L772+6,R2  ; __stoi
    00000812 420B                   JSR         @R2
    00000814 0009                   NOP
    00000816              L760:                             
    00000816 A01C                   BRA         L693
    00000818 6E03                   MOV         R0,R14
    0000081A              L690:                             
         Dodge.c   591                }
         Dodge.c   592            }
         Dodge.c   593            else {
         Dodge.c   594                y1 < y2 ? y1++ : y1--;
    0000081A 61F2                   MOV.L       @R15,R1
    0000081C D225                   MOV.L       L772+46,R2 ; __lts
    0000081E 420B                   JSR         @R2
    00000820 50FE                   MOV.L       @(56,R15),R0
    00000822 8800                   CMP/EQ      #0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000824 8906                   BT          L694
    00000826 D124                   MOV.L       L772+50,R1 ; H'3F800000
    00000828 D324                   MOV.L       L772+54,R3 ; __adds
    0000082A 430B                   JSR         @R3
    0000082C 60F2                   MOV.L       @R15,R0
    0000082E 2F02                   MOV.L       R0,@R15
    00000830 A006                   BRA         L695
    00000832 0009                   NOP
    00000834              L694:                             
    00000834 61F2                   MOV.L       @R15,R1
    00000836 D020                   MOV.L       L772+50,R0 ; H'3F800000
    00000838 D213                   MOV.L       L772+2,R2  ; __subs
    0000083A 420B                   JSR         @R2
    0000083C 0009                   NOP
    0000083E 2F02                   MOV.L       R0,@R15
    00000840              L695:                             
         Dodge.c   595                if (decide == 0) {
         Dodge.c   596    
         Dodge.c   597                    // putpixel(x1, y1, RED);
         Dodge.c   598                }
         Dodge.c   599                else {
         Dodge.c   600                    //  putpixel(y1, x1, YELLOW);
         Dodge.c   601                }
         Dodge.c   602                pk = pk + 2 * dy - 2 * dx;
    00000840 D31E                   MOV.L       L772+54,R3 ; __adds
    00000842 2998                   TST         R9,R9
    00000844 6143                   MOV         R4,R1
    00000846 430B                   JSR         @R3
    00000848 50F3                   MOV.L       @(12,R15),R0
    0000084A D210                   MOV.L       L772+6,R2  ; __stoi
    0000084C 420B                   JSR         @R2
    0000084E 0009                   NOP
    00000850 6E03                   MOV         R0,R14
    00000852              L693:                             
    00000852 7B01                   ADD         #1,R11
    00000854 D30F                   MOV.L       L772+14,R3 ; __itos
    00000856 430B                   JSR         @R3
    00000858 60B3                   MOV         R11,R0
    0000085A D219                   MOV.L       L772+58,R2 ; __ges
    0000085C 420B                   JSR         @R2
    0000085E 61D3                   MOV         R13,R1
    00000860 8800                   CMP/EQ      #0,R0
    00000862 8B9A                   BF          L685
    00000864              L684:                             
         Dodge.c   603            }
         Dodge.c   604        }
         Dodge.c   605    
         Dodge.c   606        projectiles[arrayIndex].x = x2;
    00000864 D30F                   MOV.L       L772+30,R3 ; _projectiles
    00000866 54F4                   MOV.L       @(16,R15),R4
    00000868 343C                   ADD         R3,R4
    0000086A 1481                   MOV.L       R8,@(4,R4)
         Dodge.c   607        projectiles[arrayIndex].y = y2;
    0000086C 52FE                   MOV.L       @(56,R15),R2
    0000086E 1422                   MOV.L       R2,@(8,R4)
         Dodge.c   608    }
    00000870              L687:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000870 7F14                   ADD         #20,R15
    00000872 4F16                   LDS.L       @R15+,MACL
    00000874 4F26                   LDS.L       @R15+,PR
    00000876 68F6                   MOV.L       @R15+,R8
    00000878 69F6                   MOV.L       @R15+,R9
    0000087A 6AF6                   MOV.L       @R15+,R10
    0000087C 6BF6                   MOV.L       @R15+,R11
    0000087E 6CF6                   MOV.L       @R15+,R12
    00000880 6DF6                   MOV.L       @R15+,R13
    00000882 000B                   RTS
    00000884 6EF6                   MOV.L       @R15+,R14
    00000886              L772:                             
    00000886 0000                   .DATA.W     0
    00000888 <00000000>             .DATA.L     __subs
    0000088C <00000000>             .DATA.L     __stoi
    00000890 <00000000>             .DATA.L     _abs
    00000894 <00000000>             .DATA.L     __itos
    00000898 <00000000>             .DATA.L     __gts
    0000089C 40000000               .DATA.L     H'40000000
    000008A0 <00000000>             .DATA.L     __muls
    000008A4 <00000000>             .DATA.L     _projectiles
    000008A8 <00000000>             .DATA.L     __les
    000008AC <00000000>             .DATA.L     _playerHealth
    000008B0 <00000000>             .DATA.L     _false
    000008B4 <00000000>             .DATA.L     __lts
    000008B8 3F800000               .DATA.L     H'3F800000
    000008BC <00000000>             .DATA.L     __adds
    000008C0 <00000000>             .DATA.L     __ges
         Dodge.c   609    
         Dodge.c   610    void Physics()
    000008C4              _Physics:                        ; function: Physics
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __adds, __gts, __lts
    000008C4 2FE6                   MOV.L       R14,@-R15
    000008C6 2FD6                   MOV.L       R13,@-R15
    000008C8 2FC6                   MOV.L       R12,@-R15
         Dodge.c   611    {
         Dodge.c   612        size_t i;
         Dodge.c   613        for (i = 0; i < 128; i++)
    000008CA EC1C                   MOV         #28,R12
    000008CC 2FB6                   MOV.L       R11,@-R15
    000008CE 2FA6                   MOV.L       R10,@-R15
    000008D0 2F96                   MOV.L       R9,@-R15
    000008D2 2F86                   MOV.L       R8,@-R15
    000008D4 4F22                   STS.L       PR,@-R15
    000008D6 4F12                   STS.L       MACL,@-R15
    000008D8 D832                   MOV.L       L773+4,R8  ; _false
    000008DA 9B61                   MOV.W       L773,R11   ; H'0080
    000008DC A03F                   BRA         L698
    000008DE ED00                   MOV         #0,R13
    000008E0              L699:                             
    000008E0 0DC7                   MUL.L       R12,R13
    000008E2 0E1A                   STS         MACL,R14
    000008E4 D330                   MOV.L       L773+8,R3  ; _projectiles
    000008E6 3E3C                   ADD         R3,R14
    000008E8 62E0                   MOV.B       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008EA 2228                   TST         R2,R2
    000008EC 8936                   BT          L703
         Dodge.c   614        {
         Dodge.c   615            if(projectiles[i].enabled) {
         Dodge.c   616                // collision with edge of map
         Dodge.c   617                if(projectiles[i].x < 0 || projectiles[i].x > 128 || projectiles[i].y < 0 || projectiles[i].y 
                         +> 64) {
    000008EE 54E1                   MOV.L       @(4,R14),R4
    000008F0 D22E                   MOV.L       L773+12,R2 ; __lts
    000008F2 6143                   MOV         R4,R1
    000008F4 420B                   JSR         @R2
    000008F6 E000                   MOV         #0,R0
    000008F8 8800                   CMP/EQ      #0,R0
    000008FA 8B11                   BF          L702
    000008FC D02C                   MOV.L       L773+16,R0 ; H'43000000
    000008FE D22D                   MOV.L       L773+20,R2 ; __gts
    00000900 420B                   JSR         @R2
    00000902 6143                   MOV         R4,R1
    00000904 8800                   CMP/EQ      #0,R0
    00000906 8B0B                   BF          L702
    00000908 51E2                   MOV.L       @(8,R14),R1
    0000090A D228                   MOV.L       L773+12,R2 ; __lts
    0000090C 420B                   JSR         @R2
    0000090E E000                   MOV         #0,R0
    00000910 8800                   CMP/EQ      #0,R0
    00000912 8B05                   BF          L702
    00000914 D028                   MOV.L       L773+24,R0 ; H'42800000
    00000916 D227                   MOV.L       L773+20,R2 ; __gts
    00000918 420B                   JSR         @R2
    0000091A 51E2                   MOV.L       @(8,R14),R1
    0000091C 8800                   CMP/EQ      #0,R0
    0000091E 8902                   BT          L701
    00000920              L702:                             
         Dodge.c   618                    // destroy projectile
         Dodge.c   619                    projectiles[i].enabled = false;
    00000920 6380                   MOV.B       @R8,R3
         Dodge.c   620                    continue;
    00000922 A01B                   BRA         L703
    00000924 2E30                   MOV.B       R3,@R14
    00000926              L701:                             
         Dodge.c   621                }
         Dodge.c   622                // move + detect player collisions
         Dodge.c   623                MoveProjectile(i,
         Dodge.c   624                    projectiles[i].x,
         Dodge.c   625                    projectiles[i].y,
         Dodge.c   626                    projectiles[i].x + projectiles[i].xVelocity,
         Dodge.c   627                    projectiles[i].y + projectiles[i].yVelocity
         Dodge.c   628                );
    00000926 59E2                   MOV.L       @(8,R14),R9
    00000928 D324                   MOV.L       L773+28,R3 ; __adds
    0000092A 6193                   MOV         R9,R1
    0000092C 430B                   JSR         @R3
    0000092E 50E4                   MOV.L       @(16,R14),R0
    00000930 2F06                   MOV.L       R0,@-R15
    00000932 5AE1                   MOV.L       @(4,R14),R10
    00000934 D221                   MOV.L       L773+28,R2 ; __adds
    00000936 61A3                   MOV         R10,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000938 420B                   JSR         @R2
    0000093A 50E3                   MOV.L       @(12,R14),R0
    0000093C 6703                   MOV         R0,R7
    0000093E 6693                   MOV         R9,R6
    00000940 65A3                   MOV         R10,R5
    00000942 BED7                   BSR         _MoveProjectile
    00000944 64D3                   MOV         R13,R4
    00000946 7F04                   ADD         #4,R15
         Dodge.c   629                // projectiles[i].x += projectiles[i].xVelocity;
         Dodge.c   630                // projectiles[i].y += projectiles[i].yVelocity;
         Dodge.c   631                // update velocity
         Dodge.c   632                projectiles[i].xVelocity += projectiles[i].xAcceleration;
    00000948 D21C                   MOV.L       L773+28,R2 ; __adds
    0000094A 50E5                   MOV.L       @(20,R14),R0
    0000094C 420B                   JSR         @R2
    0000094E 51E3                   MOV.L       @(12,R14),R1
    00000950 1E03                   MOV.L       R0,@(12,R14)
         Dodge.c   633                projectiles[i].yVelocity += projectiles[i].yAcceleration;
    00000952 50E6                   MOV.L       @(24,R14),R0
    00000954 D319                   MOV.L       L773+28,R3 ; __adds
    00000956 430B                   JSR         @R3
    00000958 51E4                   MOV.L       @(16,R14),R1
    0000095A 1E04                   MOV.L       R0,@(16,R14)
    0000095C              L703:                             
    0000095C 7D01                   ADD         #1,R13
    0000095E              L698:                             
    0000095E 3DB2                   CMP/HS      R11,R13
    00000960 8BBE                   BF          L699
         Dodge.c   634            }
         Dodge.c   635        }
         Dodge.c   636    
         Dodge.c   637        // stop player from leaving map
         Dodge.c   638            if(playerX < 1)
    00000962 E401                   MOV         #1,R4
    00000964 D516                   MOV.L       L773+32,R5 ; _playerX
    00000966 6352                   MOV.L       @R5,R3
    00000968 3343                   CMP/GE      R4,R3
    0000096A 8D01                   BT/S        L704
         Dodge.c   639                playerX = 1;
         Dodge.c   640            if(playerX > 127)
    0000096C E67F                   MOV         #127,R6
    0000096E 2542                   MOV.L       R4,@R5
    00000970              L704:                             
    00000970 6352                   MOV.L       @R5,R3
    00000972 3367                   CMP/GT      R6,R3
    00000974 8B00                   BF          L705
         Dodge.c   641                playerX = 127;
    00000976 2562                   MOV.L       R6,@R5
    00000978              L705:                             
         Dodge.c   642            if(playerY < 1)
    00000978 D512                   MOV.L       L773+36,R5 ; _playerY
    0000097A 6352                   MOV.L       @R5,R3
    0000097C 3343                   CMP/GE      R4,R3
    0000097E 8900                   BT          L706
         Dodge.c   643                playerY = 1;
    00000980 2542                   MOV.L       R4,@R5
    00000982              L706:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   644            if(playerY > 63)
    00000982 E43F                   MOV         #63,R4
    00000984 6352                   MOV.L       @R5,R3
    00000986 3347                   CMP/GT      R4,R3
    00000988 8B00                   BF          L707
         Dodge.c   645                playerY = 63;
    0000098A 2542                   MOV.L       R4,@R5
    0000098C              L707:                             
         Dodge.c   646    }
    0000098C 4F16                   LDS.L       @R15+,MACL
    0000098E 4F26                   LDS.L       @R15+,PR
    00000990 68F6                   MOV.L       @R15+,R8
    00000992 69F6                   MOV.L       @R15+,R9
    00000994 6AF6                   MOV.L       @R15+,R10
    00000996 6BF6                   MOV.L       @R15+,R11
    00000998 6CF6                   MOV.L       @R15+,R12
    0000099A 6DF6                   MOV.L       @R15+,R13
    0000099C 000B                   RTS
    0000099E 6EF6                   MOV.L       @R15+,R14
    000009A0              L773:                             
    000009A0 0080                   .DATA.W     H'0080
    000009A2 0000                   .DATA.W     0
    000009A4 <00000000>             .DATA.L     _false
    000009A8 <00000000>             .DATA.L     _projectiles
    000009AC <00000000>             .DATA.L     __lts
    000009B0 43000000               .DATA.L     H'43000000
    000009B4 <00000000>             .DATA.L     __gts
    000009B8 42800000               .DATA.L     H'42800000
    000009BC <00000000>             .DATA.L     __adds
    000009C0 <00000000>             .DATA.L     _playerX
    000009C4 <00000000>             .DATA.L     _playerY
         Dodge.c   647    
         Dodge.c   648    void Controls()
    000009C8              _Controls:                       ; function: Controls
                                                           ; frame size=8
    000009C8 2FE6                   MOV.L       R14,@-R15
    000009CA 4F22                   STS.L       PR,@-R15
         Dodge.c   649    {
         Dodge.c   650        if(!quit) {
    000009CC D268                   MOV.L       L774+2,R2  ; _quit
    000009CE 6320                   MOV.B       @R2,R3
    000009D0 2338                   TST         R3,R3
    000009D2 8B23                   BF          L708
         Dodge.c   651            if(IsKeyDown(KEY_CTRL_LEFT)) {
    000009D4 DE67                   MOV.L       L774+6,R14 ; _playerX
    000009D6 BBB1                   BSR         _KeyDown
    000009D8 E426                   MOV         #38,R4
    000009DA 600C                   EXTU.B      R0,R0
    000009DC 2008                   TST         R0,R0
    000009DE 8D03                   BT/S        L709
         Dodge.c   652                playerX--;
         Dodge.c   653            }
         Dodge.c   654            if(IsKeyDown(KEY_CTRL_RIGHT)) {
    000009E0 E41B                   MOV         #27,R4
    000009E2 63E2                   MOV.L       @R14,R3
    000009E4 73FF                   ADD         #-1,R3
    000009E6 2E32                   MOV.L       R3,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009E8              L709:                             
    000009E8 BBA8                   BSR         _KeyDown
    000009EA 0009                   NOP
    000009EC 600C                   EXTU.B      R0,R0
    000009EE 2008                   TST         R0,R0
    000009F0 8902                   BT          L710
         Dodge.c   655                playerX++;
    000009F2 62E2                   MOV.L       @R14,R2
    000009F4 7201                   ADD         #1,R2
    000009F6 2E22                   MOV.L       R2,@R14
    000009F8              L710:                             
         Dodge.c   656            }
         Dodge.c   657            if(IsKeyDown(KEY_CTRL_UP)) {
    000009F8 DE5F                   MOV.L       L774+10,R14; _playerY
    000009FA BB9F                   BSR         _KeyDown
    000009FC E41C                   MOV         #28,R4
    000009FE 600C                   EXTU.B      R0,R0
    00000A00 2008                   TST         R0,R0
    00000A02 8D03                   BT/S        L711
         Dodge.c   658                playerY--;
         Dodge.c   659            }
         Dodge.c   660            if(IsKeyDown(KEY_CTRL_DOWN)) {
    00000A04 E425                   MOV         #37,R4
    00000A06 63E2                   MOV.L       @R14,R3
    00000A08 73FF                   ADD         #-1,R3
    00000A0A 2E32                   MOV.L       R3,@R14
    00000A0C              L711:                             
    00000A0C BB96                   BSR         _KeyDown
    00000A0E 0009                   NOP
    00000A10 600C                   EXTU.B      R0,R0
    00000A12 2008                   TST         R0,R0
    00000A14 8902                   BT          L708
         Dodge.c   661                playerY++;
    00000A16 62E2                   MOV.L       @R14,R2
    00000A18 7201                   ADD         #1,R2
    00000A1A 2E22                   MOV.L       R2,@R14
    00000A1C              L708:                             
         Dodge.c   662            }
         Dodge.c   663        }
         Dodge.c   664        
         Dodge.c   665    }
    00000A1C 4F26                   LDS.L       @R15+,PR
    00000A1E 000B                   RTS
    00000A20 6EF6                   MOV.L       @R15+,R14
         Dodge.c   666    
         Dodge.c   667    #pragma region attacks
         Dodge.c   668    
         Dodge.c   669    // next projectile in this attack
         Dodge.c   670    void SpawnNext() {
    00000A22              _SpawnNext:                      ; function: SpawnNext
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __itos
    00000A22 2FE6                   MOV.L       R14,@-R15
    00000A24 2FD6                   MOV.L       R13,@-R15
    00000A26 2FC6                   MOV.L       R12,@-R15
    00000A28 2FB6                   MOV.L       R11,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A2A EB00                   MOV         #0,R11
    00000A2C DC54                   MOV.L       L774+18,R12; _currentAttack
    00000A2E 2FA6                   MOV.L       R10,@-R15
    00000A30 2F96                   MOV.L       R9,@-R15
    00000A32 4F22                   STS.L       PR,@-R15
    00000A34 D951                   MOV.L       L774+14,R9 ; _projectileIndex
    00000A36 7FF8                   ADD         #-8,R15
    00000A38 60C2                   MOV.L       @R12,R0
    00000A3A 8800                   CMP/EQ      #0,R0
    00000A3C 8D06                   BT/S        L589
    00000A3E 6E92                   MOV.L       @R9,R14
    00000A40 8801                   CMP/EQ      #1,R0
    00000A42 8919                   BT          L590
    00000A44 8802                   CMP/EQ      #2,R0
    00000A46 8947                   BT          L591
    00000A48 A07D                   BRA         L592
    00000A4A 0009                   NOP
    00000A4C              L589:                            ; case label 
         Dodge.c   671        // I HATE THE FACT THAT YOU HAVE TO DECLARE VARIABLES AT THE START OF THE FUNCTION IN C
         Dodge.c   672        #pragma region a whole bunch of variable declarations
         Dodge.c   673        int mod;
         Dodge.c   674        int mod2;
         Dodge.c   675        int xPos;
         Dodge.c   676        int direction;
         Dodge.c   677        int directionX;
         Dodge.c   678        int directionY;
         Dodge.c   679        int i;
         Dodge.c   680        int j;
         Dodge.c   681        #pragma endregion
         Dodge.c   682        switch (currentAttack)
         Dodge.c   683        {
         Dodge.c   684            case 0:
         Dodge.c   685                mod = projectileIndex % 2;
    00000A4C 60E3                   MOV         R14,R0
    00000A4E 4011                   CMP/PZ      R0
    00000A50 8B01                   BF          L714
    00000A52 A005                   BRA         L715
    00000A54 C901                   AND         #1,R0
    00000A56              L714:                             
    00000A56 6007                   NOT         R0,R0
    00000A58 7001                   ADD         #1,R0
    00000A5A C901                   AND         #1,R0
    00000A5C 6007                   NOT         R0,R0
    00000A5E 7001                   ADD         #1,R0
    00000A60              L715:                             
    00000A60 6403                   MOV         R0,R4
         Dodge.c   686                xPos = mod == 0 ? 1 : 128 - 1;
    00000A62 2448                   TST         R4,R4
    00000A64 8B01                   BF          L716
    00000A66 A001                   BRA         L717
    00000A68 EA01                   MOV         #1,R10
    00000A6A              L716:                             
    00000A6A EA7F                   MOV         #127,R10
    00000A6C              L717:                             
         Dodge.c   687                direction = mod == 0 ? 1 : -1;
    00000A6C 2448                   TST         R4,R4
    00000A6E 8B01                   BF          L775




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A70 A07B                   BRA         L762
    00000A72 0009                   NOP
    00000A74              L775:                             
    00000A74 A095                   BRA         L586
    00000A76 EDFF                   MOV         #-1,R13
    00000A78              L590:                            ; case label 
         Dodge.c   688                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
         Dodge.c   689                break;
         Dodge.c   690            case 1:
         Dodge.c   691                mod = projectileIndex % 2;
    00000A78 60E3                   MOV         R14,R0
    00000A7A 4011                   CMP/PZ      R0
    00000A7C 8B01                   BF          L720
    00000A7E A005                   BRA         L721
    00000A80 C901                   AND         #1,R0
    00000A82              L720:                             
    00000A82 6007                   NOT         R0,R0
    00000A84 7001                   ADD         #1,R0
    00000A86 C901                   AND         #1,R0
    00000A88 6007                   NOT         R0,R0
    00000A8A 7001                   ADD         #1,R0
    00000A8C              L721:                             
    00000A8C 6403                   MOV         R0,R4
         Dodge.c   692                mod2 = (projectileIndex + 1) % 4;
         Dodge.c   693                directionX = mod == 0 ? 1 : -1;
    00000A8E 2448                   TST         R4,R4
    00000A90 8B01                   BF          L722
    00000A92 A001                   BRA         L723
    00000A94 E301                   MOV         #1,R3
    00000A96              L722:                             
    00000A96 E3FF                   MOV         #-1,R3
    00000A98              L723:                             
    00000A98 2F32                   MOV.L       R3,@R15
         Dodge.c   694                // directionY = mod2 < 2 ? 1 : -1;
         Dodge.c   695                directionY = ((projectileIndex % 8) - 4);
    00000A9A 60E3                   MOV         R14,R0
    00000A9C 4011                   CMP/PZ      R0
    00000A9E 8B01                   BF          L724
    00000AA0 A005                   BRA         L725
    00000AA2 C907                   AND         #7,R0
    00000AA4              L724:                             
    00000AA4 6007                   NOT         R0,R0
    00000AA6 7001                   ADD         #1,R0
    00000AA8 C907                   AND         #7,R0
    00000AAA 6007                   NOT         R0,R0
    00000AAC 7001                   ADD         #1,R0
    00000AAE              L725:                             
    00000AAE 70FC                   ADD         #-4,R0
         Dodge.c   696                SpawnProjectile(64, 32, (float)directionX * 2, (float)directionY, 0, 0);//Sign(-directionY) * 
                         +0.1f);
    00000AB0 D334                   MOV.L       L774+22,R3 ; __itos
    00000AB2 E200                   MOV         #0,R2
    00000AB4 1F01                   MOV.L       R0,@(4,R15)
    00000AB6 2F26                   MOV.L       R2,@-R15
    00000AB8 430B                   JSR         @R3
    00000ABA 2F26                   MOV.L       R2,@-R15
    00000ABC D131                   MOV.L       L774+22,R1 ; __itos




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000ABE 6703                   MOV         R0,R7
    00000AC0 410B                   JSR         @R1
    00000AC2 50F2                   MOV.L       @(8,R15),R0
    00000AC4 D130                   MOV.L       L774+26,R1 ; H'40000000
    00000AC6 D331                   MOV.L       L774+30,R3 ; __muls
    00000AC8 430B                   JSR         @R3
    00000ACA 0009                   NOP
    00000ACC D530                   MOV.L       L774+34,R5 ; H'42000000
    00000ACE D431                   MOV.L       L774+38,R4 ; H'42800000
    00000AD0 BD9E                   BSR         _SpawnProjectile
    00000AD2 6603                   MOV         R0,R6
         Dodge.c   697                break;
    00000AD4 A07C                   BRA         L761
    00000AD6 0009                   NOP
    00000AD8              L591:                            ; case label 
         Dodge.c   698            case 2:
         Dodge.c   699                if(projectileIndex % 5 == 0) {
    00000AD8 D22F                   MOV.L       L774+42,R2 ; __modls
    00000ADA 61E3                   MOV         R14,R1
    00000ADC 420B                   JSR         @R2
    00000ADE E005                   MOV         #5,R0
    00000AE0 2008                   TST         R0,R0
    00000AE2 8B76                   BF          L713
         Dodge.c   700                    if(projectileIndex % 10 == 0) {
    00000AE4 D22C                   MOV.L       L774+42,R2 ; __modls
    00000AE6 ED10                   MOV         #16,R13
    00000AE8 61E3                   MOV         R14,R1
    00000AEA 420B                   JSR         @R2
    00000AEC E00A                   MOV         #10,R0
    00000AEE 2008                   TST         R0,R0
    00000AF0 8B14                   BF          L727
         Dodge.c   701                        for (i = 0; i < 16; i++)
    00000AF2 6AB3                   MOV         R11,R10
    00000AF4 A00E                   BRA         L728
    00000AF6 6EB3                   MOV         R11,R14
    00000AF8              L729:                             
         Dodge.c   702                        {
         Dodge.c   703                            SpawnProjectile(i * 8, 0, 0, 2, 0, 0);
    00000AF8 D723                   MOV.L       L774+26,R7 ; H'40000000
    00000AFA E300                   MOV         #0,R3
    00000AFC D221                   MOV.L       L774+22,R2 ; __itos
    00000AFE 6633                   MOV         R3,R6
    00000B00 2F36                   MOV.L       R3,@-R15
    00000B02 6533                   MOV         R3,R5
    00000B04 2F36                   MOV.L       R3,@-R15
    00000B06 420B                   JSR         @R2
    00000B08 60E3                   MOV         R14,R0
    00000B0A BD81                   BSR         _SpawnProjectile
    00000B0C 6403                   MOV         R0,R4
    00000B0E 7F08                   ADD         #8,R15
    00000B10 7A01                   ADD         #1,R10
    00000B12 7E08                   ADD         #8,R14
    00000B14              L728:                             
    00000B14 3AD3                   CMP/GE      R13,R10
    00000B16 8BEF                   BF          L729
    00000B18 A05B                   BRA         L713
    00000B1A 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B1C              L727:                             
         Dodge.c   704                        }
         Dodge.c   705                    }
         Dodge.c   706                    else {
         Dodge.c   707                        for (i = 0; i < 16; i++)
    00000B1C 6AB3                   MOV         R11,R10
    00000B1E A00E                   BRA         L731
    00000B20 EE04                   MOV         #4,R14
    00000B22              L732:                             
         Dodge.c   708                        {
         Dodge.c   709                            SpawnProjectile(i * 8 + 4, 64, 0, -2, 0, 0);
    00000B22 E200                   MOV         #0,R2
    00000B24 D71D                   MOV.L       L774+46,R7 ; H'C0000000
    00000B26 6623                   MOV         R2,R6
    00000B28 D51A                   MOV.L       L774+38,R5 ; H'42800000
    00000B2A 2F26                   MOV.L       R2,@-R15
    00000B2C 2F26                   MOV.L       R2,@-R15
    00000B2E D315                   MOV.L       L774+22,R3 ; __itos
    00000B30 430B                   JSR         @R3
    00000B32 60E3                   MOV         R14,R0
    00000B34 BD6C                   BSR         _SpawnProjectile
    00000B36 6403                   MOV         R0,R4
    00000B38 7F08                   ADD         #8,R15
    00000B3A 7A01                   ADD         #1,R10
    00000B3C 7E08                   ADD         #8,R14
    00000B3E              L731:                             
    00000B3E 3AD3                   CMP/GE      R13,R10
    00000B40 8BEF                   BF          L732
         Dodge.c   710                        }
         Dodge.c   711                    }
         Dodge.c   712                    
         Dodge.c   713                }
         Dodge.c   714                break;
    00000B42 A046                   BRA         L713
    00000B44 0009                   NOP
    00000B46              L592:                            ; default label 
         Dodge.c   715            default:
         Dodge.c   716                mod2 = projectileIndex % 2;
    00000B46 60E3                   MOV         R14,R0
    00000B48 4011                   CMP/PZ      R0
    00000B4A 8B01                   BF          L733
    00000B4C A005                   BRA         L734
    00000B4E C901                   AND         #1,R0
    00000B50              L733:                             
    00000B50 6007                   NOT         R0,R0
    00000B52 7001                   ADD         #1,R0
    00000B54 C901                   AND         #1,R0
    00000B56 6007                   NOT         R0,R0
    00000B58 7001                   ADD         #1,R0
    00000B5A              L734:                             
    00000B5A 6403                   MOV         R0,R4
         Dodge.c   717                xPos = mod2 == 0 ? 1 : 128 - 1;
    00000B5C 2448                   TST         R4,R4
    00000B5E 8B01                   BF          L735
    00000B60 A001                   BRA         L736
    00000B62 EA01                   MOV         #1,R10
    00000B64              L735:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B64 EA7F                   MOV         #127,R10
    00000B66              L736:                             
         Dodge.c   718                direction = mod2 == 0 ? 1 : -1;
    00000B66 2448                   TST         R4,R4
    00000B68 8B1A                   BF          L737
    00000B6A              L762:                             
    00000B6A A01A                   BRA         L586
    00000B6C ED01                   MOV         #1,R13
    00000B6E              L774:                             
    00000B6E 0000                   .DATA.W     0
    00000B70 <00000000>             .DATA.L     _quit
    00000B74 <00000000>             .DATA.L     _playerX
    00000B78 <00000000>             .DATA.L     _playerY
    00000B7C <00000000>             .DATA.L     _projectileIndex
    00000B80 <00000000>             .DATA.L     _currentAttack
    00000B84 <00000000>             .DATA.L     __itos
    00000B88 40000000               .DATA.L     H'40000000
    00000B8C <00000000>             .DATA.L     __muls
    00000B90 42000000               .DATA.L     H'42000000
    00000B94 42800000               .DATA.L     H'42800000
    00000B98 <00000000>             .DATA.L     __modls
    00000B9C C0000000               .DATA.L     H'C0000000
    00000BA0              L737:                             
    00000BA0 EDFF                   MOV         #-1,R13
    00000BA2              L586:
         Dodge.c   719                SpawnProjectile(xPos, (projectileIndex + 1) * 4, 0, 0, (float)direction * 0.1f, 0);
    00000BA2 E200                   MOV         #0,R2
    00000BA4 D336                   MOV.L       L776,R3    ; __itos
    00000BA6 2F26                   MOV.L       R2,@-R15
    00000BA8 430B                   JSR         @R3
    00000BAA 60D3                   MOV         R13,R0
    00000BAC D135                   MOV.L       L776+4,R1  ; H'3DCCCCCD
    00000BAE D336                   MOV.L       L776+8,R3  ; __muls
    00000BB0 430B                   JSR         @R3
    00000BB2 0009                   NOP
    00000BB4 2F06                   MOV.L       R0,@-R15
    00000BB6 6723                   MOV         R2,R7
    00000BB8 D331                   MOV.L       L776,R3    ; __itos
    00000BBA 6623                   MOV         R2,R6
    00000BBC 60E3                   MOV         R14,R0
    00000BBE 7001                   ADD         #1,R0
    00000BC0 430B                   JSR         @R3
    00000BC2 4008                   SHLL2       R0
    00000BC4 D12E                   MOV.L       L776,R1    ; __itos
    00000BC6 6503                   MOV         R0,R5
    00000BC8 410B                   JSR         @R1
    00000BCA 60A3                   MOV         R10,R0
    00000BCC BD20                   BSR         _SpawnProjectile
    00000BCE 6403                   MOV         R0,R4
         Dodge.c   720                break;
    00000BD0              L761:                             
    00000BD0 7F08                   ADD         #8,R15
    00000BD2              L713:                             
         Dodge.c   721        }
         Dodge.c   722    
         Dodge.c   723        projectileIndex++;
    00000BD2 6392                   MOV.L       @R9,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   724        if(projectileIndex > maxProjectiles) {
    00000BD4 D02D                   MOV.L       L776+12,R0 ; _maxProjectiles
    00000BD6 7301                   ADD         #1,R3
    00000BD8 2932                   MOV.L       R3,@R9
    00000BDA 6133                   MOV         R3,R1
    00000BDC 6202                   MOV.L       @R0,R2
    00000BDE 3127                   CMP/GT      R2,R1
    00000BE0 8B0B                   BF          L739
         Dodge.c   725            KillTimer(ID_USER_TIMER5); // stop this attack
    00000BE2 D12B                   MOV.L       L776+16,R1 ; _KillTimer
    00000BE4 410B                   JSR         @R1
    00000BE6 E405                   MOV         #5,R4
         Dodge.c   726            currentAttack++;
    00000BE8 63C2                   MOV.L       @R12,R3
    00000BEA 7301                   ADD         #1,R3
    00000BEC 2C32                   MOV.L       R3,@R12
         Dodge.c   727            if(currentAttack >= attacksTotal)
    00000BEE 6133                   MOV         R3,R1
    00000BF0 D028                   MOV.L       L776+20,R0 ; _attacksTotal
    00000BF2 6202                   MOV.L       @R0,R2
    00000BF4 3123                   CMP/GE      R2,R1
    00000BF6 8B00                   BF          L739
         Dodge.c   728                currentAttack = 0;
    00000BF8 2CB2                   MOV.L       R11,@R12
    00000BFA              L739:                             
         Dodge.c   729        }
         Dodge.c   730    }
    00000BFA 7F08                   ADD         #8,R15
    00000BFC 4F26                   LDS.L       @R15+,PR
    00000BFE 69F6                   MOV.L       @R15+,R9
    00000C00 6AF6                   MOV.L       @R15+,R10
    00000C02 6BF6                   MOV.L       @R15+,R11
    00000C04 6CF6                   MOV.L       @R15+,R12
    00000C06 6DF6                   MOV.L       @R15+,R13
    00000C08 000B                   RTS
    00000C0A 6EF6                   MOV.L       @R15+,R14
         Dodge.c   731    // the next "attack"
         Dodge.c   732    void NextProjectiles() {
    00000C0C              _NextProjectiles:                ; function: NextProjectiles
                                                           ; frame size=0
         Dodge.c   733        projectileIndex = 0;
    00000C0C D222                   MOV.L       L776+24,R2 ; _projectileIndex
    00000C0E E300                   MOV         #0,R3
         Dodge.c   734    
         Dodge.c   735        // note maxProjectiles can't be more than 50 or it'll run into the next attack and cause issues
         Dodge.c   736        switch (currentAttack)
    00000C10 D41E                   MOV.L       L776+12,R4 ; _maxProjectiles
    00000C12 2232                   MOV.L       R3,@R2
    00000C14 D321                   MOV.L       L776+28,R3 ; _currentAttack
    00000C16 6032                   MOV.L       @R3,R0
    00000C18 8800                   CMP/EQ      #0,R0
    00000C1A 8D0C                   BT/S        L763
    00000C1C E510                   MOV         #16,R5
    00000C1E 8801                   CMP/EQ      #1,R0
    00000C20 8903                   BT          L594
    00000C22 8802                   CMP/EQ      #2,R0
    00000C24 8904                   BT          L595




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C26 A006                   BRA         L763
    00000C28 0009                   NOP
    00000C2A              L594:                            ; case label 
         Dodge.c   737        {
         Dodge.c   738            case 0:
         Dodge.c   739                maxProjectiles = 16;
         Dodge.c   740                break;
         Dodge.c   741            case 1:
         Dodge.c   742                maxProjectiles = 32;
    00000C2A E020                   MOV         #32,R0
         Dodge.c   743                break;
    00000C2C A004                   BRA         L741
    00000C2E 2402                   MOV.L       R0,@R4
    00000C30              L595:                            ; case label 
         Dodge.c   744            case 2:
         Dodge.c   745                maxProjectiles = 15;
    00000C30 E10F                   MOV         #15,R1
         Dodge.c   746                break;
    00000C32 A001                   BRA         L741
    00000C34 2412                   MOV.L       R1,@R4
    00000C36              L763:                             
         Dodge.c   747            default:
         Dodge.c   748                maxProjectiles = 16;
    00000C36 2452                   MOV.L       R5,@R4
    00000C38              L741:                             
         Dodge.c   749                break;
         Dodge.c   750        }
         Dodge.c   751    
         Dodge.c   752        SetTimer(ID_USER_TIMER5, 100, SpawnNext);
    00000C38 D619                   MOV.L       L776+32,R6 ; _SpawnNext
    00000C3A E564                   MOV         #100,R5
    00000C3C D319                   MOV.L       L776+36,R3 ; _SetTimer
    00000C3E 432B                   JMP         @R3
    00000C40 E405                   MOV         #5,R4
         Dodge.c   753    }
         Dodge.c   754    
         Dodge.c   755    #pragma endregion
         Dodge.c   756    
         Dodge.c   757    #pragma endregion
         Dodge.c   758    
         Dodge.c   759    /** Add-in entry point
         Dodge.c   760     * 
         Dodge.c   761     * Parameters: app_mode - Is launched from the main menu
         Dodge.c   762     *             strip_no - Strip number from eActivity
         Dodge.c   763     * 
         Dodge.c   764     * Returns:    NOT error
         Dodge.c   765     */
         Dodge.c   766    // Start function
         Dodge.c   767    int AddIn_main(int app_mode, unsigned short strip_no)
    00000C42              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=20
    00000C42 2FE6                   MOV.L       R14,@-R15
    00000C44 2FD6                   MOV.L       R13,@-R15
    00000C46 4F22                   STS.L       PR,@-R15
    00000C48 DE17                   MOV.L       L776+40,R14; _true
    00000C4A 7FF8                   ADD         #-8,R15
         Dodge.c   768    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   769        unsigned int i, j; // Iteration variables
         Dodge.c   770        unsigned char str[3];
         Dodge.c   771        unsigned int key;  // Keyboard input
         Dodge.c   772    
         Dodge.c   773        // Clear out the display
         Dodge.c   774        Bdisp_AllClr_DDVRAM();
    00000C4C D317                   MOV.L       L776+44,R3 ; _Bdisp_AllClr_DDVRAM
    00000C4E 430B                   JSR         @R3
    00000C50 0009                   NOP
         Dodge.c   775        RenderMainMenu();
    00000C52 BB6C                   BSR         _RenderMainMenu
    00000C54 0009                   NOP
         Dodge.c   776        
         Dodge.c   777        while(true) { // menu
    00000C56 A02B                   BRA         L742
    00000C58 0009                   NOP
    00000C5A              L743:                             
         Dodge.c   778            if(IsKeyDown(KEY_CTRL_EXE)) {
    00000C5A BA6F                   BSR         _KeyDown
    00000C5C E41F                   MOV         #31,R4
    00000C5E 600C                   EXTU.B      R0,R0
    00000C60 2008                   TST         R0,R0
    00000C62 8B28                   BF          L745
         Dodge.c   779                break;
         Dodge.c   780            }
         Dodge.c   781            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000C64 BA6A                   BSR         _KeyDown
    00000C66 E430                   MOV         #48,R4
    00000C68 600C                   EXTU.B      R0,R0
    00000C6A 2008                   TST         R0,R0
    00000C6C 8B04                   BF          L747
    00000C6E BA65                   BSR         _KeyDown
    00000C70 E42F                   MOV         #47,R4
    00000C72 600C                   EXTU.B      R0,R0
    00000C74 2008                   TST         R0,R0
    00000C76 891B                   BT          L742
    00000C78              L747:                             
         Dodge.c   782            {
         Dodge.c   783                AppQuit();
    00000C78 BAF8                   BSR         _AppQuit
    00000C7A 0009                   NOP
         Dodge.c   784                break;
    00000C7C A01B                   BRA         L745
    00000C7E 0009                   NOP
    00000C80              L776:                             
    00000C80 <00000000>             .DATA.L     __itos
    00000C84 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000C88 <00000000>             .DATA.L     __muls
    00000C8C <00000000>             .DATA.L     _maxProjectiles
    00000C90 <00000000>             .DATA.L     _KillTimer
    00000C94 <00000000>             .DATA.L     _attacksTotal
    00000C98 <00000000>             .DATA.L     _projectileIndex
    00000C9C <00000000>             .DATA.L     _currentAttack
    00000CA0 <00000000>             .DATA.L     _SpawnNext
    00000CA4 <00000000>             .DATA.L     _SetTimer
    00000CA8 <00000000>             .DATA.L     _true
    00000CAC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CB0              L742:                             
    00000CB0 63E0                   MOV.B       @R14,R3
    00000CB2 2338                   TST         R3,R3
    00000CB4 8BD1                   BF          L743
    00000CB6              L745:                             
         Dodge.c   785            }
         Dodge.c   786        }
         Dodge.c   787    
         Dodge.c   788        Bdisp_AllClr_DDVRAM();
    00000CB6 D322                   MOV.L       L777+2,R3  ; _Bdisp_AllClr_DDVRAM
    00000CB8 430B                   JSR         @R3
    00000CBA 0009                   NOP
         Dodge.c   789    
         Dodge.c   790        // Set up timers for rendering and ball
         Dodge.c   791        SetTimer(ID_USER_TIMER1, 50, RenderScreen);
    00000CBC DD21                   MOV.L       L777+6,R13 ; _SetTimer
    00000CBE E532                   MOV         #50,R5
    00000CC0 D621                   MOV.L       L777+10,R6 ; _RenderScreen
    00000CC2 4D0B                   JSR         @R13
    00000CC4 E401                   MOV         #1,R4
         Dodge.c   792        SetTimer(ID_USER_TIMER2, 50, Controls);
    00000CC6 E532                   MOV         #50,R5
    00000CC8 D620                   MOV.L       L777+14,R6 ; _Controls
    00000CCA 4D0B                   JSR         @R13
    00000CCC E402                   MOV         #2,R4
         Dodge.c   793        SetTimer(ID_USER_TIMER3, 50, Physics);
    00000CCE E532                   MOV         #50,R5
    00000CD0 D61F                   MOV.L       L777+18,R6 ; _Physics
    00000CD2 4D0B                   JSR         @R13
    00000CD4 E403                   MOV         #3,R4
         Dodge.c   794        SetTimer(ID_USER_TIMER4, 5000, NextProjectiles);
    00000CD6 D61F                   MOV.L       L777+22,R6 ; _NextProjectiles
    00000CD8 9531                   MOV.W       L777,R5    ; H'1388
    00000CDA 4D0B                   JSR         @R13
    00000CDC E404                   MOV         #4,R4
         Dodge.c   795    
         Dodge.c   796        // Set quit handler
         Dodge.c   797        SetQuitHandler(AppQuit);
    00000CDE D41E                   MOV.L       L777+26,R4 ; _AppQuit
    00000CE0 D21E                   MOV.L       L777+30,R2 ; _SetQuitHandler
    00000CE2 420B                   JSR         @R2
    00000CE4 0009                   NOP
         Dodge.c   798    
         Dodge.c   799        // The main thread manages the keys
         Dodge.c   800        while (IsKeyUp(KEY_CTRL_MENU))
    00000CE6 A01D                   BRA         L748
    00000CE8 0009                   NOP
    00000CEA              L749:                             
         Dodge.c   801        {
         Dodge.c   802            int keyResp = GetKeyWait(KEYWAIT_HALTON_TIMEROFF, 0, 0, &key);
    00000CEA 67F3                   MOV         R15,R7
    00000CEC DD1C                   MOV.L       L777+34,R13; _GetKeyWait
    00000CEE E600                   MOV         #0,R6
    00000CF0 6563                   MOV         R6,R5
    00000CF2 4D0B                   JSR         @R13
    00000CF4 6463                   MOV         R6,R4
         Dodge.c   803        




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Dodge.c   804            if (keyResp == KEYREP_KEYEVENT)
    00000CF6 8801                   CMP/EQ      #1,R0
    00000CF8 8F06                   BF/S        L750
    00000CFA 6403                   MOV         R0,R4
         Dodge.c   805            {
         Dodge.c   806                if (key == KEY_CTRL_MENU || key == KEY_CTRL_EXIT)
    00000CFC 60F2                   MOV.L       @R15,R0
    00000CFE 8830                   CMP/EQ      #48,R0
    00000D00 890C                   BT          L587
    00000D02 60F2                   MOV.L       @R15,R0
    00000D04 882F                   CMP/EQ      #47,R0
    00000D06 8909                   BT          L587
    00000D08              L750:                             
         Dodge.c   807                {
         Dodge.c   808                    AppQuit();
         Dodge.c   809                    break;
         Dodge.c   810                }
         Dodge.c   811            }
         Dodge.c   812    
         Dodge.c   813            if (IsKeyDown(KEY_CTRL_MENU) || IsKeyDown(KEY_CTRL_EXIT))
    00000D08 BA18                   BSR         _KeyDown
    00000D0A E430                   MOV         #48,R4
    00000D0C 600C                   EXTU.B      R0,R0
    00000D0E 2008                   TST         R0,R0
    00000D10 8B04                   BF          L587
    00000D12 BA13                   BSR         _KeyDown
    00000D14 E42F                   MOV         #47,R4
    00000D16 600C                   EXTU.B      R0,R0
    00000D18 2008                   TST         R0,R0
    00000D1A 8903                   BT          L748
    00000D1C              L587:
         Dodge.c   814            {
         Dodge.c   815                AppQuit();
    00000D1C BAA6                   BSR         _AppQuit
    00000D1E 0009                   NOP
         Dodge.c   816                break;
    00000D20 A005                   BRA         L753
    00000D22 0009                   NOP
    00000D24              L748:                             
    00000D24 BA0A                   BSR         _KeyDown
    00000D26 E430                   MOV         #48,R4
    00000D28 600C                   EXTU.B      R0,R0
    00000D2A 2008                   TST         R0,R0
    00000D2C 89DD                   BT          L749
    00000D2E              L753:                             
         Dodge.c   817            }
         Dodge.c   818        }
         Dodge.c   819    
         Dodge.c   820        // Good job on somehow breaking the loop. Cleanup time.
         Dodge.c   821        AppQuit();
    00000D2E BA9D                   BSR         _AppQuit
    00000D30 0009                   NOP
         Dodge.c   822    
         Dodge.c   823        // At the end, return application status
         Dodge.c   824        return true;
    00000D32 60E0                   MOV.B       @R14,R0
         Dodge.c   825    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D34 7F08                   ADD         #8,R15
    00000D36 4F26                   LDS.L       @R15+,PR
    00000D38 6DF6                   MOV.L       @R15+,R13
    00000D3A 000B                   RTS
    00000D3C 6EF6                   MOV.L       @R15+,R14
    00000D3E              L777:                             
    00000D3E 1388                   .DATA.W     H'1388
    00000D40 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000D44 <00000000>             .DATA.L     _SetTimer
    00000D48 <00000000>             .DATA.L     _RenderScreen
    00000D4C <00000000>             .DATA.L     _Controls
    00000D50 <00000000>             .DATA.L     _Physics
    00000D54 <00000000>             .DATA.L     _NextProjectiles
    00000D58 <00000000>             .DATA.L     _AppQuit
    00000D5C <00000000>             .DATA.L     _SetQuitHandler
    00000D60 <00000000>             .DATA.L     _GetKeyWait
         Dodge.c   826    
         Dodge.c   827    #pragma region Do not touch
         Dodge.c   828    
         Dodge.c   829    // Source code from here down should not be changed according to the
         Dodge.c   830    // CASIO SDK sample project.
         Dodge.c   831    
         Dodge.c   832    #pragma section _BR_Size
         Dodge.c   833    unsigned long BR_Size;
         Dodge.c   834    #pragma section
         Dodge.c   835    
         Dodge.c   836    #pragma section _TOP
         Dodge.c   837    
         Dodge.c   838    //****************************************************************************
         Dodge.c   839    //  InitializeSystem
         Dodge.c   840    //
         Dodge.c   841    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Dodge.c   842    //              OptionNum : Option Number (only eActivity)
         Dodge.c   843    //
         Dodge.c   844    //  retval  :   1 = No error / 0 = Error
         Dodge.c   845    //
         Dodge.c   846    //****************************************************************************
         Dodge.c   847    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Dodge.c   848    {
         Dodge.c   849        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L778+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L778:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Dodge.c   850    }
         Dodge.c   851    
         Dodge.c   852    #pragma section
         Dodge.c   853    
         Dodge.c   854    #pragma endregion
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             15           
    00000010              _true:                           ; static: true
    00000010 01                     .DATA.B     H'01
    00000011              _false:                          ; static: false
    00000011 00                     .DATA.B     H'00
    00000012              _DISPLAY_WIDTH:                  ; static: DISPLAY_WIDTH
    00000012 80                     .DATA.B     H'80
    00000013              _DISPLAY_HEIGHT:                 ; static: DISPLAY_HEIGHT
    00000013 40                     .DATA.B     H'40
    00000014              _DISPLAY_CENTER_X:               ; static: DISPLAY_CENTER_X
    00000014 40                     .DATA.B     H'40
    00000015              _DISPLAY_CENTER_Y:               ; static: DISPLAY_CENTER_Y
    00000015 20                     .DATA.B     H'20
    00000016 00000002               .RES.W      1
    00000018              _attacksTotal:                   ; static: attacksTotal
    00000018 00000003               .DATA.L     H'00000003
    0000001C              L441:
    0000001C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000         
    000000F0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000001C4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000298 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    0000036C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000         
    00000440 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101010101   
             0101010101   
             0101         
    00000514 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000101   
             0101010101   
             0100010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100010000   
             0001000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000005E8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010001 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000100   
             0000010000   
             0100010000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000006BC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0001000100   
             0000000001   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000010000   
             0000000000   
             0000000001   
             0000000100   
             0100         
    00000790 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000101 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'01,
             0001000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0001000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000864 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0000010100   
             0000000000   
             0100000000   
             0000000001   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000938 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'01,H'00
             0000000000   
             0000000000   
             0100010101   
             0101010101   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0100         
    00000A0C 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0100010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'00,H'00,H'00
             0001000000   
             0000000000   
             0000000000   
             0000000101   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0001000000   
             0100000100   
             0100000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000         
    00000AE0 0000010000             .DATA.B     H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000         
    00000BB4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0101010101   
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0101010100   
             0000000000   
             0000000000   
             0100000000   
             0000010000   
             0000000000   
             0000000000   
             0000         
    00000C88 0000000001             .DATA.B     H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0100000001 +                       H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0001000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000100 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0001010100   
             0000000100   
             0100010000   
             0001000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010101   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000         
    00000D5C 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'01,
             0000010101 +                       H'01,H'01,H'01,H'01,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000101 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0101010101 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0000000100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,
             0100000000 +                       H'00,H'00,H'00,H'01
             0100000001   
             0000000100   
             0000000100   
             0000010000   
             0000000100   
             0000000000   
             0100000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000001   
             0000000001   
             0000000100   
             0000010000   
             0000010000   
             0001000000   
             0000010000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0001000000   
             0001         
    00000E30 0000000100             .DATA.B     H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010100 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00
             0000000001   
             0101010101   
             0000000000   
             0000000000   
             0000000101   
             0101010100   
             0000000000   
             0000000001   
             0000000001   
             0101010100   
             0000000001   
             0101000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000100   
             0000000000   
             0000000100   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000         
    00000F04 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000010000   
             0000000001   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0101010000   
             0000000000   
             0000000100   
             0000000001   
             0101000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000FD8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0100000001   
             0001000100   
             0000000001   
             0100000000   
             0100000000   
             0000010101   
             0101010101   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0101010000   
             0000000000   
             0000000001   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000         
    000010AC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0001000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000100   
             0100010000   
             0000000000   
             0000000100   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000010000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0100010001   
             0001000000   
             0000000000   
             0001000000   
             0000000000   
             0100000000   
             0000         
    00001180 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000100 +                       H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,
             0000010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,
             0101010101 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0001000000   
             0100000100   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000010000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0001010101   
             0101010000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    00001254 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0101000000   
             0000010100   
             0000000000   
             0000000000   
             0001000000   
             0000000001   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010101   
             0100000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001328 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0000010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010101 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010100 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000010101   
             0101010100   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100         
    000013FC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0000000000 +                       H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000101 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'01,H'01,H'00
             0000000000   
             0000000000   
             0000000000   
             0101010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0101000000   
             0000000000   
             0000000000   
             0000010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001010100   
             0000000000   
             0000000001   
             0100         
    000014D0 0100000000             .DATA.B     H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0001010000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             0100000001 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010101   
             0000000000   
             0000000000   
             0000000000   
             0101000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000015A4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0101010101   
             0101010100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001678 0001000000             .DATA.B     H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101010101 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0101010000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,
             0100000001 +                       H'00,H'00,H'00,H'00
             0000000001   
             0000000000   
             0000000001   
             0000010000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000100   
             0000000000   
             0000000100   
             0001010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000010000   
             0000010000   
             0000000000   
             0000         
    0000174C 0100000100             .DATA.B     H'01,H'00,H'00,H'01,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0100000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'01,H'01,H'00,H'00,H'00,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0101000000 +                       H'00,H'00,H'00,H'00
             0101000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001820 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'01,H'01,H'01,
             0000000000 +                       H'01,H'01,H'01,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000101   
             0101010101   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000018F4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000001 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    000019C8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001A9C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001B70 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001C44 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001D18 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001DEC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001EC0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00001F94 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             00           
D   00000000              _playerHealth:                   ; static: playerHealth
    00000000 00000080               .DATA.L     H'00000080
    00000004              _playerX:                        ; static: playerX
    00000004 00000040               .DATA.L     H'00000040
    00000008              _playerY:                        ; static: playerY
    00000008 00000020               .DATA.L     H'00000020
    0000000C              _currentAttack:                  ; static: currentAttack
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _paused:                         ; static: paused
    00000010 01                     .DATA.B     H'01
    00000011              _quit:                           ; static: quit
    00000011 00                     .DATA.B     H'00
B   00000000              _projectiles:                    ; static: projectiles
    00000000 00000E00               .RES.L      896
    00000E00              _projectileIndex:                ; static: projectileIndex
    00000E00 00000004               .RES.L      1
    00000E04              _maxProjectiles:                 ; static: maxProjectiles
    00000E04 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Mar-2023 17:13:50  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        59




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      854



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000D64 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000201C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000012 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000E08 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00003BAA Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           24
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          43
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           196






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Amir\AppData\Local\Temp\hmkF60.tmp 

